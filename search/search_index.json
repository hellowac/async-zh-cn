{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u5f02\u6b65IO\uff08 asyncio\uff09 \u534f\u7a0b","text":"<p>\u8f6c\u81ea: https://www.jianshu.com/p/b5e347b3a17c</p> <p>\u672c\u6587\u662f17\u5e74\u5199\u7684\uff0c\u81f3\u4eca\u8fc7\u53bb\u591a\u5e74\uff0c\u6709\u4e00\u7bc7\u66f4\u597d\u7684\u6587\u6863\uff1a https://superfastpython.com/python-asyncio/</p>"},{"location":"#python-asyncio","title":"python asyncio","text":"<p>\u7f51\u7edc\u6a21\u578b\u6709\u5f88\u591a\u4e2d\uff0c\u4e3a\u4e86\u5b9e\u73b0\u9ad8\u5e76\u53d1\u4e5f\u6709\u5f88\u591a\u65b9\u6848\uff0c\u591a\u7ebf\u7a0b\uff0c\u591a\u8fdb\u7a0b\u3002\u65e0\u8bba\u591a\u7ebf\u7a0b\u548c\u591a\u8fdb\u7a0b\uff0cIO\u7684\u8c03\u5ea6\u66f4\u591a\u53d6\u51b3\u4e8e\u7cfb\u7edf\uff0c\u800c\u534f\u7a0b\u7684\u65b9\u5f0f\uff0c\u8c03\u5ea6\u6765\u81ea\u7528\u6237\uff0c\u7528\u6237\u53ef\u4ee5\u5728\u51fd\u6570\u4e2d<code>yield</code>\u4e00\u4e2a\u72b6\u6001\u3002\u4f7f\u7528\u534f\u7a0b\u53ef\u4ee5\u5b9e\u73b0\u9ad8\u6548\u7684\u5e76\u53d1\u4efb\u52a1\u3002Python\u7684\u5728<code>3.4</code>\u4e2d\u5f15\u5165\u4e86\u534f\u7a0b\u7684\u6982\u5ff5\uff0c\u53ef\u662f\u8fd9\u4e2a\u8fd8\u662f\u4ee5\u751f\u6210\u5668\u5bf9\u8c61\u4e3a\u57fa\u7840\uff0c<code>3.5</code>\u5219\u786e\u5b9a\u4e86\u534f\u7a0b\u7684\u8bed\u6cd5\u3002\u4e0b\u9762\u5c06\u7b80\u5355\u4ecb\u7ecd<code>asyncio</code>\u7684\u4f7f\u7528\u3002\u5b9e\u73b0\u534f\u7a0b\u7684\u4e0d\u4ec5\u4ec5\u662f<code>asyncio</code>\uff0c<code>tornado</code>\u548c<code>gevent</code>\u90fd\u5b9e\u73b0\u4e86\u7c7b\u4f3c\u7684\u529f\u80fd\u3002</p> event_loop \u4e8b\u4ef6\u5faa\u73af \u7a0b\u5e8f\u5f00\u542f\u4e00\u4e2a\u65e0\u9650\u7684\u5faa\u73af\uff0c\u7a0b\u5e8f\u5458\u4f1a\u628a\u4e00\u4e9b\u51fd\u6570\u6ce8\u518c\u5230\u4e8b\u4ef6\u5faa\u73af\u4e0a\u3002\u5f53\u6ee1\u8db3\u4e8b\u4ef6\u53d1\u751f\u7684\u65f6\u5019\uff0c\u8c03\u7528\u76f8\u5e94\u7684\u534f\u7a0b\u51fd\u6570\u3002 coroutine \u534f\u7a0b \u534f\u7a0b\u5bf9\u8c61\uff0c\u6307\u4e00\u4e2a\u4f7f\u7528async\u5173\u952e\u5b57\u5b9a\u4e49\u7684\u51fd\u6570\uff0c\u5b83\u7684\u8c03\u7528\u4e0d\u4f1a\u7acb\u5373\u6267\u884c\u51fd\u6570\uff0c\u800c\u662f\u4f1a\u8fd4\u56de\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61\u3002\u534f\u7a0b\u5bf9\u8c61\u9700\u8981\u6ce8\u518c\u5230\u4e8b\u4ef6\u5faa\u73af\uff0c\u7531\u4e8b\u4ef6\u5faa\u73af\u8c03\u7528\u3002 task \u4efb\u52a1 \u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61\u5c31\u662f\u4e00\u4e2a\u539f\u751f\u53ef\u4ee5\u6302\u8d77\u7684\u51fd\u6570\uff0c\u4efb\u52a1\u5219\u662f\u5bf9\u534f\u7a0b\u8fdb\u4e00\u6b65\u5c01\u88c5\uff0c\u5176\u4e2d\u5305\u542b\u4efb\u52a1\u7684\u5404\u79cd\u72b6\u6001\u3002 future \u4ee3\u8868\u5c06\u6765\u6267\u884c\u6216\u6ca1\u6709\u6267\u884c\u7684\u4efb\u52a1\u7684\u7ed3\u679c\u3002\u5b83\u548ctask\u4e0a\u6ca1\u6709\u672c\u8d28\u7684\u533a\u522b async/await \u5173\u952e\u5b57 python3.5 \u7528\u4e8e\u5b9a\u4e49\u534f\u7a0b\u7684\u5173\u952e\u5b57\uff0casync\u5b9a\u4e49\u4e00\u4e2a\u534f\u7a0b\uff0cawait\u7528\u4e8e\u6302\u8d77\u963b\u585e\u7684\u5f02\u6b65\u8c03\u7528\u63a5\u53e3\u3002 <p>\u4e0a\u8ff0\u7684\u6982\u5ff5\u5355\u72ec\u62ce\u51fa\u6765\u90fd\u4e0d\u597d\u61c2\uff0c\u6bd4\u8f83\u4ed6\u4eec\u4e4b\u95f4\u662f\u76f8\u4e92\u8054\u7cfb\uff0c\u4e00\u8d77\u5de5\u4f5c\u3002\u4e0b\u9762\u770b\u4f8b\u5b50\uff0c\u518d\u56de\u6eaf\u4e0a\u8ff0\u6982\u5ff5\uff0c\u66f4\u5229\u4e8e\u7406\u89e3\u3002</p>"},{"location":"#\u5b9a\u4e49\u4e00\u4e2a\u534f\u7a0b","title":"\u5b9a\u4e49\u4e00\u4e2a\u534f\u7a0b","text":"<p>\u5b9a\u4e49\u4e00\u4e2a\u534f\u7a0b\u5f88\u7b80\u5355\uff0c\u4f7f\u7528async\u5173\u952e\u5b57\uff0c\u5c31\u50cf\u5b9a\u4e49\u666e\u901a\u51fd\u6570\u4e00\u6837\uff1a</p> <pre><code>import time\nimport asyncio\n\nnow = lambda : time.time()\n\nasync def do_some_work(x):\n    print('Waiting: ', x)\n\nstart = now()\n\ncoroutine = do_some_work(2)\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(coroutine)\n\nprint('TIME: ', now() - start)\n</code></pre> <p>\u901a\u8fc7async\u5173\u952e\u5b57\u5b9a\u4e49\u4e00\u4e2a\u534f\u7a0b\uff08coroutine\uff09\uff0c\u534f\u7a0b\u4e5f\u662f\u4e00\u79cd\u5bf9\u8c61\u3002 \u534f\u7a0b\u4e0d\u80fd\u76f4\u63a5\u8fd0\u884c\uff0c\u9700\u8981\u628a\u534f\u7a0b\u52a0\u5165\u5230\u4e8b\u4ef6\u5faa\u73af\uff08event loop\uff09\uff0c\u7531\u540e\u8005\u5728\u9002\u5f53\u7684\u65f6\u5019\u8c03\u7528\u534f\u7a0b\u3002</p> <p><code>asyncio.get_event_loop</code>\u65b9\u6cd5\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u4e8b\u4ef6\u5faa\u73af\uff0c\u7136\u540e\u4f7f\u7528<code>run_until_complete</code>\u5c06\u534f\u7a0b\u6ce8\u518c\u5230\u4e8b\u4ef6\u5faa\u73af\uff0c\u5e76\u542f\u52a8\u4e8b\u4ef6\u5faa\u73af\u3002</p> <p>\u56e0\u4e3a\u672c\u4f8b\u53ea\u6709\u4e00\u4e2a\u534f\u7a0b\uff0c\u4e8e\u662f\u53ef\u4ee5\u770b\u89c1\u5982\u4e0b\u8f93\u51fa\uff1a</p> <pre><code>Waiting:  2\nTIME:  0.0004658699035644531\n</code></pre>"},{"location":"#\u521b\u5efa\u4e00\u4e2atask","title":"\u521b\u5efa\u4e00\u4e2atask","text":"<p>\u534f\u7a0b\u5bf9\u8c61\u4e0d\u80fd\u76f4\u63a5\u8fd0\u884c\uff0c\u5728\u6ce8\u518c\u4e8b\u4ef6\u5faa\u73af\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u662f<code>run_until_complete</code>\u65b9\u6cd5\u5c06\u534f\u7a0b\u5305\u88c5\u6210\u4e3a\u4e86\u4e00\u4e2a\u4efb\u52a1\uff08<code>task</code>\uff09\u5bf9\u8c61\u3002\u6240\u8c13<code>task\u5bf9\u8c61</code>\u662f<code>Future\u7c7b</code>\u7684\u5b50\u7c7b\u3002\u4fdd\u5b58\u4e86\u534f\u7a0b\u8fd0\u884c\u540e\u7684\u72b6\u6001\uff0c\u7528\u4e8e\u672a\u6765\u83b7\u53d6\u534f\u7a0b\u7684\u7ed3\u679c\u3002</p> <pre><code>import asyncio\nimport time\n\nnow = lambda : time.time()\n\nasync def do_some_work(x):\n    print('Waiting: ', x)\n\nstart = now()\n\ncoroutine = do_some_work(2)\n\nloop = asyncio.get_event_loop()\n\n# task = asyncio.ensure_future(coroutine)\ntask = loop.create_task(coroutine)\nprint(task)\n\nloop.run_until_complete(task)\nprint(task)\nprint('TIME: ', now() - start)\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a</p> <pre><code>&lt;Task pending coro=&lt;do_some_work() running at /Users/ghost/Rsj217/python3.6/async/async-main.py:17&gt;&gt;\nWaiting:  2\n&lt;Task finished coro=&lt;do_some_work() done, defined at /Users/ghost/Rsj217/python3.6/async/async-main.py:17&gt; result=None&gt;\nTIME:  0.0003490447998046875 \n</code></pre> <p>\u521b\u5efa<code>task</code>\u540e\uff0c<code>task</code>\u5728\u52a0\u5165\u4e8b\u4ef6\u5faa\u73af\u4e4b\u524d\u662f<code>pending</code>\u72b6\u6001\uff0c\u56e0\u4e3a<code>do_some_work</code>\u4e2d\u6ca1\u6709\u8017\u65f6\u7684\u963b\u585e\u64cd\u4f5c\uff0c<code>task</code>\u5f88\u5feb\u5c31\u6267\u884c\u5b8c\u6bd5\u4e86\u3002\u540e\u9762\u6253\u5370\u7684<code>finished</code>\u72b6\u6001\u3002</p> <p><code>asyncio.ensure_future(coroutine)</code> \u548c <code>loop.create_task(coroutine)</code>\u90fd\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a<code>task</code>\uff0c<code>run_until_complete</code>\u7684\u53c2\u6570\u662f\u4e00\u4e2a<code>futrue</code>\u5bf9\u8c61\u3002\u5f53\u4f20\u5165\u4e00\u4e2a\u534f\u7a0b\uff0c\u5176\u5185\u90e8\u4f1a\u81ea\u52a8\u5c01\u88c5\u6210<code>task</code>\uff0c<code>task</code>\u662f<code>Future</code>\u7684\u5b50\u7c7b\u3002<code>isinstance(task, asyncio.Future)</code>\u5c06\u4f1a\u8f93\u51fa<code>True</code>\u3002</p>"},{"location":"#\u7ed1\u5b9a\u56de\u8c03","title":"\u7ed1\u5b9a\u56de\u8c03","text":"<p>\u7ed1\u5b9a\u56de\u8c03\uff0c\u5728<code>task</code>\u6267\u884c\u5b8c\u6bd5\u7684\u65f6\u5019\u53ef\u4ee5\u83b7\u53d6\u6267\u884c\u7684\u7ed3\u679c\uff0c\u56de\u8c03\u7684\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u662f<code>future</code>\u5bf9\u8c61\uff0c\u901a\u8fc7\u8be5\u5bf9\u8c61\u53ef\u4ee5\u83b7\u53d6\u534f\u7a0b\u8fd4\u56de\u503c\u3002\u5982\u679c\u56de\u8c03\u9700\u8981\u591a\u4e2a\u53c2\u6570\uff0c\u53ef\u4ee5\u901a\u8fc7\u504f\u51fd\u6570\u5bfc\u5165\u3002</p> <pre><code>import time\nimport asyncio\n\nnow = lambda : time.time()\n\nasync def do_some_work(x):\n    print('Waiting: ', x)\n    return 'Done after {}s'.format(x)\n\ndef callback(future):\n    print('Callback: ', future.result())\n\nstart = now()\n\ncoroutine = do_some_work(2)\nloop = asyncio.get_event_loop()\ntask = asyncio.ensure_future(coroutine)\ntask.add_done_callback(callback)\nloop.run_until_complete(task)\n\nprint('TIME: ', now() - start)\n</code></pre> <p>\u504f\u51fd\u6570\u56fa\u5b9a\u53c2\u6570:</p> <pre><code>def callback(t, future):\n    print('Callback:', t, future.result())\n\ntask.add_done_callback(functools.partial(callback, 2))\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0c<code>coroutine</code>\u6267\u884c\u7ed3\u675f\u65f6\u5019\u4f1a\u8c03\u7528\u56de\u8c03\u51fd\u6570\u3002\u5e76\u901a\u8fc7\u53c2\u6570<code>future</code>\u83b7\u53d6\u534f\u7a0b\u6267\u884c\u7684\u7ed3\u679c\u3002\u6211\u4eec\u521b\u5efa\u7684<code>task</code>\u548c\u56de\u8c03\u91cc\u7684future\u5bf9\u8c61\uff0c\u5b9e\u9645\u4e0a\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u3002</p>"},{"location":"#future-\u4e0e-result","title":"future \u4e0e result","text":"<p>\u56de\u8c03\u4e00\u76f4\u662f\u5f88\u591a\u5f02\u6b65\u7f16\u7a0b\u7684\u6076\u68a6\uff0c\u7a0b\u5e8f\u5458\u66f4\u559c\u6b22\u4f7f\u7528\u540c\u6b65\u7684\u7f16\u5199\u65b9\u5f0f\u5199\u5f02\u6b65\u4ee3\u7801\uff0c\u4ee5\u907f\u514d\u56de\u8c03\u7684\u6076\u68a6\u3002\u56de\u8c03\u4e2d\u6211\u4eec\u4f7f\u7528\u4e86<code>future</code>\u5bf9\u8c61\u7684<code>result</code>\u65b9\u6cd5\u3002\u524d\u9762\u4e0d\u7ed1\u5b9a\u56de\u8c03\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230<code>task</code>\u6709<code>fiinished</code>\u72b6\u6001\u3002\u5728\u90a3\u4e2a\u65f6\u5019\uff0c\u53ef\u4ee5\u76f4\u63a5\u8bfb\u53d6<code>task</code>\u7684<code>result</code>\u65b9\u6cd5\u3002</p> <pre><code>import asyncio\n\nfrom datetime import datetime\n\nasync def do_some_work(x):\n    print(f'Waiting {x=}'.format(x))\n    return 'Done after {}s'.format(x)\n\nstart = datetime.now()\n\ncoroutine = do_some_work(2)\nloop = asyncio.get_event_loop()\ntask = asyncio.ensure_future(coroutine)\nloop.run_until_complete(task)\n\nprint(f'Task ret: {task.result()=}')\nprint(f'TIME: {datetime.now() - start =}')\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u8f93\u51fa\u7684\u7ed3\u679c\uff1a</p> <pre><code>Waiting x=2\nTask ret: task.result()='Done after 2s'\nTIME: datetime.now() - start =datetime.timedelta(microseconds=329)\n</code></pre>"},{"location":"#\u963b\u585e\u548cawait","title":"\u963b\u585e\u548cawait","text":"<p>\u4f7f\u7528<code>async</code>\u53ef\u4ee5\u5b9a\u4e49\u534f\u7a0b\u5bf9\u8c61\uff0c\u4f7f\u7528<code>await</code>\u53ef\u4ee5\u9488\u5bf9\u8017\u65f6\u7684\u64cd\u4f5c\u8fdb\u884c\u6302\u8d77\uff0c\u5c31\u50cf\u751f\u6210\u5668\u91cc\u7684<code>yield</code>\u4e00\u6837\uff0c\u51fd\u6570\u8ba9\u51fa\u63a7\u5236\u6743\u3002\u534f\u7a0b\u9047\u5230<code>await</code>\uff0c\u4e8b\u4ef6\u5faa\u73af\u5c06\u4f1a\u6302\u8d77\u8be5\u534f\u7a0b\uff0c\u6267\u884c\u522b\u7684\u534f\u7a0b\uff0c\u76f4\u5230\u5176\u4ed6\u7684\u534f\u7a0b\u4e5f\u6302\u8d77\u6216\u8005\u6267\u884c\u5b8c\u6bd5\uff0c\u518d\u8fdb\u884c\u4e0b\u4e00\u4e2a\u534f\u7a0b\u7684\u6267\u884c\u3002</p> <p>\u8017\u65f6\u7684\u64cd\u4f5c\u4e00\u822c\u662f\u4e00\u4e9bIO\u64cd\u4f5c\uff0c\u4f8b\u5982\u7f51\u7edc\u8bf7\u6c42\uff0c\u6587\u4ef6\u8bfb\u53d6\u7b49\u3002\u6211\u4eec\u4f7f\u7528<code>asyncio.sleep</code>\u51fd\u6570\u6765\u6a21\u62dfIO\u64cd\u4f5c\u3002\u534f\u7a0b\u7684\u76ee\u7684\u4e5f\u662f\u8ba9\u8fd9\u4e9bIO\u64cd\u4f5c\u5f02\u6b65\u5316\u3002</p> <pre><code>import asyncio\nimport time\n\nnow = lambda: time.time()\n\nasync def do_some_work(x):\n    print('Waiting: ', x)\n    await asyncio.sleep(x)\n    return 'Done after {}s'.format(x)\n\nstart = now()\n\ncoroutine = do_some_work(2)\nloop = asyncio.get_event_loop()\ntask = asyncio.ensure_future(coroutine)\nloop.run_until_complete(task)\n\nprint('Task ret: ', task.result())\nprint('TIME: ', now() - start)  \n</code></pre> <p>\u5728 <code>sleep</code>\u7684\u65f6\u5019\uff0c\u4f7f\u7528<code>await</code>\u8ba9\u51fa\u63a7\u5236\u6743\u3002\u5373\u5f53\u9047\u5230\u963b\u585e\u8c03\u7528\u7684\u51fd\u6570\u7684\u65f6\u5019\uff0c\u4f7f\u7528<code>await</code>\u65b9\u6cd5\u5c06\u534f\u7a0b\u7684\u63a7\u5236\u6743\u8ba9\u51fa\uff0c\u4ee5\u4fbf<code>loop</code>\u8c03\u7528\u5176\u4ed6\u7684\u534f\u7a0b\u3002\u73b0\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u5c31\u7528\u8017\u65f6\u7684\u963b\u585e\u64cd\u4f5c\u4e86\u3002</p>"},{"location":"#\u5e76\u53d1\u548c\u5e76\u884c","title":"\u5e76\u53d1\u548c\u5e76\u884c","text":"<p>\u5e76\u53d1\u548c\u5e76\u884c\u4e00\u76f4\u662f\u5bb9\u6613\u6df7\u6dc6\u7684\u6982\u5ff5\u3002\u5e76\u53d1\u901a\u5e38\u6307\u6709\u591a\u4e2a\u4efb\u52a1\u9700\u8981\u540c\u65f6\u8fdb\u884c\uff0c\u5e76\u884c\u5219\u662f\u540c\u4e00\u65f6\u523b\u6709\u591a\u4e2a\u4efb\u52a1\u6267\u884c\u3002\u7528\u4e0a\u8bfe\u6765\u4e3e\u4f8b\u5c31\u662f\uff0c\u5e76\u53d1\u60c5\u51b5\u4e0b\u662f\u4e00\u4e2a\u8001\u5e08\u5728\u540c\u4e00\u65f6\u95f4\u6bb5\u8f85\u52a9\u4e0d\u540c\u7684\u4eba\u529f\u8bfe\u3002\u5e76\u884c\u5219\u662f\u597d\u51e0\u4e2a\u8001\u5e08\u5206\u522b\u540c\u65f6\u8f85\u52a9\u591a\u4e2a\u5b66\u751f\u529f\u8bfe\u3002\u7b80\u800c\u8a00\u4e4b\u5c31\u662f\u4e00\u4e2a\u4eba\u540c\u65f6\u5403\u4e09\u4e2a\u9992\u5934\u8fd8\u662f\u4e09\u4e2a\u4eba\u540c\u65f6\u5206\u522b\u5403\u4e00\u4e2a\u7684\u60c5\u51b5\uff0c\u5403\u4e00\u4e2a\u9992\u5934\u7b97\u4e00\u4e2a\u4efb\u52a1\u3002</p> <p><code>asyncio</code>\u5b9e\u73b0\u5e76\u53d1\uff0c\u5c31\u9700\u8981\u591a\u4e2a\u534f\u7a0b\u6765\u5b8c\u6210\u4efb\u52a1\uff0c\u6bcf\u5f53\u6709\u4efb\u52a1\u963b\u585e\u7684\u65f6\u5019\u5c31<code>await</code>\uff0c\u7136\u540e\u5176\u4ed6\u534f\u7a0b\u7ee7\u7eed\u5de5\u4f5c\u3002\u521b\u5efa\u591a\u4e2a\u534f\u7a0b\u7684\u5217\u8868\uff0c\u7136\u540e\u5c06\u8fd9\u4e9b\u534f\u7a0b\u6ce8\u518c\u5230\u4e8b\u4ef6\u5faa\u73af\u4e2d\u3002</p> <pre><code>import asyncio\n\nimport time\n\nnow = lambda: time.time()\n\nasync def do_some_work(x):\n    print('Waiting: ', x)\n\n    await asyncio.sleep(x)\n    return 'Done after {}s'.format(x)\n\nstart = now()\n\ncoroutine1 = do_some_work(1)\ncoroutine2 = do_some_work(2)\ncoroutine3 = do_some_work(4)\n\ntasks = [\n    asyncio.ensure_future(coroutine1),\n    asyncio.ensure_future(coroutine2),\n    asyncio.ensure_future(coroutine3)\n]\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(asyncio.wait(tasks))\n\nfor task in tasks:\n    print('Task ret: ', task.result())\n\nprint('TIME: ', now() - start)\n</code></pre> <p>\u7ed3\u679c\u5982\u4e0b</p> <pre><code>Waiting:  1\nWaiting:  2\nWaiting:  4\nTask ret:  Done after 1s\nTask ret:  Done after 2s\nTask ret:  Done after 4s\nTIME:  4.003541946411133\n</code></pre> <p>\u603b\u65f6\u95f4\u4e3a4s\u5de6\u53f3\u30024s\u7684\u963b\u585e\u65f6\u95f4\uff0c\u8db3\u591f\u524d\u9762\u4e24\u4e2a\u534f\u7a0b\u6267\u884c\u5b8c\u6bd5\u3002\u5982\u679c\u662f\u540c\u6b65\u987a\u5e8f\u7684\u4efb\u52a1\uff0c\u90a3\u4e48\u81f3\u5c11\u9700\u89817s\u3002\u6b64\u65f6\u6211\u4eec\u4f7f\u7528\u4e86<code>aysncio</code>\u5b9e\u73b0\u4e86\u5e76\u53d1\u3002<code>asyncio.wait(tasks)</code> \u4e5f\u53ef\u4ee5\u4f7f\u7528 <code>asyncio.gather(*tasks)</code> ,\u524d\u8005\u63a5\u53d7\u4e00\u4e2a<code>task</code>\u5217\u8868\uff0c\u540e\u8005\u63a5\u6536\u4e00\u5806<code>task</code>\u3002</p>"},{"location":"#\u534f\u7a0b\u5d4c\u5957","title":"\u534f\u7a0b\u5d4c\u5957","text":"<p>\u4f7f\u7528<code>async</code>\u53ef\u4ee5\u5b9a\u4e49\u534f\u7a0b\uff0c\u534f\u7a0b\u7528\u4e8e\u8017\u65f6\u7684io\u64cd\u4f5c\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c01\u88c5\u66f4\u591a\u7684io\u64cd\u4f5c\u8fc7\u7a0b\uff0c\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86\u5d4c\u5957\u7684\u534f\u7a0b\uff0c\u5373\u4e00\u4e2a\u534f\u7a0b\u4e2d<code>await</code>\u4e86\u53e6\u5916\u4e00\u4e2a\u534f\u7a0b\uff0c\u5982\u6b64\u8fde\u63a5\u8d77\u6765\u3002</p> <pre><code>import asyncio\n\nimport time\n\nnow = lambda: time.time()\n\nasync def do_some_work(x):\n    print('Waiting: ', x)\n\n    await asyncio.sleep(x)\n    return 'Done after {}s'.format(x)\n\nasync def main():\n    coroutine1 = do_some_work(1)\n    coroutine2 = do_some_work(2)\n    coroutine3 = do_some_work(4)\n\n    tasks = [\n        asyncio.ensure_future(coroutine1),\n        asyncio.ensure_future(coroutine2),\n        asyncio.ensure_future(coroutine3)\n    ]\n\n    dones, pendings = await asyncio.wait(tasks)\n\n    for task in dones:\n        print('Task ret: ', task.result())\n\nstart = now()\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(main())\n\nprint('TIME: ', now() - start)\n</code></pre> <p>\u5982\u679c\u4f7f\u7528\u7684\u662f <code>asyncio.gather</code>\u521b\u5efa\u534f\u7a0b\u5bf9\u8c61\uff0c\u90a3\u4e48<code>await</code>\u7684\u8fd4\u56de\u503c\u5c31\u662f\u534f\u7a0b\u8fd0\u884c\u7684\u7ed3\u679c\u3002</p> <pre><code>    results = await asyncio.gather(*tasks)\n\n    for result in results:\n        print('Task ret: ', result)\n</code></pre> <p>\u4e0d\u5728main\u534f\u7a0b\u51fd\u6570\u91cc\u5904\u7406\u7ed3\u679c\uff0c\u76f4\u63a5\u8fd4\u56de<code>await</code>\u7684\u5185\u5bb9\uff0c\u90a3\u4e48\u6700\u5916\u5c42\u7684<code>run_until_complete</code>\u5c06\u4f1a\u8fd4\u56de<code>main</code>\u534f\u7a0b\u7684\u7ed3\u679c\u3002</p> <pre><code>async def main():\n    coroutine1 = do_some_work(1)\n    coroutine2 = do_some_work(2)\n    coroutine3 = do_some_work(2)\n\n    tasks = [\n        asyncio.ensure_future(coroutine1),\n        asyncio.ensure_future(coroutine2),\n        asyncio.ensure_future(coroutine3)\n    ]\n\n    return await asyncio.gather(*tasks)\n\nstart = now()\n\nloop = asyncio.get_event_loop()\nresults = loop.run_until_complete(main())\n\nfor result in results:\n    print('Task ret: ', result)\n</code></pre> <p>\u6216\u8005\u8fd4\u56de\u4f7f\u7528<code>asyncio.wait</code>\u65b9\u5f0f\u6302\u8d77\u534f\u7a0b\u3002</p> <pre><code>async def main():\n    coroutine1 = do_some_work(1)\n    coroutine2 = do_some_work(2)\n    coroutine3 = do_some_work(4)\n\n    tasks = [\n        asyncio.ensure_future(coroutine1),\n        asyncio.ensure_future(coroutine2),\n        asyncio.ensure_future(coroutine3)\n    ]\n\n    return await asyncio.wait(tasks)\n\nstart = now()\n\nloop = asyncio.get_event_loop()\ndone, pending = loop.run_until_complete(main())\n\nfor task in done:\n    print('Task ret: ', task.result())\n</code></pre> <p>\u4e5f\u53ef\u4ee5\u4f7f\u7528<code>asyncio</code>\u7684<code>as_completed</code>\u65b9\u6cd5</p> <pre><code>async def main():\n    coroutine1 = do_some_work(1)\n    coroutine2 = do_some_work(2)\n    coroutine3 = do_some_work(4)\n\n    tasks = [\n        asyncio.ensure_future(coroutine1),\n        asyncio.ensure_future(coroutine2),\n        asyncio.ensure_future(coroutine3)\n    ]\n    for task in asyncio.as_completed(tasks):\n        result = await task\n        print('Task ret: {}'.format(result))\n\nstart = now()\n\nloop = asyncio.get_event_loop()\ndone = loop.run_until_complete(main())\nprint('TIME: ', now() - start)\n</code></pre> <p>\u7531\u6b64\u53ef\u89c1\uff0c\u534f\u7a0b\u7684\u8c03\u7528\u548c\u7ec4\u5408\u5341\u5206\u7075\u6d3b\uff0c\u5c24\u5176\u662f\u5bf9\u4e8e\u7ed3\u679c\u7684\u5904\u7406\uff0c\u5982\u4f55\u8fd4\u56de\uff0c\u5982\u4f55\u6302\u8d77\uff0c\u9700\u8981\u9010\u6e10\u79ef\u7d2f\u7ecf\u9a8c\u548c\u524d\u77bb\u7684\u8bbe\u8ba1\u3002</p>"},{"location":"#\u534f\u7a0b\u505c\u6b62","title":"\u534f\u7a0b\u505c\u6b62","text":"<p>\u4e0a\u9762\u89c1\u8bc6\u4e86\u534f\u7a0b\u7684\u51e0\u79cd\u5e38\u7528\u7684\u7528\u6cd5\uff0c\u90fd\u662f\u534f\u7a0b\u56f4\u7ed5\u7740\u4e8b\u4ef6\u5faa\u73af\u8fdb\u884c\u7684\u64cd\u4f5c\u3002future\u5bf9\u8c61\u6709\u51e0\u4e2a\u72b6\u6001\uff1a</p> <ul> <li>Pending</li> <li>Running</li> <li>Done</li> <li>Cancelled</li> </ul> <p>\u521b\u5efa<code>future</code>\u7684\u65f6\u5019\uff0c<code>task</code>\u4e3a<code>pending</code>\uff0c\u4e8b\u4ef6\u5faa\u73af\u8c03\u7528\u6267\u884c\u7684\u65f6\u5019\u5f53\u7136\u5c31\u662f<code>running</code>\uff0c\u8c03\u7528\u5b8c\u6bd5\u81ea\u7136\u5c31\u662f<code>done</code>\uff0c\u5982\u679c\u9700\u8981\u505c\u6b62\u4e8b\u4ef6\u5faa\u73af\uff0c\u5c31\u9700\u8981\u5148\u628a<code>task</code>\u53d6\u6d88\u3002\u53ef\u4ee5\u4f7f\u7528<code>asyncio.Task</code>\u83b7\u53d6\u4e8b\u4ef6\u5faa\u73af\u7684<code>task</code></p> <pre><code>import asyncio\n\nimport time\n\nnow = lambda: time.time()\n\nasync def do_some_work(x):\n    print('Waiting: ', x)\n\n    await asyncio.sleep(x)\n    return 'Done after {}s'.format(x)\n\ncoroutine1 = do_some_work(1)\ncoroutine2 = do_some_work(2)\ncoroutine3 = do_some_work(2)\n\ntasks = [\n    asyncio.ensure_future(coroutine1),\n    asyncio.ensure_future(coroutine2),\n    asyncio.ensure_future(coroutine3)\n]\n\nstart = now()\n\nloop = asyncio.get_event_loop()\ntry:\n    loop.run_until_complete(asyncio.wait(tasks))\nexcept KeyboardInterrupt as e:\n    print(asyncio.all_tasks(loop))\n    for task in asyncio.all_tasks(loop):\n        print(task.cancel())\n    loop.stop()\n    loop.run_forever()\nfinally:\n    loop.close()\n\nprint('TIME: ', now() - start)\n</code></pre> <p>\u542f\u52a8\u4e8b\u4ef6\u5faa\u73af\u4e4b\u540e\uff0c\u9a6c\u4e0a<code>ctrl+c</code>\uff0c\u4f1a\u89e6\u53d1<code>run_until_complete</code>\u7684\u6267\u884c\u5f02\u5e38 <code>KeyBorardInterrupt</code>\u3002\u7136\u540e\u901a\u8fc7\u5faa\u73af<code>asyncio.all_tasks(loop)</code>\u53d6\u6d88<code>future</code>\u3002\u53ef\u4ee5\u770b\u5230\u8f93\u51fa\u5982\u4e0b\uff1a</p> <pre><code>Waiting:  1\nWaiting:  2\nWaiting:  2\n{&lt;Task pending coro=&lt;do_some_work() running at /Users/ghost/Rsj217/python3.6/async/async-main.py:18&gt; wait_for=&lt;Future pending cb=[&lt;TaskWakeupMethWrapper object at 0x101230648&gt;()]&gt; cb=[_wait.&lt;locals&gt;._on_completion() at /Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/asyncio/tasks.py:374]&gt;, &lt;Task pending coro=&lt;do_some_work() running at /Users/ghost/Rsj217/python3.6/async/async-main.py:18&gt; wait_for=&lt;Future pending cb=[&lt;TaskWakeupMethWrapper object at 0x1032b10a8&gt;()]&gt; cb=[_wait.&lt;locals&gt;._on_completion() at /Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/asyncio/tasks.py:374]&gt;, &lt;Task pending coro=&lt;wait() running at /Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/asyncio/tasks.py:307&gt; wait_for=&lt;Future pending cb=[&lt;TaskWakeupMethWrapper object at 0x103317d38&gt;()]&gt; cb=[_run_until_complete_cb() at /Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/asyncio/base_events.py:176]&gt;, &lt;Task pending coro=&lt;do_some_work() running at /Users/ghost/Rsj217/python3.6/async/async-main.py:18&gt; wait_for=&lt;Future pending cb=[&lt;TaskWakeupMethWrapper object at 0x103317be8&gt;()]&gt; cb=[_wait.&lt;locals&gt;._on_completion() at /Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/asyncio/tasks.py:374]&gt;}\nTrue\nTrue\nTrue\nTrue\nTIME:  0.8858370780944824\n</code></pre> <p><code>True</code>\u8868\u793a<code>cannel</code>\u6210\u529f\uff0c<code>loop stop</code>\u4e4b\u540e\u8fd8\u9700\u8981\u518d\u6b21\u5f00\u542f\u4e8b\u4ef6\u5faa\u73af\uff0c\u6700\u540e\u5728<code>close</code>\uff0c\u4e0d\u7136\u8fd8\u4f1a\u629b\u51fa\u5f02\u5e38\uff1a</p> <pre><code>Task was destroyed but it is pending!\ntask: &lt;Task pending coro=&lt;do_some_work() done,\n</code></pre> <p>\u5faa\u73af<code>task</code>\uff0c\u9010\u4e2a<code>cancel</code>\u662f\u4e00\u79cd\u65b9\u6848\uff0c\u53ef\u662f\u6b63\u5982\u4e0a\u9762\u6211\u4eec\u628a<code>task</code>\u7684\u5217\u8868\u5c01\u88c5\u5728<code>main</code>\u51fd\u6570\u4e2d\uff0c<code>main</code>\u51fd\u6570\u5916\u8fdb\u884c\u4e8b\u4ef6\u5faa\u73af\u7684\u8c03\u7528\u3002\u8fd9\u4e2a\u65f6\u5019\uff0c<code>main</code>\u76f8\u5f53\u4e8e\u6700\u5916\u51fa\u7684\u4e00\u4e2a<code>task</code>\uff0c\u90a3\u4e48\u5904\u7406\u5305\u88c5\u7684<code>main</code>\u51fd\u6570\u5373\u53ef\u3002</p> <pre><code>import asyncio\n\nimport time\n\nnow = lambda: time.time()\n\nasync def do_some_work(x):\n    print('Waiting: ', x)\n\n    await asyncio.sleep(x)\n    return 'Done after {}s'.format(x)\n\nasync def main():\n    coroutine1 = do_some_work(1)\n    coroutine2 = do_some_work(2)\n    coroutine3 = do_some_work(2)\n\n    tasks = [\n        asyncio.ensure_future(coroutine1),\n        asyncio.ensure_future(coroutine2),\n        asyncio.ensure_future(coroutine3)\n    ]\n    done, pending = await asyncio.wait(tasks)\n    for task in done:\n        print('Task ret: ', task.result())\n\nstart = now()\n\nloop = asyncio.get_event_loop()\ntask = asyncio.ensure_future(main())\ntry:\n    loop.run_until_complete(task)\nexcept KeyboardInterrupt as e:\n    print(asyncio.all_tasks(loop))\n    print(asyncio.gather(*asyncio.all_tasks(loop)).cancel())\n    loop.stop()\n    loop.run_forever()\nfinally:\n    loop.close()\n</code></pre>"},{"location":"#\u4e0d\u540c\u7ebf\u7a0b\u7684\u4e8b\u4ef6\u5faa\u73af","title":"\u4e0d\u540c\u7ebf\u7a0b\u7684\u4e8b\u4ef6\u5faa\u73af","text":"<p>\u5f88\u591a\u65f6\u5019\uff0c\u6211\u4eec\u7684\u4e8b\u4ef6\u5faa\u73af\u7528\u4e8e\u6ce8\u518c\u534f\u7a0b\uff0c\u800c\u6709\u7684\u534f\u7a0b\u9700\u8981\u52a8\u6001\u7684\u6dfb\u52a0\u5230\u4e8b\u4ef6\u5faa\u73af\u4e2d\u3002\u4e00\u4e2a\u7b80\u5355\u7684\u65b9\u5f0f\u5c31\u662f\u4f7f\u7528\u591a\u7ebf\u7a0b\u3002\u5f53\u524d\u7ebf\u7a0b\u521b\u5efa\u4e00\u4e2a\u4e8b\u4ef6\u5faa\u73af\uff0c\u7136\u540e\u5728\u65b0\u5efa\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u5728\u65b0\u7ebf\u7a0b\u4e2d\u542f\u52a8\u4e8b\u4ef6\u5faa\u73af\u3002\u5f53\u524d\u7ebf\u7a0b\u4e0d\u4f1a\u88ab<code>block</code>\u3002</p> <pre><code>import time\nimport asyncio\nfrom datetime import datetime\nfrom threading import Thread\n\ndef start_loop(loop):\n    asyncio.set_event_loop(loop)\n    loop.run_forever()\n\ndef more_work(x):\n    print('More work {}'.format(x))\n    time.sleep(x)\n    print('Finished more work {}'.format(x))\n\nstart = time.time()\nnew_loop = asyncio.new_event_loop()\nt = Thread(target=start_loop, args=(new_loop,))\nt.start()\nprint('TIME: {}'.format(time.time() - start))\n\nnew_loop.call_soon_threadsafe(more_work, 6)\nnew_loop.call_soon_threadsafe(more_work, 3)\n</code></pre> <p>\u542f\u52a8\u4e0a\u8ff0\u4ee3\u7801\u4e4b\u540e\uff0c\u5f53\u524d\u7ebf\u7a0b\u4e0d\u4f1a\u88ab<code>block</code>\uff0c\u65b0\u7ebf\u7a0b\u4e2d\u4f1a\u6309\u7167\u987a\u5e8f\u6267\u884c<code>call_soon_threadsafe</code>\u65b9\u6cd5\u6ce8\u518c\u7684<code>more_work</code>\u65b9\u6cd5\uff0c\u540e\u8005\u56e0\u4e3a<code>time.sleep</code>\u64cd\u4f5c\u662f\u540c\u6b65\u963b\u585e\u7684\uff0c\u56e0\u6b64\u8fd0\u884c\u5b8c\u6bd5<code>more_work</code>\u9700\u8981\u5927\u81f46 + 3</p>"},{"location":"#\u65b0\u7ebf\u7a0b\u534f\u7a0b","title":"\u65b0\u7ebf\u7a0b\u534f\u7a0b","text":"<pre><code>import time\nimport asyncio\nfrom datetime import datetime\nfrom threading import Thread\n\ndef start_loop(loop):\n    asyncio.set_event_loop(loop)\n    loop.run_forever()\n\nasync def do_some_work(x):\n    print('Waiting {}'.format(x))\n    await asyncio.sleep(x)\n    print('Done after {}s'.format(x))\n\ndef more_work(x):\n    print('More work {}'.format(x))\n    time.sleep(x)\n    print('Finished more work {}'.format(x))\n\nstart = time.time()\nnew_loop = asyncio.new_event_loop()\nt = Thread(target=start_loop, args=(new_loop,))\nt.start()\nprint('TIME: {}'.format(time.time() - start))\n\nasyncio.run_coroutine_threadsafe(do_some_work(6), new_loop)\nasyncio.run_coroutine_threadsafe(do_some_work(4), new_loop)\n</code></pre> <p>\u4e0a\u8ff0\u7684\u4f8b\u5b50\uff0c\u4e3b\u7ebf\u7a0b\u4e2d\u521b\u5efa\u4e00\u4e2a<code>new_loop</code>\uff0c\u7136\u540e\u5728\u53e6\u5916\u7684\u5b50\u7ebf\u7a0b\u4e2d\u5f00\u542f\u4e00\u4e2a\u65e0\u9650\u4e8b\u4ef6\u5faa\u73af\u3002\u4e3b\u7ebf\u7a0b\u901a\u8fc7<code>run_coroutine_threadsafe</code>\u65b0\u6ce8\u518c\u534f\u7a0b\u5bf9\u8c61\u3002\u8fd9\u6837\u5c31\u80fd\u5728\u5b50\u7ebf\u7a0b\u4e2d\u8fdb\u884c\u4e8b\u4ef6\u5faa\u73af\u7684\u5e76\u53d1\u64cd\u4f5c\uff0c\u540c\u65f6\u4e3b\u7ebf\u7a0b\u53c8\u4e0d\u4f1a\u88ab<code>block</code>\u3002\u4e00\u5171\u6267\u884c\u7684\u65f6\u95f4\u5927\u6982\u5728<code>6s</code>\u5de6\u53f3\u3002</p>"},{"location":"#master-worker\u4e3b\u4ece\u6a21\u5f0f","title":"master-worker\u4e3b\u4ece\u6a21\u5f0f","text":"<p>\u5bf9\u4e8e\u5e76\u53d1\u4efb\u52a1\uff0c\u901a\u5e38\u662f\u7528\u751f\u6210\u6d88\u8d39\u6a21\u578b\uff0c\u5bf9\u961f\u5217\u7684\u5904\u7406\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3cmaster-worker\u7684\u65b9\u5f0f\uff0cmaster\u4e3b\u8981\u7528\u6237\u83b7\u53d6\u961f\u5217\u7684msg\uff0cworker\u7528\u6237\u5904\u7406\u6d88\u606f\u3002</p> <p>\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u5e76\u4e14\u534f\u7a0b\u66f4\u9002\u5408\u5355\u7ebf\u7a0b\u7684\u65b9\u5f0f\uff0c\u6211\u4eec\u7684\u4e3b\u7ebf\u7a0b\u7528\u6765\u76d1\u542c\u961f\u5217\uff0c\u5b50\u7ebf\u7a0b\u7528\u4e8e\u5904\u7406\u961f\u5217\u3002\u8fd9\u91cc\u4f7f\u7528redis\u7684\u961f\u5217\u3002\u4e3b\u7ebf\u7a0b\u4e2d\u6709\u4e00\u4e2a\u662f\u65e0\u9650\u5faa\u73af\uff0c\u7528\u6237\u6d88\u8d39\u961f\u5217\u3002</p> <pre><code>    while True:\n        task = rcon.rpop(\"queue\")\n        if not task:\n            time.sleep(1)\n            continue\n        asyncio.run_coroutine_threadsafe(do_some_work(int(task)), new_loop)\n</code></pre> <p>\u7ed9\u961f\u5217\u6dfb\u52a0\u4e00\u4e9b\u6570\u636e\uff1a</p> <pre><code>127.0.0.1:6379[3]&gt; lpush queue 2\n(integer) 1\n127.0.0.1:6379[3]&gt; lpush queue 5\n(integer) 1\n127.0.0.1:6379[3]&gt; lpush queue 1\n(integer) 1\n127.0.0.1:6379[3]&gt; lpush queue 1\n</code></pre> <p>\u53ef\u4ee5\u770b\u89c1\u8f93\u51fa\uff1a</p> <pre><code>Waiting  2\nDone 2\nWaiting  5\nWaiting  1\nDone 1\nWaiting  1\nDone 1\nDone 5\n</code></pre> <p>\u6211\u4eec\u53d1\u8d77\u4e86\u4e00\u4e2a\u8017\u65f65s\u7684\u64cd\u4f5c\uff0c\u7136\u540e\u53c8\u53d1\u8d77\u4e86\u8fde\u4e2a1s\u7684\u64cd\u4f5c\uff0c\u53ef\u4ee5\u770b\u89c1\u5b50\u7ebf\u7a0b\u5e76\u53d1\u7684\u6267\u884c\u4e86\u8fd9\u51e0\u4e2a\u4efb\u52a1\uff0c\u5176\u4e2d5s await\u7684\u65f6\u5019\uff0c\u76f8\u7ee7\u6267\u884c\u4e861s\u7684\u4e24\u4e2a\u4efb\u52a1\u3002</p>"},{"location":"#\u505c\u6b62\u5b50\u7ebf\u7a0b","title":"\u505c\u6b62\u5b50\u7ebf\u7a0b","text":"<p>\u5982\u679c\u4e00\u5207\u6b63\u5e38\uff0c\u90a3\u4e48\u4e0a\u9762\u7684\u4f8b\u5b50\u5f88\u5b8c\u7f8e\u3002\u53ef\u662f\uff0c\u9700\u8981\u505c\u6b62\u7a0b\u5e8f\uff0c\u76f4\u63a5<code>ctrl+c</code>\uff0c\u4f1a\u629b\u51fa<code>KeyboardInterrupt</code>\u9519\u8bef\uff0c\u6211\u4eec\u4fee\u6539\u4e00\u4e0b\u4e3b\u5faa\u73af\uff1a</p> <pre><code>try:\n    while True:\n        task = rcon.rpop(\"queue\")\n        if not task:\n            time.sleep(1)\n            continue\n        asyncio.run_coroutine_threadsafe(do_some_work(int(task)), new_loop)\nexcept KeyboardInterrupt as e:\n    print(e)\n    new_loop.stop()\n</code></pre> <p>\u53ef\u662f\u5b9e\u9645\u4e0a\u5e76\u4e0d\u597d\u4f7f\uff0c\u867d\u7136\u4e3b\u7ebf\u7a0b<code>try</code>\u4e86<code>KeyboardInterrupt</code>\u5f02\u5e38\uff0c\u4f46\u662f\u5b50\u7ebf\u7a0b\u5e76\u6ca1\u6709\u9000\u51fa\uff0c\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u5b50\u7ebf\u7a0b\u4e3a\u5b88\u62a4\u7ebf\u7a0b\uff0c\u8fd9\u6837\u5f53\u4e3b\u7ebf\u7a0b\u7ed3\u675f\u7684\u65f6\u5019\uff0c\u5b50\u7ebf\u7a0b\u4e5f\u968f\u673a\u9000\u51fa\u3002</p> <pre><code>new_loop = asyncio.new_event_loop()\nt = Thread(target=start_loop, args=(new_loop,))\nt.setDaemon(True)    # \u8bbe\u7f6e\u5b50\u7ebf\u7a0b\u4e3a\u5b88\u62a4\u7ebf\u7a0b\nt.start()\n\ntry:\n    while True:\n        # print('start rpop')\n        task = rcon.rpop(\"queue\")\n        if not task:\n            time.sleep(1)\n            continue\n        asyncio.run_coroutine_threadsafe(do_some_work(int(task)), new_loop)\nexcept KeyboardInterrupt as e:\n    print(e)\n    new_loop.stop()\n</code></pre> <p>\u7ebf\u7a0b\u505c\u6b62\u7a0b\u5e8f\u7684\u65f6\u5019\uff0c\u4e3b\u7ebf\u7a0b\u9000\u51fa\u540e\uff0c\u5b50\u7ebf\u7a0b\u4e5f\u968f\u673a\u9000\u51fa\u624d\u4e86\uff0c\u5e76\u4e14\u505c\u6b62\u4e86\u5b50\u7ebf\u7a0b\u7684\u534f\u7a0b\u4efb\u52a1\u3002</p>"},{"location":"#aiohttp","title":"aiohttp","text":"<p>\u5728\u6d88\u8d39\u961f\u5217\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4f7f\u7528<code>asyncio</code>\u7684<code>sleep</code>\u7528\u4e8e\u6a21\u62df\u8017\u65f6\u7684<code>io\u64cd\u4f5c</code>\u3002\u4ee5\u524d\u6709\u4e00\u4e2a\u77ed\u4fe1\u670d\u52a1\uff0c\u9700\u8981\u5728\u534f\u7a0b\u4e2d\u8bf7\u6c42\u8fdc\u7a0b\u7684\u77ed\u4fe1<code>api</code>\uff0c\u6b64\u65f6\u9700\u8981\u662f\u9700\u8981\u4f7f\u7528<code>aiohttp</code>\u8fdb\u884c\u5f02\u6b65\u7684<code>http</code>\u8bf7\u6c42\u3002\u5927\u81f4\u4ee3\u7801\u5982\u4e0b\uff1a</p> <p>server.py</p> <pre><code>import time\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/&lt;int:x&gt;')\ndef index(x):\n    time.sleep(x)\n    return \"{} It works\".format(x)\n\n@app.route('/error')\ndef error():\n    time.sleep(3)\n    return \"error!\"\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p><code>/</code>\u63a5\u53e3\u8868\u793a\u77ed\u4fe1\u63a5\u53e3\uff0c<code>/error</code>\u8868\u793a\u8bf7\u6c42<code>/</code>\u5931\u8d25\u4e4b\u540e\u7684\u62a5\u8b66\u3002</p> <p>async-custoimer.py</p> <pre><code>import time\nimport asyncio\nfrom threading import Thread\nimport redis\nimport aiohttp\n\ndef get_redis():\n    connection_pool = redis.ConnectionPool(host='127.0.0.1', db=3)\n    return redis.Redis(connection_pool=connection_pool)\n\nrcon = get_redis()\n\ndef start_loop(loop):\n    asyncio.set_event_loop(loop)\n    loop.run_forever()\n\nasync def fetch(url):\n    async with aiohttp.ClientSession() as session:\n        async with session.get(url) as resp:\n            print(resp.status)\n            return await resp.text()\n\nasync def do_some_work(x):\n    print('Waiting ', x)\n    try:\n        ret = await fetch(url='http://127.0.0.1:5000/{}'.format(x))\n        print(ret)\n    except Exception as e:\n        try:\n            print(await fetch(url='http://127.0.0.1:5000/error'))\n        except Exception as e:\n            print(e)\n    else:\n        print('Done {}'.format(x))\n\nnew_loop = asyncio.new_event_loop()\nt = Thread(target=start_loop, args=(new_loop,))\nt.setDaemon(True)\nt.start()\n\ntry:\n    while True:\n        task = rcon.rpop(\"queue\")\n        if not task:\n            time.sleep(1)\n            continue\n        asyncio.run_coroutine_threadsafe(do_some_work(int(task)), new_loop)\nexcept Exception as e:\n    print('error')\n    new_loop.stop()\nfinally:\n    pass\n</code></pre> <p>\u6709\u4e00\u4e2a\u95ee\u9898\u9700\u8981\u6ce8\u610f\uff0c\u6211\u4eec\u5728<code>fetch</code>\u7684\u65f6\u5019<code>try</code>\u4e86\u5f02\u5e38\uff0c\u5982\u679c\u6ca1\u6709<code>try</code>\u8fd9\u4e2a\u5f02\u5e38\uff0c\u5373\u4f7f\u53d1\u751f\u4e86\u5f02\u5e38\uff0c\u5b50\u7ebf\u7a0b\u7684\u4e8b\u4ef6\u5faa\u73af\u4e5f\u4e0d\u4f1a\u9000\u51fa\u3002\u4e3b\u7ebf\u7a0b\u4e5f\u4e0d\u4f1a\u9000\u51fa\uff0c\u6682\u65f6\u6ca1\u627e\u5230\u529e\u6cd5\u53ef\u4ee5\u628a\u5b50\u7ebf\u7a0b\u7684\u5f02\u5e38<code>raise</code>\u4f20\u64ad\u5230\u4e3b\u7ebf\u7a0b\u3002\uff08\u5982\u679c\u8c01\u627e\u5230\u4e86\u6bd4\u8f83\u597d\u7684\u65b9\u5f0f\uff0c\u5e0c\u671b\u53ef\u4ee5\u5e26\u5e26\u6211\uff09\u3002</p> <p>\u5bf9\u4e8e<code>redis</code>\u7684\u6d88\u8d39\uff0c\u8fd8\u6709\u4e00\u4e2a<code>block</code>\u7684\u65b9\u6cd5\uff1a</p> <pre><code>try:\n    while True:\n        _, task = rcon.brpop(\"queue\")\n        asyncio.run_coroutine_threadsafe(do_some_work(int(task)), new_loop)\nexcept Exception as e:\n    print('error', e)\n    new_loop.stop()\nfinally:\n    pass\n</code></pre> <p>\u4f7f\u7528 <code>brpop</code>\u65b9\u6cd5\uff0c\u4f1a<code>block</code>\u4f4f<code>task</code>\uff0c\u5982\u679c\u4e3b\u7ebf\u7a0b\u6709\u6d88\u606f\uff0c\u624d\u4f1a\u6d88\u8d39\u3002\u6d4b\u8bd5\u4e86\u4e00\u4e0b\uff0c\u4f3c\u4e4e<code>brpop</code>\u7684\u65b9\u5f0f\u66f4\u9002\u5408\u8fd9\u79cd\u961f\u5217\u6d88\u8d39\u7684\u6a21\u578b\u3002</p> <pre><code>127.0.0.1:6379[3]&gt; lpush queue 5\n(integer) 1\n127.0.0.1:6379[3]&gt; lpush queue 1\n(integer) 1\n127.0.0.1:6379[3]&gt; lpush queue 1\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u7ed3\u679c</p> <pre><code>Waiting  5\nWaiting  1\nWaiting  1\n200\n1 It works\nDone 1\n200\n1 It works\nDone 1\n200\n5 It works\nDone 5\n</code></pre>"},{"location":"#\u534f\u7a0b\u6d88\u8d39","title":"\u534f\u7a0b\u6d88\u8d39","text":"<p>\u4e3b\u7ebf\u7a0b\u7528\u4e8e\u76d1\u542c\u961f\u5217\uff0c\u7136\u540e\u5b50\u7ebf\u7a0b\u7684\u505a\u4e8b\u4ef6\u5faa\u73af\u7684<code>worker</code>\u662f\u4e00\u79cd\u65b9\u5f0f\u3002\u8fd8\u6709\u4e00\u79cd\u65b9\u5f0f\u5b9e\u73b0\u8fd9\u79cd\u7c7b\u4f3c<code>master-worker</code>\u7684\u65b9\u6848\u3002\u5373\u628a\u76d1\u542c\u961f\u5217\u7684\u65e0\u9650\u5faa\u73af\u903b\u8f91\u4e00\u9053\u534f\u7a0b\u4e2d\u3002\u7a0b\u5e8f\u521d\u59cb\u5316\u5c31\u521b\u5efa\u82e5\u5e72\u4e2a\u534f\u7a0b\uff0c\u5b9e\u73b0\u7c7b\u4f3c\u5e76\u884c\u7684\u6548\u679c\u3002</p> <pre><code>import time\nimport asyncio\nimport redis\n\nnow = lambda : time.time()\n\ndef get_redis():\n    connection_pool = redis.ConnectionPool(host='127.0.0.1', db=3)\n    return redis.Redis(connection_pool=connection_pool)\n\nrcon = get_redis()\n\nasync def worker():\n    print('Start worker')\n\n    while True:\n        start = now()\n        task = rcon.rpop(\"queue\")\n        if not task:\n            await asyncio.sleep(1)\n            continue\n        print('Wait ', int(task))\n        await asyncio.sleep(int(task))\n        print('Done ', task, now() - start)\n\ndef main():\n    asyncio.ensure_future(worker())\n    asyncio.ensure_future(worker())\n\n    loop = asyncio.get_event_loop()\n    try:\n        loop.run_forever()\n    except KeyboardInterrupt as e:\n        print(asyncio.gather(*asyncio.Task.all_tasks()).cancel())\n        loop.stop()\n        loop.run_forever()\n    finally:\n        loop.close()\n\nif __name__ == '__main__':\n    main()\n</code></pre> <p>\u8fd9\u6837\u505a\u5c31\u53ef\u4ee5\u591a\u591a\u542f\u52a8\u51e0\u4e2a<code>worker</code>\u6765\u76d1\u542c\u961f\u5217\u3002\u4e00\u6837\u53ef\u4ee5\u5230\u8fbe\u6548\u679c\u3002</p>"},{"location":"#\u603b\u7ed3","title":"\u603b\u7ed3","text":"<p>\u4e0a\u8ff0\u7b80\u5355\u7684\u4ecb\u7ecd\u4e86<code>asyncio</code>\u7684\u7528\u6cd5\uff0c\u4e3b\u8981\u662f\u7406\u89e3\u4e8b\u4ef6\u5faa\u73af\uff0c\u534f\u7a0b\u548c\u4efb\u52a1\uff0cfuture\u7684\u5173\u7cfb\u3002\u5f02\u6b65\u7f16\u7a0b\u4e0d\u540c\u4e8e\u5e38\u89c1\u7684\u540c\u6b65\u7f16\u7a0b\uff0c\u8bbe\u8ba1\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7684\u65f6\u5019\uff0c\u9700\u8981\u7279\u522b\u7684\u6ce8\u610f\u3002\u6bd5\u7adf\u8fd9\u548c\u4ee5\u5f80\u7684\u7f16\u7801\u7ecf\u9a8c\u6709\u70b9\u4e0d\u4e00\u6837\u3002\u53ef\u662f\u4ed4\u7ec6\u60f3\u60f3\uff0c\u6211\u4eec\u5e73\u65f6\u5904\u4e8b\u7684\u65f6\u5019\uff0c\u5927\u8111\u4f1a\u81ea\u7136\u800c\u7136\u7684\u5b9e\u73b0\u5f02\u6b65\u534f\u7a0b\u3002\u6bd4\u5982\u7b49\u5f85\u716e\u8336\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u591a\u5199\u51e0\u884c\u4ee3\u7801\u3002</p> <p>\u76f8\u5173\u4ee3\u7801\u6587\u4ef6\u7684Gist</p> <p>\u53c2\u8003\uff1a</p> <ul> <li>Threaded Asynchronous Magic and How to Wield It</li> <li>Python Asyncio: The Complete Guide</li> </ul>"},{"location":"about/","title":"\u5173\u4e8e","text":""},{"location":"about/#mkdocs","title":"mkdocs","text":"<p>MkDocs\u662f\u4e00\u79cd\u7b80\u5355\u6613\u7528\u7684\u9759\u6001\u7f51\u7ad9\u751f\u6210\u5de5\u5177\uff0c\u5141\u8bb8\u5f00\u53d1\u8005\u4f7f\u7528Markdown\u6587\u6863\u7f16\u5199\u7f51\u7ad9\uff0c\u5e76\u652f\u6301\u81ea\u5b9a\u4e49\u4e3b\u9898\u548c\u63d2\u4ef6\u3002\u57fa\u4e8ePython\u8bed\u8a00\u5f00\u53d1\uff0cMkDocs\u53ef\u4ee5\u5e2e\u52a9\u7528\u6237\u5feb\u901f\u521b\u5efa\u7f8e\u89c2\u3001\u6613\u8bfb\u7684\u6587\u6863\u7f51\u7ad9\u3002</p>"},{"location":"about/#\u5b89\u88c5","title":"\u5b89\u88c5","text":"<p>\u5b89\u88c5MkDocs\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u901a\u8fc7Python\u5305\u7ba1\u7406\u5668pip\u8fdb\u884c\u5b89\u88c5\uff1a</p> <pre><code>pip install mkdocs\n</code></pre>"},{"location":"about/#\u4f7f\u7528","title":"\u4f7f\u7528","text":"<p>\u4f7f\u7528MkDocs\u521b\u5efa\u4e00\u4e2a\u65b0\u9879\u76ee\u5f88\u5bb9\u6613\u3002\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u5c06\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a\u201cmyproject\u201d\u7684\u65b0\u9879\u76ee\uff1a</p> <pre><code>mkdocs new myproject\n</code></pre> <p>\u8fd9\u5c06\u751f\u6210\u5982\u4e0b\u6587\u4ef6\u7ed3\u6784\uff1a</p> <pre><code>myproject/\n    \u251c\u2500\u2500 docs/\n    \u2502   \u2514\u2500\u2500 index.md\n    \u251c\u2500\u2500 mkdocs.yml\n    \u2514\u2500\u2500 README.md\n</code></pre> <p>\u5176\u4e2d\uff0c\u201cdocs\u201d\u6587\u4ef6\u5939\u5b58\u653e\u6240\u6709\u7684Markdown\u6587\u6863\uff0c\u201cmkdocs.yml\u201d\u662f\u914d\u7f6e\u6587\u4ef6\uff0c\u201cREADME.md\u201d\u662f\u9879\u76ee\u7684\u8bf4\u660e\u6587\u4ef6\u3002</p> <p>\u7f16\u8f91\u201cdocs/index.md\u201d\u6587\u4ef6\uff0c\u6dfb\u52a0\u4e00\u4e9b\u5185\u5bb9\uff1a</p> <pre><code># \u6b22\u8fce\u4f7f\u7528MkDocs\n\nMkDocs\u662f\u4e00\u4e2a\u7b80\u5355\u6613\u7528\u7684\u9759\u6001\u7f51\u7ad9\u751f\u6210\u5de5\u5177\uff0c\u901a\u8fc7Markdown\u6587\u6863\u7f16\u5199\u7f51\u7ad9\u3002\n</code></pre> <p>\u4fdd\u5b58\u6587\u4ef6\u540e\uff0c\u5728\u547d\u4ee4\u884c\u4e2d\u8fdb\u5165\u9879\u76ee\u6839\u76ee\u5f55\u5e76\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a</p> <pre><code>mkdocs serve\n</code></pre> <p>\u7136\u540e\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00\u201chttp://localhost:8000\u201d\u5c31\u53ef\u4ee5\u770b\u5230\u521a\u624d\u7f16\u8f91\u7684\u9875\u9762\u4e86\u3002</p>"},{"location":"about/#\u81ea\u5b9a\u4e49\u4e3b\u9898\u548c\u63d2\u4ef6","title":"\u81ea\u5b9a\u4e49\u4e3b\u9898\u548c\u63d2\u4ef6","text":"<p>MkDocs\u652f\u6301\u81ea\u5b9a\u4e49\u4e3b\u9898\u548c\u63d2\u4ef6\u3002\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u5b89\u88c5\u7b2c\u4e09\u65b9\u4e3b\u9898\u548c\u63d2\u4ef6\u6765\u589e\u5f3aMkDocs\u7684\u529f\u80fd\u3002</p> <p>\u4f8b\u5982\uff0c\u8981\u5b89\u88c5\u201cmkdocs-material\u201d\u4e3b\u9898\uff0c\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a</p> <pre><code>pip install mkdocs-material\n</code></pre> <p>\u7136\u540e\u5728\u201cmkdocs.yml\u201d\u6587\u4ef6\u4e2d\u5c06\u4e3b\u9898\u8bbe\u7f6e\u4e3a\u201cmaterial\u201d:</p> <pre><code>theme:\n    name: material\n</code></pre> <p>\u8fd9\u6837\u5c31\u53ef\u4ee5\u4f7f\u7528\u4ee3\u7801\u9ad8\u4eae\u548c\u5176\u4ed6\u6269\u5c55\u529f\u80fd\u4e86\u3002</p>"},{"location":"about/#\u90e8\u7f72","title":"\u90e8\u7f72","text":"<p>\u8981\u5c06MkDocs\u7f51\u7ad9\u90e8\u7f72\u5230\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\uff0c\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4f7f\u7528GitHub Pages\u6216GitLab Pages\u3002\u53ea\u9700\u8981\u5c06\u751f\u6210\u7684HTML\u6587\u4ef6\u4e0a\u4f20\u5230GitHub\u6216GitLab\u4e0a\u7684\u76f8\u5e94\u4ed3\u5e93\u4e2d\u5373\u53ef\u3002</p> <p>\u53e6\u5916\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528Python Web\u6846\u67b6\uff08\u5982Flask\u3001Django\u7b49\uff09\u5c06MkDocs\u751f\u6210\u7684HTML\u6587\u4ef6\u4f5c\u4e3a\u9759\u6001\u6587\u4ef6\u90e8\u7f72\u5230Web\u670d\u52a1\u5668\u4e0a\u3002</p> <p>\u4ee5\u4e0a\u5c31\u662fPython MkDocs\u7684\u7b80\u4ecb\uff0c\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u8003MkDocs\u5b98\u65b9\u6587\u6863\uff1ahttps://www.mkdocs.org/</p>"},{"location":"asyncio/api_mind_map/","title":"asyncio API \u601d\u7ef4\u5bfc\u56fe","text":""},{"location":"asyncio/cheat_sheet/","title":"Asyncio \u8868\u8fbe\u5f0f\u53caAPI\u5907\u5fd8\u5f55","text":""},{"location":"asyncio/cheat_sheet/#\u4e3a\u4ec0\u4e48\u662fasyncio-","title":"\u4e3a\u4ec0\u4e48\u662fasyncio ?","text":"<p>Asyncio \u63d0\u4f9b\u9002\u5408\u975e\u963b\u585e\u5957\u63a5\u5b57 I/O \u5e94\u7528\u7a0b\u5e8f\u7684\u57fa\u4e8e\u534f\u7a0b\u7684\u5e76\u53d1\u6027\u3002</p>"},{"location":"asyncio/cheat_sheet/#\u534f\u7a0b","title":"\u534f\u7a0b","text":"<p>\u5bfc\u5165:</p> <pre><code>import asyncio\n</code></pre> <p>\u5b9a\u4e49\u4e00\u4e2a\u534f\u7a0b:</p> <pre><code>async def custom_coroutine():\n    # ...\n</code></pre> <p>\u521b\u5efa\u534f\u7a0b\u5bf9\u8c61:</p> <pre><code>coro = custom_coroutine()\n</code></pre> <p>\u8fd0\u884c\u534f\u7a0b\u7684\u5165\u53e3:</p> <pre><code>asyncio.run(main())\n</code></pre> <p>\u4ece\u534f\u7a0b\u4e2d\u6302\u8d77\u548c\u8fd0\u884c\u534f\u7a0b:</p> <pre><code>await custom_coroutine()\n</code></pre> <p>sleep \u4e00\u4e2a\u534f\u7a0b\uff1a</p> <pre><code>await asyncio.sleep(1)\n</code></pre>"},{"location":"asyncio/cheat_sheet/#\u5f02\u6b65\u63a8\u5bfc\u548c\u5faa\u73af","title":"\u5f02\u6b65\u63a8\u5bfc\u548c\u5faa\u73af","text":"<p>\u5f02\u6b65\u63a8\u5bfc\u5f0f\uff1a</p> <pre><code>res = [r async for r in async_gen()]\n</code></pre> <p>Await \u63a8\u5bfc\u5f0f\uff1a</p> <pre><code>res = [r await a in awaitables]\n</code></pre> <p>\u5f02\u6b65for\u5faa\u73af\uff1a</p> <pre><code>async for item in async_gen():\n    print(item)\n</code></pre>"},{"location":"asyncio/cheat_sheet/#\u4efb\u52a1task","title":"\u4efb\u52a1(Task)","text":"<p>\u5c06\u4efb\u52a1\u4f5c\u4e3a\u534f\u7a0b\u5e76\u8c03\u5ea6\u4e3a\u72ec\u7acb\u8fd0\u884c\u3002</p> <p>\u521b\u5efa\u5e76\u8c03\u5ea6\u4e00\u4e2a\u4efb\u52a1(\u9ad8\u7ea7)\uff1a</p> <pre><code>task = asyncio.create_task(coro)\n</code></pre> <p>\u521b\u5efa\u5e76\u8c03\u5ea6\u4e00\u4e2a\u4efb\u52a1(\u4f4e\u7ea7)\uff1a</p> <pre><code>task = asyncio.create_task(coro)\n</code></pre> <p>\u521b\u5efa\u5e76\u8c03\u5ea6\u4e00\u4e2a\u4efb\u52a1\uff1a</p> <pre><code>task = asyncio.ensure_future(coro)\n</code></pre> <p>\u6302\u8d77\u5e76\u7b49\u5f85\u4efb\u52a1\u5b8c\u6210\uff1a</p> <pre><code>await task\n</code></pre> <p>\u83b7\u53d6\u5f53\u524d\u4efb\u52a1\uff1a</p> <pre><code>task = asyncio.current_task()\n</code></pre> <p>\u83b7\u53d6\u6240\u6709\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\uff1a</p> <pre><code>tasks = asyncio.all_tasks()\n</code></pre> <p>\u83b7\u53d6\u4efb\u52a1\u7ed3\u679c\uff1a</p> <pre><code>value = task.result()\n</code></pre> <p>\u83b7\u53d6\u4efb\u52a1\u672a\u5904\u7406\u7684\u5f02\u5e38\uff1a</p> <pre><code>ex = task.exception()\n</code></pre> <p>\u53d6\u6d88\u4e00\u4e2a\u4efb\u52a1\uff1a</p> <pre><code>was_canceled = task.cancel()\n</code></pre> <p>\u68c0\u67e5\u4efb\u52a1\u662f\u5426\u8fd0\u884c\u5b8c\u6bd5(\u672a\u8fd0\u884c)\uff1a</p> <pre><code>if task.done():\n    # ...\n</code></pre> <p>\u68c0\u67e5\u4efb\u52a1\u662f\u5426\u88ab\u53d6\u6d88\uff1a</p> <pre><code>if task.cancelled():\n    # ...\n</code></pre> <p>\u6dfb\u52a0\u6267\u884c\u5b8c\u540e\u7684\u56de\u8c03\u51fd\u6570\uff1a</p> <pre><code>task.add_done_callback(handler)\n</code></pre> <p>\u5220\u9664\u4efb\u52a1\u7684\u6267\u884c\u540e\u7684\u56de\u8c03\u51fd\u6570\uff1a</p> <pre><code>task.remove_done_callback(handler)\n</code></pre> <p>\u8bbe\u7f6e\u548c\u83b7\u53d6\u4efb\u52a1\u540d\u79f0\uff1a</p> <pre><code>task.set_name(\"MyTask\")\nname = task.get_name()\n</code></pre>"},{"location":"asyncio/cheat_sheet/#\u64cd\u4f5c\u4efb\u52a1\u5408\u96c6","title":"\u64cd\u4f5c\u4efb\u52a1\u5408\u96c6","text":"<p>\u64cd\u4f5c\u4e00\u4e2a\u53ef\u7b49\u5f85\u4efb\u52a1\u5408\u96c6\u3001\u4efb\u52a1\u3001\u6216\u8005\u4efb\u52a1\u5408\u96c6</p> <p>\u5e26\u8d85\u65f6\u7684\u4f7f\u7528Await\uff1a</p> <pre><code>try:\n    await asyncio.wait_for(tk, timeout=1)\nexcept asyncio.TimeoutError:\n    # ...\n</code></pre> <p>\u9632\u6b62\u4efb\u52a1\u88ab\u53d6\u6d88\uff1a</p> <pre><code>shielded = asyncio.shield(task)\n</code></pre> <p>\u5728\u65b0\u7ebf\u7a0b\u4e2d\u8fd0\u884c\u963b\u585e\u4efb\u52a1\uff1a</p> <pre><code>coro = asyncio.to_thread(myfunc)\n</code></pre> <p>\u5728asyncio\u4e8b\u4ef6\u5faa\u73af\u4e2d\u8fd0\u884c\u4efb\u52a1\uff1a</p> <pre><code>fut = run_coroutine_threadsafe(coro, loop)\n</code></pre> <p>\u5c06\u8bb8\u591a\u53ef\u7b49\u5f85\u534f\u7a0b\u5bf9\u8c61\u4f5c\u4e3a\u7ec4\u8fd0\u884c\uff1a</p> <pre><code>await asyncio.gather(c1(), c2())\n</code></pre> <p>\u7b49\u5f85\u4e00\u4e2a\u96c6\u5408\u4e2d\u7684\u6240\u6709\u534f\u7a0b\u4efb\u52a1\uff1a</p> <pre><code>done, pen = await asyncio.wait(tasks)\n</code></pre> <p>\u5e26\u8d85\u65f6\u7684\u7b49\u5f85\u4e00\u4e2a\u96c6\u5408\u4e2d\u7684\u6240\u6709\u534f\u7a0b\u4efb\u52a1\uff1a</p> <pre><code>try:\n    done, pen = await asyncio.wait(tasks, timeout=5)\nexcept asyncio.TimeoutError:\n    # ...\n</code></pre> <p>\u7b49\u5f85\u4e00\u4e2a\u4efb\u52a1\u5408\u96c6\u4e2d\u7684\u7b2c\u4e00\u4e2a\u4efb\u52a1\u5b8c\u6210\uff1a</p> <pre><code>done, pen = await asyncio.wait(tasks, return_when=FIRST_COMPLETED)\n</code></pre> <p>\u7b49\u5f85\u4e00\u4e2a\u4efb\u52a1\u5408\u96c6\u4e2d\u7684\u7b2c\u4e00\u4e2a\u4efb\u52a1\u5931\u8d25\uff1a</p> <pre><code>done, pen = await asyncio.wait(tasks, return_when=FIRST_EXCEPTION)\n</code></pre> <p>\u6309\u4efb\u52a1\u5b8c\u6210\u987a\u5e8f\u83b7\u53d6\u7ed3\u679c\uff1a</p> <pre><code>for c in asyncio.as_completed(tasks):\n    result = await c\n</code></pre>"},{"location":"asyncio/cheat_sheet/#\u975e\u963b\u585eio\u7684\u5b50\u8fdb\u7a0b","title":"\u975e\u963b\u585eI/O\u7684\u5b50\u8fdb\u7a0b","text":"<p>\u5728\u5b50\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u547d\u4ee4\uff1a</p> <pre><code>p = await create_subprocess_exec('ls')\n</code></pre> <p>\u4f7f\u7528shell\u548c\u5b50\u8fdb\u7a0b\u8fd0\u884c\u547d\u4ee4\uff1a</p> <pre><code>p = await create_subprocess_shell('ls')\n</code></pre> <p>\u4ece\u5b50\u8fdb\u7a0b\u4e2d\u8bfb\u53d6\u6570\u636e\uff1a</p> <pre><code>await process.communicate(input=data)\n</code></pre> <p>\u7ec8\u6b62\u4e00\u4e2a\u5b50\u8fdb\u7a0b\uff1a</p> <pre><code>process.terminate()\n</code></pre>"},{"location":"asyncio/cheat_sheet/#\u975e\u963b\u585eio-\u6d41","title":"\u975e\u963b\u585eI/O \u6d41","text":"<p>\u6253\u5f00\u4e00\u4e2a\u5ba2\u6237\u7aefTCP\u94fe\u63a5\uff1a</p> <pre><code>reader, writer = await open_connection('google.com', 80)\n</code></pre> <p>\u542f\u52a8\u4e00\u4e2aTCP\u670d\u52a1\uff1a</p> <pre><code>server = await start_server(hanler, '127.0.0.1', 9876)\n</code></pre> <p>\u4ece\u5957\u63a5\u5b57\u8bfb\u53d6\u6570\u636e\uff1a</p> <pre><code>data = await reader.readline()\n</code></pre> <p>\u5f80\u5957\u63a5\u5b57\u5199\u5165\u6570\u636e\uff1a</p> <pre><code>writer.write(data)\n</code></pre> <p>\u6e05\u7a7asocket\u5e76\u7b49\u5f85\u5c31\u7eea\uff1a</p> <pre><code>await writer.drain()\n</code></pre> <p>\u5173\u95ed\u5957\u63a5\u5b57\u8fde\u63a5\uff1a</p> <pre><code>writer.close()\nawait writer.wait_closed()\n</code></pre>"},{"location":"asyncio/cheat_sheet/#\u4fe1\u53f7\u91cf\u548c\u4e8b\u4ef6\u548c\u6761\u4ef6","title":"\u4fe1\u53f7\u91cf\u548c\u4e8b\u4ef6\u548c\u6761\u4ef6","text":"<p>\u4fe1\u53f7\u91cf\uff0c\u8bbe\u7f6e num \u4e2a\u4f4d\u7f6e\uff1a</p> <pre><code>semaphore = asyncio.Semaphore(10)\nawait semaphore.acquire()\n# ...\nsemaphore.release()\n</code></pre> <p>\u4fe1\u53f7\u91cf, \u4e0a\u4e0b\u6587\u7ba1\u7406\uff1a</p> <pre><code>async with semaphore:\n    # ...\n</code></pre> <p>\u521b\u5efa\u4e8b\u4ef6\uff0c\u5e76\u8bbe\u7f6e\u4e8b\u4ef6\uff1a</p> <pre><code>event = asyncio.Event()\nevent.set()\n</code></pre> <p>\u68c0\u67e5\u4e8b\u4ef6\u662f\u5426\u8bbe\u7f6e\uff1a</p> <pre><code>if event.is_set():\n    # ...\n</code></pre> <p>\u7b49\u5f85\u4e8b\u4ef6\u88ab\u8bbe\u7f6e(\u963b\u585e)\uff1a</p> <pre><code>await event.wait()\n</code></pre> <p>\u6761\u4ef6\u53d8\u91cf\uff1a</p> <pre><code>condition = asyncio.Condition()\nawait condition.acquired()\n# ...\ncondition.release()\n</code></pre> <p>\u7b49\u5f85\u6761\u4ef6\u88ab\u901a\u77e5(\u963b\u585e)\uff1a</p> <pre><code>async with condition:\n    await condition.wait()\n</code></pre> <p>\u7b49\u5f85\u8868\u8fbe\u5f0f\u7684\u6761\u4ef6\uff08\u963b\u585e\uff09\uff1a</p> <pre><code>async with condition:\n    await condition.wait_for(check)\n</code></pre> <p>\u901a\u77e5\u4efb\u4f55\u7b49\u5f85\u6761\u4ef6\u7684\u5355\u4e2a\u7ebf\u7a0b\uff1a</p> <pre><code>async with condition:\n    condition.notify(n=1)\n</code></pre> <p>\u901a\u77e5\u6240\u6709\u7b49\u5f85\u6761\u4ef6\u7684\u7ebf\u7a0b\uff1a</p> <pre><code>async with condition:\n    condition.notify_all()\n</code></pre>"},{"location":"asyncio/cheat_sheet/#\u5f02\u6b65\u9501async-locks","title":"\u5f02\u6b65\u9501(Async Locks)","text":"<p>\u4e92\u65a5\u9501\uff1a</p> <pre><code>lock = asyncio.Lock()\nawait lock.acquire()\n# ...\nlock.release()\n</code></pre> <p>\u4e92\u65a5\u9501\u548c\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff1a</p> <pre><code>async with lock:\n    # ...\n</code></pre>"},{"location":"asyncio/cheat_sheet/#\u961f\u5217","title":"\u961f\u5217","text":"<p>Queue \u3001LifoQueue\uff0c PriorityQueue</p> <p>\u666e\u901a\u961f\u5217\u3001\u540e\u8fdb\u5148\u51fa\u961f\u5217\u3001\u4f18\u5148\u7ea7\u961f\u5217</p> <p>\u521b\u5efa\u961f\u5217\uff1a</p> <pre><code>queue = asyncio.Queue()\n</code></pre> <p>\u521b\u5efa\u961f\u5217\u5e76\u9650\u5236\u6570\u91cf\uff1a</p> <pre><code>queue = asyncio.Queue(100)\n</code></pre> <p>\u6dfb\u52a0\u5143\u7d20\u5230\u961f\u5217\u4e2d(\u963b\u585e\uff0c\u5982\u679c\u9650\u5236\u4e86\u6570\u91cf)\uff1a</p> <pre><code>await queue.put(item)\n</code></pre> <p>\u4ece\u961f\u5217\u4e2d\u83b7\u53d6\u5143\u7d20\uff1a</p> <pre><code>item = await queue.get()\n</code></pre> <p>\u68c0\u67e5\u961f\u5217\u662f\u5426\u4e3a\u7a7a\uff1a</p> <pre><code>if queue.empty():\n    # ...\n</code></pre> <p>\u68c0\u67e5\u961f\u5217\u662f\u5426\u5df2\u6ee1\uff1a</p> <pre><code>if queue.full():\n    # ...\n</code></pre> <p>\u83b7\u53d6\u961f\u5217\u5f53\u524d\u5bb9\u91cf\uff1a</p> <pre><code>capacity = queue.qsize()\n</code></pre> <p>\u5c06\u5de5\u4f5c\u5355\u5143\u6807\u8bb0\u4e3a\u5b8c\u6210\uff1a</p> <pre><code>queue.task_done()\n</code></pre> <p>\u7b49\u5f85\u6240\u6709\u5355\u5143\u5b8c\u6210\uff1a</p> <pre><code>await queue.join()\n</code></pre>"},{"location":"asyncio/cheat_sheet/#\u5f02\u6b65\u751f\u6210\u5668\u548c\u8fed\u4ee3\u5668","title":"\u5f02\u6b65\u751f\u6210\u5668\u548c\u8fed\u4ee3\u5668","text":"<p>\u5b9a\u4e49\u5f02\u6b65\u751f\u6210\u5668\uff1a</p> <pre><code>async def async_generator():\n    for i in range(10):\n        await asyncio.sleep(1)\n        yield i\n</code></pre> <p>\u5b9a\u4e49\u5f02\u6b65\u8fed\u4ee3\u5668\uff1a</p> <pre><code>class AsyncIterator():\n    def __init__(self):\n        self.counter = 0\n    def __aiter__(self):\n        return self\n    async def __anext__(self):\n        if self.counter &gt;= 10:\n            raise StopAsyncIteration\n        await asyncio.sleep(1)\n        self.counter += 1\n        return self.counter\n</code></pre> <p>\u4f7f\u7528\u5f02\u6b65\u8fed\u4ee3\u5668\uff1a</p> <pre><code>async for value in AsyncIterator():\n    # ...\n</code></pre>"},{"location":"asyncio/cheat_sheet/#\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","title":"\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","text":"<p>\u5b9a\u4e49\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff1a</p> <pre><code>class AsyncContextManager():\n    async def __aenter__(self):\n        await asyncio.sleep(1)\n    async def __aexit__(self, et, exc, tb):\n        await asyncio.sleep(1)\n</code></pre> <p>\u4f7f\u7528\u5f02\u6b65\u8fed\u4ee3\u5668\uff1a</p> <pre><code>async with CustomClass() as mgmr:\n    # ...\n</code></pre>"},{"location":"asyncio/runner/","title":"\u5982\u4f55\u4f7f\u7528async.Runner\u6267\u884c\u591a\u4e2a\u534f\u7a0b","text":"<p>\u8f6c\u81ea: https://superfastpython.com/asyncio-runner/</p> \u4e2d\u6587\u539f\u6587 <p>\u60a8\u53ef\u4ee5\u4f7f\u7528\u9ad8\u7ea7 asyncio API \u4e2d\u7684 asyncio.Runner \u7c7b\u5728\u540c\u4e00\u4e8b\u4ef6\u5faa\u73af\u4e2d\u6267\u884c\u591a\u4e2a\u534f\u7a0b\u3002</p> <p>\u8fd9\u662fPython 3.11\u4e2d\u63d0\u4f9b\u7684\u65b0\u529f\u80fd\u3002 \u5728\u6dfb\u52a0 asyncio.Runner \u7c7b\u4e4b\u524d\uff0c\u6211\u4eec\u5fc5\u987b\u5728\u5355\u72ec\u7684\u4e8b\u4ef6\u5faa\u73af\u4e2d\u6267\u884c\u6bcf\u4e2a\u534f\u7a0b\uff0c\u91cd\u7ec4\u6211\u4eec\u7684\u7a0b\u5e8f\u4ee5\u4f7f\u7528\u5305\u88c5\u5668\u534f\u7a0b\u6216\u6df1\u5165\u7814\u7a76\u4f4e\u7ea7 asyncio API\u3002</p> <p>\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u60a8\u5c06\u4e86\u89e3\u5982\u4f55\u4f7f\u7528 asyncio.Runner \u7c7b\u5728 Python \u7684\u540c\u4e00\u4e8b\u4ef6\u5faa\u73af\u4e2d\u6267\u884c\u591a\u4e2a\u534f\u7a0b\u3002</p> <p>\u8ba9\u6211\u4eec\u5f00\u59cb\u5427\u3002</p> <p>How to Execute Multiple Coroutines with asyncio.Runner</p> <p>You can execute multiple coroutines in the same event loop using the asyncio.Runner class in the high-level asyncio API.</p> <p>This is a new feature provided in Python 3.11. Before the addition of the asyncio.Runner class, we would have to execute each coroutine in a separate event loop, restructure our program to use a wrapper coroutine or delve into the low-level asyncio API.</p> <p>In this tutorial, you will discover how to execute multiple coroutines in the same event loop from Python using the asyncio.Runner class.</p> <p>Let\u2019s get started.</p>"},{"location":"asyncio/runner/#\u9700\u8981\u5728-python-\u4e2d\u8fd0\u884c\u591a\u4e2a\u534f\u7a0b","title":"\u9700\u8981\u5728 Python \u4e2d\u8fd0\u884c\u591a\u4e2a\u534f\u7a0b","text":"\u4e2d\u6587\u539f\u6587 <p>\u8fd0\u884c asyncio \u7a0b\u5e8f\u7684\u5178\u578b\u65b9\u6cd5\u662f\u8c03\u7528 asyncio.run() \u5e76\u4f20\u5165\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61\u6765\u6267\u884c\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\nasyncio.run(coro())\n</code></pre> <p>\u63d0\u4f9b\u7ed9 asyncio.run() \u7684\u5355\u4e2a\u534f\u7a0b\u8868\u793a asyncio \u4e8b\u4ef6\u5faa\u73af\u7684\u5165\u53e3\u70b9\u3002</p> <p>\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u4ece Python \u7a0b\u5e8f\u4e2d\u6267\u884c\u591a\u4e2a\u5355\u72ec\u7684\u534f\u7a0b\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u591a\u6b21\u8c03\u7528 asyncio.run() \u6765\u5b9e\u73b0\uff0c\u4f46\u8fd9\u5c06\u4e3a\u6bcf\u4e2a\u8c03\u7528\u542f\u52a8\u5e76\u8fd0\u884c\u4e00\u4e2a\u65b0\u7684 asyncio \u4e8b\u4ef6\u5faa\u73af\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\nasyncio.run(coro1())\nasyncio.run(coro2())\n</code></pre> <p>\u53e6\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u662f\u91cd\u6784\u7a0b\u5e8f\u5e76\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5165\u53e3\u70b9\u534f\u7a0b\u6765\u4e3a\u6211\u4eec\u8c03\u7528\u591a\u4e2a\u534f\u7a0b\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>async def main():\n    await coro1()\n    await coro2()\n\nasyncio.run(main())\n</code></pre> <p>\u6211\u4eec\u662f\u5426\u53ef\u4ee5\u5728\u540c\u4e00\u4e2a\u4e8b\u4ef6\u5faa\u73af\u4e2d\u8fd0\u884c\u591a\u4e2a\u534f\u7a0b\uff0c\u800c\u65e0\u9700\u901a\u8fc7\u9ad8\u7ea7 asyncio API \u91cd\u6784\u6211\u4eec\u7684\u7a0b\u5e8f\uff1f</p> <p>\u4f7f\u7528\u6240\u6709 CPU \u8fd0\u884c\u5faa\u73af\uff0c\u4e0b\u8f7d\u6211\u7684\u514d\u8d39\u4e66 \u4ee5\u4e86\u89e3\u5982\u4f55\u64cd\u4f5c\u3002</p> <p>Need to Run Multiple Coroutines from Python</p> <p>The typical way to run an asyncio program is to call asyncio.run() and pass in a coroutine object to execute.</p> <p>For example:</p> <pre><code>...\nasyncio.run(coro())\n</code></pre> <p>The single coroutine is provided to the asyncio.run() represents the entry point into the asyncio event loop.</p> <p>There may be cases where we want to execute multiple separate coroutines from our Python program.</p> <p>This could be achieved with multiple calls to asyncio.run(), but this would start and run a new asyncio event loop for each call.</p> <p>For example:</p> <pre><code>...\nasyncio.run(coro1())\nasyncio.run(coro2())\n</code></pre> <p>Another solution is to restructure the program and create a new entry point coroutine that calls the multiple coroutines for us.</p> <p>For example:</p> <pre><code>async def main():\n    await coro1()\n    await coro2()\n\nasyncio.run(main())\n</code></pre> <p>Can we run multiple coroutines in the same event loop without having to restructure our program via the high-level asyncio API?</p> <p>Run your loops using all CPUs, download my FREE book to learn how.</p>"},{"location":"asyncio/runner/#\u5982\u4f55\u4f7f\u7528-asynciorunner-\u8fd0\u884c\u591a\u4e2a\u534f\u7a0b","title":"\u5982\u4f55\u4f7f\u7528 asyncio.Runner \u8fd0\u884c\u591a\u4e2a\u534f\u7a0b","text":"\u4e2d\u6587\u539f\u6587 <p>Python 3.11 \u5f15\u5165\u4e86\u4e00\u9879\u65b0\u529f\u80fd\uff0c\u5141\u8bb8\u76f4\u63a5\u4ece Python \u7a0b\u5e8f\u8fd0\u884c\u591a\u4e2a\u534f\u7a0b\u3002</p> <p>\u6b64\u529f\u80fd\u662f\u901a\u8fc7\u9ad8\u7ea7 asyncio API \u4e2d\u63d0\u4f9b\u7684 asyncio.Runner \u7c7b\u63d0\u4f9b\u7684\u3002</p> <p>\u6dfb\u52a0\u4e86 Runner \u7c7b\uff0c\u5b83\u516c\u5f00\u4e86 run() \u4f7f\u7528\u7684\u673a\u5236\u3002</p> <p>\u2014 Python 3.11 \u7684\u65b0\u529f\u80fd</p> <p>\u53ef\u4ee5\u521b\u5efa asyncio.Runner \u5e76\u7528\u4e8e\u5728\u540c\u4e00\u4e8b\u4ef6\u5faa\u73af\u4e2d\u6267\u884c\u591a\u4e2a\u534f\u7a0b\u3002</p> <p>\u53ef\u4ee5\u901a\u8fc7 run() \u65b9\u6cd5\u521b\u5efa\u8be5\u7c7b\u7684\u5b9e\u4f8b\u5e76\u76f4\u63a5\u6267\u884c\u534f\u7a0b\u3002 \u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u8c03\u7528 close() \u65b9\u6cd5\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u5f02\u6b65\u8fd0\u884c\u5668\nrunner = asyncio.Runner()\n# \u6267\u884c\u7b2c\u4e00\u4e2a\u534f\u7a0b\nrunner.run(coro1())\n# \u6267\u884c\u7b2c\u4e8c\u4e2a\u534f\u7a0b\nrunner.run(coro2())\n# close runner\nrunner.close()\n</code></pre> <p>\u6216\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4e0a\u7684\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u63a5\u53e3\uff0c\u5f53\u6211\u4eec\u5b8c\u6210\u5b83\u65f6\uff0c\u5b83\u5c06\u4e3a\u6211\u4eec\u5173\u95ed\u4e8b\u4ef6\u5faa\u73af\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u5f02\u6b65\u8fd0\u884c\u5668\nwith asyncio.Runner() as runner:\n    # \u6267\u884c\u7b2c\u4e00\u4e2a\u534f\u7a0b\n    runner.run(coro1())\n    # \u6267\u884c\u7b2c\u4e8c\u4e2a\u534f\u7a0b\n    runner.run(coro2())\n</code></pre> <p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u5982\u4f55\u5728 Python \u7a0b\u5e8f\u7684\u540c\u4e00\u4e8b\u4ef6\u5faa\u73af\u4e2d\u6267\u884c\u591a\u4e2a\u534f\u7a0b\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e9b\u6709\u6548\u7684\u793a\u4f8b\u3002</p> <p>How to Run Multiple Coroutines with asyncio.Runner</p> <p>Python 3.11 introduced a new feature to allow multiple coroutines to be run directly from a Python program.</p> <p>This capability is provided via the asyncio.Runner class, provided in the high-level asyncio API.</p> <p>Added the Runner class, which exposes the machinery used by run().</p> <p>\u2014 WHAT\u2019S NEW IN PYTHON 3.11</p> <p>The asyncio.Runner can be created and used to execute multiple coroutines within the same event loop.</p> <p>An instance of the class can be created and coroutines can be executed directly via the run() method. Once finished, the close() method can be called.</p> <p>For example:</p> <pre><code>...\n# create asyncio runner\nrunner = asyncio.Runner()\n# execute first coroutine\nrunner.run(coro1())\n# execute second coroutine\nrunner.run(coro2())\n# close runner\nrunner.close()\n</code></pre> <p>Alternatively, we can use the context manager interface on the class which will close the event loop for us when we\u2019re finished with it.</p> <p>For example:</p> <pre><code>...\n# create asyncio runner\nwith asyncio.Runner() as runner:\n    # execute first coroutine\n    runner.run(coro1())\n    # execute second coroutine\n    runner.run(coro2())\n</code></pre> <p>Now that we know how to execute multiple coroutines in the same event loop from our Python program, let\u2019s look at some worked examples.</p>"},{"location":"asyncio/runner/#\u4f7f\u7528-asynciorun-\u8fd0\u884c\u591a\u4e2a\u534f\u7a0b\u7684\u793a\u4f8b","title":"\u4f7f\u7528 asyncio.run() \u8fd0\u884c\u591a\u4e2a\u534f\u7a0b\u7684\u793a\u4f8b","text":"\u4e2d\u6587\u539f\u6587 <p>\u5728\u67e5\u770b\u4f7f\u7528 asyncio.Runner \u7684\u793a\u4f8b\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5728\u63d0\u4f9b asyncio.Runner \u4e4b\u524d\u5982\u4f55\u8fd0\u884c\u591a\u4e2a\u534f\u7a0b\uff0c\u4f8b\u5982 Python 3.10 \u53ca\u66f4\u4f4e\u7248\u672c\u3002</p> <p>\u8003\u8651\u8fd9\u6837\u7684\u60c5\u51b5\uff1a\u6211\u4eec\u7684 Python \u7a0b\u5e8f\u6709\u4e24\u4e2a\u534f\u7a0b\u8fd0\u884c\u3002</p> <pre><code># \u534f\u7a0b\u793a\u4f8b\nasync def task_coro1():\n    print('Hello from first coro')\n    await asyncio.sleep(1)\n\n# \u53e6\u4e00\u4e2a\u534f\u7a0b\u793a\u4f8b\nasync def task_coro2():\n    print('Hello from second coro')\n    await asyncio.sleep(1)\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e24\u79cd\u65b9\u6cd5\uff1a</p> <ol> <li>\u5355\u72ec\u8c03\u7528 asyncio.run()</li> <li>\u521b\u5efa\u5305\u88c5\u534f\u7a0b</li> </ol> <p>Example of Running Multiple Coroutines with asyncio.run()</p> <p>Before we look at an example of using asyncio.Runner, let\u2019s look at how we would run multiple coroutines before the asyncio.Runner was provided, e.g. Python 3.10 and lower.</p> <p>Consider the case where we have two coroutines to run from our Python program.</p> <pre><code># example coroutine\nasync def task_coro1():\n    print('Hello from first coro')\n    await asyncio.sleep(1)\n\n# another example coroutine\nasync def task_coro2():\n    print('Hello from second coro')\n    await asyncio.sleep(1)\n</code></pre> <p>There are two methods we could use:</p> <ol> <li>Separate calls to asyncio.run()</li> <li>Create a wrapper coroutine</li> </ol>"},{"location":"asyncio/runner/#\u65b9\u6cd5-1\u5355\u72ec\u8c03\u7528-asynciorun","title":"\u65b9\u6cd5 1\uff1a\u5355\u72ec\u8c03\u7528 asyncio.run()","text":"\u4e2d\u6587\u539f\u6587 <p>\u4e00\u79cd\u65b9\u6cd5\u662f\u5355\u72ec\u8fd0\u884c\u6bcf\u4e2a\u534f\u7a0b\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code># run first coroutine\nasyncio.run(task_coro1())\n# run second coroutine\nasyncio.run(task_coro2())\n</code></pre> <p>\u4e0b\u9762\u5217\u51fa\u4e86\u4f7f\u7528\u6b64\u65b9\u6cd5\u7684\u5b8c\u6574\u793a\u4f8b\u3002</p> <pre><code># \u4f7f\u7528\u5355\u72ec\u7684 asyncio.run() \u8c03\u7528\u7684\u793a\u4f8b\nimport asyncio\n\n# \u534f\u7a0b\u793a\u4f8b\nasync def task_coro1():\n    print('Hello from first coro')\n    await asyncio.sleep(1)\n\n# \u53e6\u4e00\u4e2a\u534f\u7a0b\u793a\u4f8b\nasync def task_coro2():\n    print('Hello from second coro')\n    await asyncio.sleep(1)\n\n# \u8fd0\u884c\u7b2c\u4e00\u4e2a\u534f\u7a0b\nasyncio.run(task_coro1())\n# \u8fd0\u884c\u7b2c\u4e8c\u4e2a\u534f\u7a0b\nasyncio.run(task_coro2())\n</code></pre> <p>\u8fd0\u884c\u8be5\u793a\u4f8b\u9996\u5148\u521b\u5efa\u4e00\u4e2a asyncio \u4e8b\u4ef6\u5faa\u73af\uff0c\u5e76\u4f7f\u7528\u8be5\u5faa\u73af\u6267\u884c\u7b2c\u4e00\u4e2a\u534f\u7a0b\u3002</p> <p>\u7136\u540e\u4e8b\u4ef6\u5faa\u73af\u88ab\u5173\u95ed\u5e76\u6e05\u7406\u3002</p> <p>\u521b\u5efa\u7b2c\u4e8c\u4e2a\u5f02\u6b65\u4e8b\u4ef6\u5faa\u73af\uff0c\u5e76\u7528\u4e8e\u5728\u5173\u95ed\u548c\u6e05\u7406\u4e4b\u524d\u6267\u884c\u7b2c\u4e8c\u4e2a\u534f\u7a0b\u3002</p> <pre><code>Hello from first coro\nHello from second coro\n</code></pre> <p>\u8fd9\u79cd\u65b9\u6cd5\u7684\u6210\u672c\u5f88\u9ad8\uff0c\u56e0\u4e3a\u5fc5\u987b\u4e3a\u6bcf\u4e2a\u534f\u7a0b\u521b\u5efa\u5e76\u5173\u95ed\u65b0\u7684\u4e8b\u4ef6\u5faa\u73af\u3002 \u5982\u679c\u6211\u4eec\u6709\u6570\u5343\u6216\u6570\u767e\u4e07\u4e2a\u534f\u7a0b\u8981\u4ece Python \u6267\u884c\uff0c\u8fd9\u53ef\u80fd\u4f1a\u6210\u4e3a\u4e00\u4e2a\u95ee\u9898\u3002</p> <p>Method 1: Separate Calls to asyncio.run()</p> <p>One approach would be to run each coroutine separately.</p> <p>For example:</p> <pre><code># run first coroutine\nasyncio.run(task_coro1())\n# run second coroutine\nasyncio.run(task_coro2())\n</code></pre> <p>A complete example using this method is listed below.</p> <pre><code># example of using separate asyncio.run() calls\nimport asyncio\n\n# example coroutine\nasync def task_coro1():\n    print('Hello from first coro')\n    await asyncio.sleep(1)\n\n# another example coroutine\nasync def task_coro2():\n    print('Hello from second coro')\n    await asyncio.sleep(1)\n\n# run first coroutine\nasyncio.run(task_coro1())\n# run second coroutine\nasyncio.run(task_coro2())\n</code></pre> <p>Running the example first creates an asyncio event loop and uses the loop to execute the first coroutine.</p> <p>The event loop is then closed and cleaned up.</p> <p>A second asyncio event loop is created and used to execute the second coroutine before being closed and cleaned up.</p> <pre><code>Hello from first coro\nHello from second coro\n</code></pre> <p>This approach is expensive as a new event loop must be created and closed for each coroutine. This can become a problem if we have thousands or millions of coroutines to execute from Python.</p>"},{"location":"asyncio/runner/#\u65b9\u6cd52\u5305\u88c5\u4e3a\u534f\u7a0b","title":"\u65b9\u6cd52\uff1a\u5305\u88c5\u4e3a\u534f\u7a0b","text":"\u4e2d\u6587\u539f\u6587 <p>\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u5305\u88c5\u534f\u7a0b\uff0c\u8be5\u534f\u7a0b\u53cd\u8fc7\u6765\u4f7f\u7528\u5355\u4e2a\u4e8b\u4ef6\u5faa\u73af\u4e3a\u6211\u4eec\u8c03\u7528\u534f\u7a0b\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code># \u5f02\u6b65\u5165\u53e3\u70b9\nasync def main():\n    # \u6267\u884c\u7b2c\u4e00\u4e2a\u534f\u7a0b\n    await task_coro1()\n    # \u6267\u884c\u7b2c\u4e8c\u4e2a\u534f\u7a0b\n    await task_coro2()\n</code></pre> <p>\u4e0b\u9762\u5217\u51fa\u4e86\u6b64\u66f4\u6539\u7684\u5b8c\u6574\u793a\u4f8b\u3002</p> <pre><code># \u5c06 asyncio.run() \u4e0e\u5305\u88c5\u534f\u7a0b\u4e00\u8d77\u4f7f\u7528\u7684\u793a\u4f8b\nfrom asyncio import run\nfrom asyncio import sleep\n\n# \u534f\u7a0b\u793a\u4f8b\nasync def task_coro1():\n    print('Hello from first coro')\n    await sleep(1)\n\n# \u53e6\u4e00\u4e2a\u534f\u7a0b\u793a\u4f8b\nasync def task_coro2():\n    print('Hello from second coro')\n    await sleep(1)\n\n# \u5f02\u6b65\u5165\u53e3\u70b9\nasync def main():\n    # \u6267\u884c\u7b2c\u4e00\u4e2a\u534f\u7a0b\n    await task_coro1()\n    # \u6267\u884c\u7b2c\u4e8c\u4e2a\u534f\u7a0b\n    await task_coro2()\n\n# \u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\nrun(main())\n</code></pre> <p>\u8fd0\u884c\u8be5\u793a\u4f8b\u5c06\u521b\u5efa\u4e00\u4e2a\u5f02\u6b65\u4e8b\u4ef6\u5faa\u73af\u5e76\u6267\u884c main() \u5305\u88c5\u534f\u7a0b\u3002</p> <p>\u7136\u540e\uff0cmain() \u534f\u7a0b\u4f9d\u6b21\u6267\u884c\u5e76\u7b49\u5f85\u6bcf\u4e2a\u4efb\u52a1\u534f\u7a0b\uff0c\u7136\u540e\u5173\u95ed\u3002</p> <pre><code>Hello from first coro\nHello from second coro\n</code></pre> <p>\u8fd9\u79cd\u65b9\u6cd5\u7684\u95ee\u9898\u5728\u4e8e\uff0c\u5fc5\u987b\u4f7f\u7528\u65b0\u7684\u5305\u88c5\u534f\u7a0b\u4f5c\u4e3a\u6267\u884c\u6240\u6709\u534f\u7a0b\u7684\u5165\u53e3\u70b9\u6765\u91cd\u6784\u7a0b\u5e8f\u3002</p> <p>\u8fd9\u53ef\u80fd\u610f\u5473\u7740\u5728\u6267\u884c\u5305\u88c5\u5668\u534f\u7a0b\u4e4b\u524d\u5fc5\u987b\u6536\u96c6\u548c\u8bbe\u7f6e\u6240\u9700\u7684\u6240\u6709\u6570\u636e\u548c\u534f\u7a0b\u3002 \u5b83\u8fd8\u4e0d\u5141\u8bb8 Python \u7a0b\u5e8f\u6839\u636e\u5148\u524d\u534f\u7a0b\u7684\u7ed3\u679c\u6709\u6761\u4ef6\u5730\u521b\u5efa\u548c\u542f\u52a8\u534f\u7a0b\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u4f7f\u7528 asyncio.Runner \u7c7b\u7684\u66ff\u4ee3\u65b9\u6848\u3002</p> <p>Method 2: Wrapper Coroutine</p> <p>Another approach is to define a new wrapper coroutine that in turn calls the coroutines for us using the single event loop.</p> <p>For example:</p> <pre><code># asyncio entry point\nasync def main():\n    # execute the first coroutine\n    await task_coro1()\n    # execute the second coroutine\n    await task_coro2()\n</code></pre> <p>The complete example of this change is listed below.</p> <pre><code># example of using asyncio.run() with wrapper coroutine\nfrom asyncio import run\nfrom asyncio import sleep\n\n# example coroutine\nasync def task_coro1():\n    print('Hello from first coro')\n    await sleep(1)\n\n# another example coroutine\nasync def task_coro2():\n    print('Hello from second coro')\n    await sleep(1)\n\n# asyncio entry point\nasync def main():\n    # execute the first coroutine\n    await task_coro1()\n    # execute the second coroutine\n    await task_coro2()\n\n# entry point of the program\nrun(main())\n</code></pre> <p>Running the example creates a single asyncio event loop and executes the main() wrapper coroutine.</p> <p>The main() coroutine then executes and awaits each task coroutine in turn before closing.</p> <pre><code>Hello from first coro\nHello from second coro\n</code></pre> <p>The problem with this approach is that the program must be restructured with a new wrapper coroutine used as the entry point for executing all coroutines.</p> <p>This may mean that all data and coroutines needed must be collected and set up before executing the wrapper coroutine. It also does not allow the Python program to conditionally create and start coroutines based on the results of prior coroutines.</p> <p>Next, let\u2019s look at an alternative using the asyncio.Runner class.</p>"},{"location":"asyncio/runner/#\u4f7f\u7528-asynciorunner-\u8fd0\u884c\u591a\u4e2a\u534f\u7a0b\u7684\u793a\u4f8b","title":"\u4f7f\u7528 asyncio.Runner \u8fd0\u884c\u591a\u4e2a\u534f\u7a0b\u7684\u793a\u4f8b","text":"\u4e2d\u6587\u539f\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u5f00\u53d1\u4e00\u4e2a\u4f7f\u7528 asyncio.Runner \u7c7b\u4ece Python \u7a0b\u5e8f\u6267\u884c\u591a\u4e2a\u534f\u7a0b\u7684\u793a\u4f8b\u3002</p> <p>\u8fd9\u53ef\u4ee5\u4f7f\u7528 asyncio.Runner \u7684\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u63a5\u53e3\u6765\u5b9e\u73b0\uff0c\u5e76\u8c03\u7528\u6bcf\u4e2a\u534f\u7a0b\u7684 run() \u65b9\u6cd5\u6765\u6267\u884c\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code># \u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\nwith Runner() as runner:\n    # execute the first coroutine\n    runner.run(task_coro1())\n    # execute the second coroutine\n    runner.run(task_coro2())\n</code></pre> <p>\u4e0b\u9762\u5217\u51fa\u4e86\u8fd9\u79cd\u65b9\u6cd5\u7684\u5b8c\u6574\u793a\u4f8b\u3002</p> <pre><code># \u4f7f\u7528 asyncio.Runner \u7684\u793a\u4f8b\nfrom asyncio import Runner\nfrom asyncio import sleep\n\n# \u534f\u7a0b\u793a\u4f8b\nasync def task_coro1():\n    print('Hello from first coro')\n    await sleep(1)\n\n# \u53e6\u4e00\u4e2a\u534f\u7a0b\u793a\u4f8b\nasync def task_coro2():\n    print('Hello from second coro')\n    await sleep(1)\n\n# \u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\nwith Runner() as runner:\n    # \u6267\u884c\u7b2c\u4e00\u4e2a\u534f\u7a0b\n    runner.run(task_coro1())\n    # \u6267\u884c\u7b2c\u4e8c\u4e2a\u534f\u7a0b\n    runner.run(task_coro2())\n</code></pre> <p>\u8fd0\u884c\u8be5\u793a\u4f8b\u4f7f\u7528\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u63a5\u53e3\u521b\u5efa asyncio.Runner\u3002</p> <p>\u7b2c\u4e00\u4e2a\u534f\u7a0b\u8fd0\u884c\uff0c\u7136\u540e\u662f\u7b2c\u4e8c\u4e2a\u3002</p> <p>\u6bcf\u4e2a\u534f\u7a0b\u90fd\u5728\u540c\u4e00\u4e2a\u4e8b\u4ef6\u5faa\u73af\u4e2d\u6267\u884c\uff0c\u5e76\u4e14\u76f4\u5230\u7b2c\u4e00\u6b21\u8c03\u7528 run() \u624d\u4f1a\u521b\u5efa\u6240\u4f7f\u7528\u7684\u5faa\u73af\u3002</p> <pre><code>Hello from first coro\nHello from second coro\n</code></pre> <p>\u8fd9\u79cd\u65b9\u6cd5\u4e3a Python \u7a0b\u5e8f\u63d0\u4f9b\u4e86\u7075\u6d3b\u6027\uff0c\u5141\u8bb8\u5b83\u5728\u540c\u4e00\u4e8b\u4ef6\u5faa\u73af\u4e2d\u4ee5\u4e34\u65f6\u751a\u81f3\u6709\u6761\u4ef6\u7684\u65b9\u5f0f\u6267\u884c\u534f\u7a0b\u3002</p> <p>Example of Running Multiple Coroutines with asyncio.Runner</p> <p>We can develop an example of executing multiple coroutines from a Python program using the asyncio.Runner class.</p> <p>This can be achieved using the context manager interface for the asyncio.Runner and call the run() method for each coroutine to execute.</p> <p>For example:</p> <pre><code># entry point of the program\nwith Runner() as runner:\n    # execute the first coroutine\n    runner.run(task_coro1())\n    # execute the second coroutine\n    runner.run(task_coro2())\n</code></pre> <p>A complete example of this approach is listed below.</p> <pre><code># example of using asyncio.Runner\nfrom asyncio import Runner\nfrom asyncio import sleep\n\n# example coroutine\nasync def task_coro1():\n    print('Hello from first coro')\n    await sleep(1)\n\n# another example coroutine\nasync def task_coro2():\n    print('Hello from second coro')\n    await sleep(1)\n\n# entry point of the program\nwith Runner() as runner:\n    # execute the first coroutine\n    runner.run(task_coro1())\n    # execute the second coroutine\n    runner.run(task_coro2())\n</code></pre> <p>Running the example creates the asyncio.Runner using the context manager interface.</p> <p>The first coroutine is run, then the second.</p> <p>Each coroutine is executed in the same event loop and the loop used is not created until the first call to run().</p> <pre><code>Hello from first coro\nHello from second coro\n</code></pre> <p>This approach provides flexibility to the Python program, allowing it to execute coroutines in an ad hoc and even conditional manner within the same event loop.</p>"},{"location":"asyncio/runner/#\u8fdb\u4e00\u6b65\u9605\u8bfb","title":"\u8fdb\u4e00\u6b65\u9605\u8bfb","text":"\u4e2d\u6587\u539f\u6587 <p>\u672c\u8282\u63d0\u4f9b\u4e86\u60a8\u53ef\u80fd\u4f1a\u89c9\u5f97\u6709\u7528\u7684\u5176\u4ed6\u8d44\u6e90\u3002</p> <p>\u4e66\u7c4d</p> <ul> <li>Python Asyncio Jump-Start, Jason Brownlee, 2022 (my book).</li> <li>Python Asyncio Interview Questions</li> <li>Asyncio Module API Cheat Sheet</li> </ul> <p>\u6211\u8fd8\u63a8\u8350\u4ee5\u4e0b\u4e66\u7c4d:</p> <ul> <li>Python Concurrency with asyncio, Matthew Fowler, 2022.</li> <li>Using Asyncio in Python, Caleb Hattingh, 2020.</li> </ul> <p>\u6307\u5357</p> <ul> <li>Python Asyncio: The Complete Guide</li> </ul> <p>APIs</p> <ul> <li>asyncio \u2014 Asynchronous I/O</li> <li>Asyncio Coroutines and Tasks</li> <li>Asyncio Streams</li> <li>Asyncio Subprocesses</li> <li>Asyncio Queues</li> <li>Asyncio Synchronization Primitives</li> </ul> <p>\u53c2\u8003</p> <ul> <li>Asynchronous I/O, Wikipedia.</li> <li>Coroutine, Wikipedia.</li> </ul> <p>Further Reading</p> <p>This section provides additional resources that you may find helpful.</p> <p>Books</p> <ul> <li>Python Asyncio Jump-Start, Jason Brownlee, 2022 (my book).</li> <li>Python Asyncio Interview Questions</li> <li>Asyncio Module API Cheat Sheet</li> </ul> <p>I also recommend the following books:</p> <ul> <li>Python Concurrency with asyncio, Matthew Fowler, 2022.</li> <li>Using Asyncio in Python, Caleb Hattingh, 2020.</li> </ul> <p>Guides</p> <ul> <li>Python Asyncio: The Complete Guide</li> </ul> <p>APIs</p> <ul> <li>asyncio \u2014 Asynchronous I/O</li> <li>Asyncio Coroutines and Tasks</li> <li>Asyncio Streams</li> <li>Asyncio Subprocesses</li> <li>Asyncio Queues</li> <li>Asyncio Synchronization Primitives</li> </ul> <p>References</p> <ul> <li>Asynchronous I/O, Wikipedia.</li> <li>Coroutine, Wikipedia.</li> </ul>"},{"location":"asyncio/task_group/","title":"\u5982\u4f55\u4f7f\u7528 asyncio.TaskGroup","text":"<p>\u8f6c\u81ea: https://superfastpython.com/asyncio-taskgroup/</p> \u4e2d\u6587\u539f\u6587 <p>\u60a8\u53ef\u4ee5\u4f7f\u7528 asyncio.TaskGroup \u7c7b\u5c06 asyncio.Task \u5bf9\u8c61\u96c6\u5408\u4f5c\u4e3a\u4e00\u4e2a\u7ec4\u8fdb\u884c\u7ba1\u7406\u3002</p> <p>asyncio.TaskGroup \u5c06\u5141\u8bb8\u521b\u5efa\u4efb\u52a1\u3001\u8ddf\u8e2a\u5df2\u53d1\u51fa\u7684\u4efb\u52a1\u3001\u5728\u4e00\u4e2a\u4efb\u52a1\u5931\u8d25\u65f6\u53d6\u6d88\u6240\u6709\u4efb\u52a1\uff0c\u5e76\u5141\u8bb8\u4e00\u8d77\u7b49\u5f85\u7ec4\u4e2d\u7684\u6240\u6709\u4efb\u52a1\u3002</p> <p>\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u60a8\u5c06\u4e86\u89e3\u5982\u4f55\u5728 Python \u4e2d\u4f7f\u7528 asyncio.TaskGroup\u3002</p> <p>\u8ba9\u6211\u4eec\u5f00\u59cb\u5427\u3002</p> <p>How to use asyncio.TaskGroup</p> <p>You can manage a collection of asyncio.Task objects as a group using the asyncio.TaskGroup class.</p> <p>The asyncio.TaskGroup will allow tasks to be created, keep track of issued tasks, cancel all tasks if one task fails, and allow all tasks in the group to be awaited together.</p> <p>In this tutorial, you will discover how to use the asyncio.TaskGroup in Python.</p> <p>Let\u2019s get started.</p>"},{"location":"asyncio/task_group/#\u9700\u8981\u5c06\u591a\u4e2a\u534f\u7a0b\u4f5c\u4e3a\u4e00\u4e2a\u7ec4\u8fdb\u884c\u7ba1\u7406","title":"\u9700\u8981\u5c06\u591a\u4e2a\u534f\u7a0b\u4f5c\u4e3a\u4e00\u4e2a\u7ec4\u8fdb\u884c\u7ba1\u7406","text":"\u4e2d\u6587\u539f\u6587 <p>\u53d1\u51fa\u8bb8\u591a\u534f\u7a0b\u7136\u540e\u5c06\u5b83\u4eec\u4f5c\u4e3a\u4e00\u4e2a\u7ec4\u8fdb\u884c\u7ba1\u7406\u662f\u5f88\u5e38\u89c1\u7684\u3002</p> <p>\u5c06\u591a\u4e2a\u534f\u7a0b\u89c6\u4e3a\u4e00\u4e2a\u7ec4\u53ef\u4ee5\u5b9e\u73b0\u4ee5\u4e0b\u529f\u80fd\uff1a</p> <ol> <li>\u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210\u3002</li> <li>\u5982\u679c\u4e00\u9879\u4efb\u52a1\u5931\u8d25\uff0c\u5219\u53d6\u6d88\u6240\u6709\u4efb\u52a1\u3002</li> <li>\u5904\u7406\u4efb\u4f55\u4efb\u52a1\u4e2d\u5f15\u53d1\u7684\u5f02\u5e38\u3002</li> </ol> <p>\u5728 Python 3.11 \u4e4b\u524d\uff0c\u6709\u4e24\u79cd\u4e3b\u8981\u65b9\u6cd5\u5c06\u591a\u4e2a\u534f\u7a0b\u4f5c\u4e3a\u4e00\u4e2a\u7ec4\u8fdb\u884c\u5904\u7406\uff0c\u5b83\u4eec\u662f\uff1a</p> <ul> <li>\u8c03\u7528 asyncio.gather()</li> <li>\u8c03\u7528 asyncio.wait()</li> </ul> <p>Need To Manage Multiple Coroutines as a Group</p> <p>It is common to issue many coroutines and then manage them as a group.</p> <p>Treating multiple coroutines as a group allows for functionality such as:</p> <ol> <li>Waiting until all tasks are completed.</li> <li>Canceling all tasks if one task fails.</li> <li>Handling an exception raised in any task.</li> </ol> <p>Prior to Python 3.11, there were two main approaches to handling multiple coroutines as a group, they were:</p> <ul> <li>Call asyncio.gather()</li> <li>Call asyncio.wait()</li> </ul>"},{"location":"asyncio/task_group/#\u4f7f\u7528-asynciogather-\u7ba1\u7406\u591a\u4e2a\u534f\u7a0b","title":"\u4f7f\u7528 asyncio.gather() \u7ba1\u7406\u591a\u4e2a\u534f\u7a0b","text":"\u4e2d\u6587\u539f\u6587 <p>asyncio.gather() \u51fd\u6570\u518d\u63a5\u53d7\u4e00\u4e2a\u534f\u7a0b\u6216 asyncio.Task \u5bf9\u8c61\u3002</p> <p>\u5b83\u8fd4\u56de\u4e00\u4e2a Future \u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u5141\u8bb8\u5c06\u4efb\u52a1\u7ec4\u4e0e\u53d6\u6d88\u6240\u6709\u4efb\u52a1\u548c\u7b49\u5f85\u6240\u6709\u4efb\u52a1\u7b49\u529f\u80fd\u4e00\u8d77\u7ba1\u7406\u3002</p> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173\u5982\u4f55\u4f7f\u7528 asyncio.gather() \u51fd\u6570\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>\u5982\u4f55\u5728 Python \u4e2d\u4f7f\u7528 asyncio.gather()</li> </ul> <p>\u5982\u679c\u7ec4\u4e2d\u7684\u4e00\u9879\u4efb\u52a1\u56e0\u5f02\u5e38\u800c\u5931\u8d25\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u53d6\u6d88\u7ec4\u4e2d\u7684\u6240\u6709\u4efb\u52a1\u3002</p> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u770b\u5230\u8fd9\u6837\u7684\u793a\u4f8b\uff1a</p> <ul> <li>Asyncio Gather() \u5982\u679c\u4e00\u4e2a\u4efb\u52a1\u5931\u8d25\u5219\u53d6\u6d88\u6240\u6709\u4efb\u52a1</li> </ul> <p>Manage Multiple Coroutines with asyncio.gather()</p> <p>The asyncio.gather() function takes one more coroutine or asyncio.Task objects.</p> <p>It returns a Future object that allows the group of tasks to be managed together with features such as canceling all tasks and waiting on all tasks.</p> <p>You can learn more about how to use the asyncio.gather() function in the tutorial:</p> <ul> <li>How to Use asyncio.gather() in Python</li> </ul> <p>It is possible to use cancel all tasks in the group if one task in the group fails with an exception.</p> <p>You can see an example of this in the tutorial:</p> <ul> <li>Asyncio gather() Cancel All Tasks if One Task Fails</li> </ul>"},{"location":"asyncio/task_group/#\u4f7f\u7528-asynciowait-\u7ba1\u7406\u591a\u4e2a\u534f\u7a0b","title":"\u4f7f\u7528 asyncio.wait() \u7ba1\u7406\u591a\u4e2a\u534f\u7a0b","text":"\u4e2d\u6587\u539f\u6587 <p>asyncio.wait() \u51fd\u6570\u63a5\u53d7\u534f\u7a0b\u6216\u4efb\u52a1\u7684\u96c6\u5408\uff0c\u5e76\u8fd4\u56de\u6ee1\u8db3\u6307\u5b9a\u6761\u4ef6\u7684\u4efb\u52a1\u96c6\uff0c\u4f8b\u5982\u4e00\u4e2a\u5b8c\u6210\u3001\u5168\u90e8\u5b8c\u6210\u6216\u7b2c\u4e00\u4e2a\u5931\u8d25\u3002</p> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173\u5982\u4f55\u4f7f\u7528 asyncio.wait() \u51fd\u6570\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>\u5982\u4f55\u5728 Python \u4e2d\u4f7f\u7528 Asyncio wait()</li> </ul> <p>Python 3.11 \u7248\u7684\u53d1\u5e03\u5f15\u5165\u4e86\u4e00\u79cd\u5c06\u591a\u4e2a\u534f\u7a0b\u6216\u4efb\u52a1\u4f5c\u4e3a\u4e00\u4e2a\u7ec4\u8fdb\u884c\u7ba1\u7406\u7684\u65b0\u65b9\u6cd5\uff0c\u79f0\u4e3a asyncio.TaskGroup\u3002</p> <p>Manage Multiple Coroutines with asyncio.wait()</p> <p>The asyncio.wait() function takes a collection of coroutines or tasks and returns the set of tasks that meet the specified conditions, such as one completed, all completed or first to fail.</p> <p>You can learn more about how to use the asyncio.wait() function in the tutorial:</p> <ul> <li>How to Use Asyncio wait() in Python</li> </ul> <p>The release of Python version 3.11 introduced a new approach to managing multiple coroutines or tasks as a group, called the asyncio.TaskGroup.</p>"},{"location":"asyncio/task_group/#\u5982\u4f55\u4f7f\u7528-asynciotaskgroup-\u7c7b","title":"\u5982\u4f55\u4f7f\u7528 asyncio.TaskGroup \u7c7b","text":"\u4e2d\u6587\u539f\u6587 <p>Python 3.11 \u5f15\u5165\u4e86 asyncio.TaskGroup \u4efb\u52a1\u6765\u7ba1\u7406\u4e00\u7ec4\u5173\u8054\u7684 asyncio \u4efb\u52a1\u3002</p> <p>\u6dfb\u52a0\u4e86 TaskGroup \u7c7b\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c\u5305\u542b\u4e00\u7ec4\u4efb\u52a1\uff0c\u5728\u9000\u51fa\u65f6\u5c06\u7b49\u5f85\u6240\u6709\u4efb\u52a1\u3002 \u5bf9\u4e8e\u65b0\u4ee3\u7801\uff0c\u5efa\u8bae\u76f4\u63a5\u4f7f\u7528 create_task() \u548c Gather()\u3002</p> <p>\u2014 Python 3.11 \u7684\u65b0\u529f\u80fd</p> <p>asyncio.TaskGroup \u7c7b\u65e8\u5728\u66ff\u4ee3\u7528\u4e8e\u521b\u5efa\u4efb\u52a1\u7684 asyncio.create_task() \u51fd\u6570\u548c\u7528\u4e8e\u7b49\u5f85\u4e00\u7ec4\u4efb\u52a1\u7684 asyncio.gather() \u51fd\u6570\u3002</p> <p>\u4ece\u5386\u53f2\u4e0a\u770b\uff0c\u6211\u4eec\u4f7f\u7528 asyncio.create_task() \u51fd\u6570\u521b\u5efa\u5e76\u53d1\u51fa\u4e00\u4e2a\u534f\u7a0b\u4f5c\u4e3a asyncio.Task\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u534f\u7a0b\u5e76\u5c06\u5176\u4f5c\u4e3a\u4efb\u52a1\u53d1\u51fa\ntask = asyncio.create_task(coro())\n</code></pre> <p>\u8fd9\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 asyncio.Task \u5bf9\u8c61\uff0c\u5e76\u5c06\u5176\u53d1\u9001\u5230 asyncio \u4e8b\u4ef6\u5faa\u73af\u4ee5\u4fbf\u5c3d\u5feb\u6267\u884c\u3002</p> <p>\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u7b49\u5f85\u4efb\u52a1\u5e76\u7b49\u5f85\u5b83\u5b8c\u6210\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u5c06\u534f\u7a0b\u4f5c\u4e3a\u4efb\u52a1\u53d1\u51fa\u5e76\u7b49\u5f85\u5b83\u4eec\u5b8c\u6210\nresults = await asyncio.gather(coro1(), coro2(), coro2)\n</code></pre> <p>asyncio.TaskGroup \u53ef\u4ee5\u6267\u884c\u8fd9\u4e24\u9879\u6d3b\u52a8\uff0c\u4f46\u4e0d\u662f\u9996\u9009\u65b9\u6cd5\u3002</p> <p>\u4fdd\u5b58\u4e00\u7ec4\u4efb\u52a1\u7684\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002 \u53ef\u4ee5\u4f7f\u7528 create_task() \u5c06\u4efb\u52a1\u6dfb\u52a0\u5230\u7ec4\u4e2d\u3002 \u5f53\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u9000\u51fa\u65f6\uff0c\u6240\u6709\u4efb\u52a1\u90fd\u5c06\u7b49\u5f85\u3002</p> <p>\u2014 \u5f02\u6b65\u4efb\u52a1\u7ec4</p> <p>How to Use asyncio.TaskGroup</p> <p>Python 3.11 introduce the asyncio.TaskGroup task for managing a group of associated asyncio task.</p> <p>Added the TaskGroup class, an asynchronous context manager holding a group of tasks that will wait for all of them upon exit. For new code this is recommended over using create_task() and gather() directly.</p> <p>\u2014 WHAT\u2019S NEW IN PYTHON 3.11</p> <p>The asyncio.TaskGroup class is intended as a replacement for the asyncio.create_task() function for creating tasks and the asyncio.gather() function for waiting on a group of tasks.</p> <p>Historically, we create and issue a coroutine as an asyncio.Task using the asyncio.create_task() function.</p> <p>For example:</p> <pre><code>...\n# create and issue coroutine as task\ntask = asyncio.create_task(coro())\n</code></pre> <p>This creates a new asyncio.Task object and issues it to the asyncio event loop for execution as soon as it is able.</p> <p>We can then choose to await the task and wait for it to be completed.</p> <p>For example:</p> <pre><code>...\n# issue coroutines as tasks and wait for them to complete\nresults = await asyncio.gather(coro1(), coro2(), coro2)\n</code></pre> <p>The asyncio.TaskGroup can perform both of these activities and is not the preferred approach.</p> <p>An asynchronous context manager holding a group of tasks. Tasks can be added to the group using create_task(). All tasks are awaited when the context manager exits.</p> <p>\u2014 ASYNCIO TASK GROUPS</p>"},{"location":"asyncio/task_group/#\u5982\u4f55\u521b\u5efa-asynciotaskgroup","title":"\u5982\u4f55\u521b\u5efa asyncio.TaskGroup","text":"\u4e2d\u6587\u539f\u6587 <p>asyncio.TaskGroup \u5bf9\u8c61\u5b9e\u73b0\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u63a5\u53e3\uff0c\u8fd9\u662f\u8be5\u7c7b\u7684\u9996\u9009\u7528\u6cd5\u3002</p> <p>\u8fd9\u610f\u5473\u7740\u8be5\u7c7b\u7684\u5b9e\u4f8b\u88ab\u521b\u5efa\u5e76\u901a\u8fc7\u201casync with\u201d\u8868\u8fbe\u5f0f\u4f7f\u7528\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u4efb\u52a1\u7ec4\nasync with asyncio.TaskGroup() as group:\n    # ...\n</code></pre> <p>\u5982\u679c\u60a8\u4e0d\u719f\u6089 \u201casync with\u201d \u8868\u8fbe\u5f0f\uff0c\u8bf7\u53c2\u9605\u6559\u7a0b\uff1a</p> <ul> <li>\u5982\u4f55\u5728 Python \u4e2d\u4f7f\u7528 \u201casync with\u201d \u8868\u8fbe\u5f0f</li> </ul> <p>\u56de\u60f3\u4e00\u4e0b\uff0c\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5b9e\u73b0\u4e86\u53ef\u4ee5\u7b49\u5f85\u7684 __aenter__() \u548c __aexit__() \u65b9\u6cd5\u3002</p> <p>\u5bf9\u4e8e asyncio.TaskGroup\uff0c\u9000\u51fa\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5757\u65f6\u81ea\u52a8\u8c03\u7528asyncio.TaskGroup \u7684 __aexit__() \u65b9\u6cd5\u5e76\u7b49\u5f85\u521b\u5efa\u7684\u6240\u6709\u4efb\u52a1 \u3002</p> <p>\u8fd9\u610f\u5473\u7740\u6b63\u5e38\u6216\u901a\u8fc7\u5f02\u5e38\u9000\u51fa TaskGroup \u5bf9\u8c61\u7684\u5757\u5c06\u81ea\u52a8\u7b49\u5f85\uff0c\u76f4\u5230\u6240\u6709\u7ec4\u4efb\u52a1\u5b8c\u6210\u3002</p> <pre><code>...\n# \u521b\u5efa\u4efb\u52a1\u7ec4\nasync with asyncio.TaskGroup() as group:\n    # ...\n# \u7b49\u5f85\u6240\u6709\u5c0f\u7ec4\u4efb\u52a1\u5b8c\u6210\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>Python \u4e2d\u7684\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668</li> </ul> <p>How to Create an asyncio.TaskGroup</p> <p>An asyncio.TaskGroup object implements the asynchronous context manager interface, and this is the preferred usage of the class.</p> <p>This means that an instance of the class is created and is used via the \u201casync with\u201d expression.</p> <p>For example:</p> <pre><code>...\n# create a taskgroup\nasync with asyncio.TaskGroup() as group:\n    # ...\n</code></pre> <p>If you are new to the \u201casync with\u201d expression, see the tutorial:</p> <ul> <li>How to Use the \u201casync with\u201d Expression in Python</li> </ul> <p>Recall that an asynchronous context manager implements the __aenter__() and __aexit__() methods which can be awaited.</p> <p>In the case of the asyncio.TaskGroup, the __aexit__() method which is called automatically when the context manager block is exited will await all tasks created by the asyncio.TaskGroup.</p> <p>This means that exiting the TaskGroup object\u2019s block normally or via an exception will automatically await until all group tasks are done.</p> <pre><code>...\n# create a taskgroup\nasync with asyncio.TaskGroup() as group:\n    # ...\n# wait for all group tasks are done\n</code></pre> <p>You can learn more about asynchronous context managers in the tutorial:</p> <ul> <li>Asynchronous Context Managers in Python</li> </ul>"},{"location":"asyncio/task_group/#\u5982\u4f55\u4f7f\u7528-asynciotaskgroup-\u521b\u5efa\u4efb\u52a1","title":"\u5982\u4f55\u4f7f\u7528 asyncio.TaskGroup \u521b\u5efa\u4efb\u52a1","text":"\u4e2d\u6587\u539f\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 asyncio.TaskGroup \u5bf9\u8c61\u4e0a\u7684 create_task() \u65b9\u6cd5\u5728\u4efb\u52a1\u7ec4\u4e2d\u521b\u5efa\u4efb\u52a1\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u4efb\u52a1\u7ec4\nasync with asyncio.TaskGroup() as group:\n    # \u521b\u5efa\u5e76\u53d1\u51fa\u4efb\u52a1\n    task = group.create_task(coro())\n</code></pre> <p>\u8fd9\u5c06\u521b\u5efa\u4e00\u4e2a asyncio.Task \u5bf9\u8c61\u5e76\u5c06\u5176\u53d1\u9001\u5230 asyncio \u4e8b\u4ef6\u5faa\u73af\u6765\u6267\u884c\uff0c\u5c31\u50cf asyncio.create_task() \u51fd\u6570\u4e00\u6837\uff0c\u53ea\u4e0d\u8fc7\u8be5\u4efb\u52a1\u4e0e\u7ec4\u5173\u8054\u3002</p> <p>\u5982\u679c\u6211\u4eec\u9009\u62e9\u5e76\u5f97\u5230\u7ed3\u679c\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7b49\u5f85\u4efb\u52a1\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u4efb\u52a1\u7ec4\nasync with asyncio.TaskGroup() as group:\n    # \u521b\u5efa\u5e76\u53d1\u51fa\u4efb\u52a1\n    esult = await group.create_task(coro())\n</code></pre> <p>\u4f7f\u7528 asyncio.TaskGroup \u7684\u597d\u5904\u662f\u6211\u4eec\u53ef\u4ee5\u5728\u7ec4\u4e2d\u53d1\u51fa\u591a\u4e2a\u4efb\u52a1\u5e76\u5728\u5176\u95f4\u6267\u884c\u4ee3\u7801\u3002 \u4f8b\u5982\u68c0\u67e5\u7ed3\u679c\u6216\u6536\u96c6\u66f4\u591a\u6570\u636e\u3002</p> <p>How to Create Tasks Using asyncio.TaskGroup</p> <p>We can create a task in the task group via the create_task() method on the asyncio.TaskGroup object.</p> <p>For example:</p> <pre><code>...\n# create a taskgroup\nasync with asyncio.TaskGroup() as group:\n    # create and issue a task\n    task = group.create_task(coro())\n</code></pre> <p>This will create an asyncio.Task object and issue it to the asyncio event loop for execution, just like the asyncio.create_task() function, except that the task is associated with the group.</p> <p>We can await the task directly if we choose and get results.</p> <p>For example:</p> <pre><code>...\n# create a taskgroup\nasync with asyncio.TaskGroup() as group:\n    # create and issue a task\n    esult = await group.create_task(coro())\n</code></pre> <p>The benefit of using the asyncio.TaskGroup is that we can issue multiple tasks in the group and execute code in between. such as checking results or gathering more data.</p>"},{"location":"asyncio/task_group/#\u5982\u4f55\u4f7f\u7528-asynciotaskgroup-\u7b49\u5f85\u4efb\u52a1","title":"\u5982\u4f55\u4f7f\u7528 asyncio.TaskGroup \u7b49\u5f85\u4efb\u52a1","text":"\u4e2d\u6587\u539f\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u9000\u51fa\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5757\u6765\u7b49\u5f85\u7ec4\u4e2d\u7684\u6240\u6709\u4efb\u52a1\u3002</p> <p>\u56e0\u6b64\uff0c\u4efb\u52a1\u4f1a\u81ea\u52a8\u7b49\u5f85\uff0c\u4e0d\u9700\u8981\u4efb\u4f55\u989d\u5916\u7684\u64cd\u4f5c\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u4efb\u52a1\u7ec4\nasync with asyncio.TaskGroup() as group:\n    # ...\n# \u7b49\u5f85\u6240\u6709\u5c0f\u7ec4\u4efb\u52a1\u5b8c\u6210\n</code></pre> <p>\u5982\u679c\u8fd9\u79cd\u884c\u4e3a\u4e0d\u662f\u9996\u9009\uff0c\u90a3\u4e48\u6211\u4eec\u5fc5\u987b\u786e\u4fdd\u5728\u9000\u51fa\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u4e4b\u524d\u6240\u6709\u4efb\u52a1\u90fd\u201c\u5b8c\u6210(done)\u201d\uff08\u5b8c\u6210\u3001\u53d6\u6d88\u6216\u5931\u8d25\uff09\u3002</p> <p>How to Wait on Tasks Using asyncio.TaskGroup</p> <p>We can wait on all tasks in the group by exiting the asynchronous context manager block.</p> <p>As such, the tasks are awaited automatically and nothing additional is required.</p> <p>For example:</p> <pre><code>...\n# create a taskgroup\nasync with asyncio.TaskGroup() as group:\n    # ...\n# wait for all group tasks are done\n</code></pre> <p>If this behavior is not preferred, then we must ensure all tasks are \u201cdone\u201d (finished, canceled, or failed) before exiting the context manager.</p>"},{"location":"asyncio/task_group/#\u5982\u679c\u4e00\u9879\u4efb\u52a1\u5931\u8d25\u5982\u4f55\u4f7f\u7528-asynciotaskgroup-\u53d6\u6d88\u6240\u6709\u4efb\u52a1","title":"\u5982\u679c\u4e00\u9879\u4efb\u52a1\u5931\u8d25\uff0c\u5982\u4f55\u4f7f\u7528 asyncio.TaskGroup \u53d6\u6d88\u6240\u6709\u4efb\u52a1","text":"\u4e2d\u6587\u539f\u6587 <p>\u5982\u679c\u7ec4\u4e2d\u7684\u4e00\u9879\u4efb\u52a1\u56e0\u5f02\u5e38\u800c\u5931\u8d25\uff0c\u5219\u7ec4\u4e2d\u5269\u4f59\u7684\u6240\u6709\u672a\u5b8c\u6210\u7684\u4efb\u52a1\u5c06\u88ab\u53d6\u6d88\u3002</p> <p>\u8fd9\u662f\u81ea\u52a8\u6267\u884c\u7684\uff0c\u4e0d\u9700\u8981\u4efb\u4f55\u989d\u5916\u7684\u4ee3\u7801\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code># \u5904\u7406\u7ec4\u4e2d\u4efb\u4f55\u4efb\u52a1\u7684\u5931\u8d25\ntry:\n    ...\n    # \u521b\u5efa\u4efb\u52a1\u7ec4\n    async with asyncio.TaskGroup() as group:\n        # \u521b\u5efa\u5e76\u53d1\u51fa\u4efb\u52a1\n        task1 = group.create_task(coro1())\n        # \u521b\u5efa\u5e76\u53d1\u51fa\u4efb\u52a1\n        task2 = group.create_task(coro2())\n        # \u521b\u5efa\u5e76\u53d1\u51fa\u4efb\u52a1\n        task3 = group.create_task(coro3())\n    # \u7b49\u5f85\u6240\u6709\u5c0f\u7ec4\u4efb\u52a1\u5b8c\u6210\nexcept:\n    # \u6240\u6709\u672a\u5b8c\u6210\u7684\u4efb\u52a1\u90fd\u88ab\u53d6\u6d88\n    pass\n</code></pre> <p>\u5982\u679c\u8fd9\u79cd\u884c\u4e3a\u4e0d\u662f\u9996\u9009\uff0c\u5219\u5fc5\u987b\u5728\u4efb\u52a1\u672c\u8eab\u5185\u7ba1\u7406\u6bcf\u4e2a\u4efb\u52a1\u7684\u5931\u8d25\uff0c\u4f8b\u5982 \u901a\u8fc7\u534f\u7a0b\u5185\u7684 try- except \u5757\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u5982\u4f55\u4f7f\u7528 asyncio.TaskGroup\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e9b\u6709\u6548\u7684\u793a\u4f8b\u3002</p> <p>How to Cancel All Tasks If One Task Fails Using asyncio.TaskGroup</p> <p>If one task in the group fails with an exception, then all non-done tasks remaining in the group will be canceled.</p> <p>This is performed automatically and does not require any additional code.</p> <p>For example:</p> <pre><code># handle the failure of any tasks in the group\ntry:\n    ...\n    # create a taskgroup\n    async with asyncio.TaskGroup() as group:\n        # create and issue a task\n        task1 = group.create_task(coro1())\n        # create and issue a task\n        task2 = group.create_task(coro2())\n        # create and issue a task\n        task3 = group.create_task(coro3())\n    # wait for all group tasks are done\nexcept:\n    # all non-done tasks are cancelled\n    pass\n</code></pre> <p>If this behavior is not preferred, then the failure of each task must be managed within the tasks themselves, e.g. by a try-except block within the coroutine.</p> <p>Now that we know how to use the asyncio.TaskGroup, let\u2019s look at some worked examples.</p>"},{"location":"asyncio/task_group/#\u4f7f\u7528taskgroup\u7b49\u5f85\u591a\u4e2a\u4efb\u52a1\u7684\u793a\u4f8b","title":"\u4f7f\u7528TaskGroup\u7b49\u5f85\u591a\u4e2a\u4efb\u52a1\u7684\u793a\u4f8b","text":"\u4e2d\u6587\u539f\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u63a2\u7d22\u5728 asyncio.TaskGroup \u4e2d\u521b\u5efa\u591a\u4e2a\u4efb\u52a1\uff0c\u7136\u540e\u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210\u7684\u60c5\u51b5\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u9996\u5148\u5b9a\u4e49\u4e00\u7ec4\u4ee3\u8868\u6211\u4eec\u60f3\u8981\u5b8c\u6210\u7684\u4efb\u52a1\u7684\u4e0d\u540c\u534f\u7a0b\u6765\u5b9e\u73b0\u3002</p> <p>\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u5b9a\u4e49 3 \u4e2a\u534f\u7a0b\uff0c\u6bcf\u4e2a\u534f\u7a0b\u62a5\u544a\u4e0d\u540c\u7684\u6d88\u606f\uff0c\u7136\u540e\u4f11\u7720\u4e00\u79d2\u949f\u3002</p> <pre><code># \u534f\u7a0b\u4efb\u52a1\nasync def task1():\n    # \u62a5\u544a\u6d88\u606f\n    print('Hello from coroutine 1')\n    # sleep \u6765\u6a21\u62df\u7b49\u5f85\n    await asyncio.sleep(1)\n\n# \u534f\u7a0b\u4efb\u52a1\nasync def task2():\n    # \u62a5\u544a\u6d88\u606f\n    print('Hello from coroutine 2')\n    # sleep \u6765\u6a21\u62df\u7b49\u5f85\n    await asyncio.sleep(1)\n\n# \u534f\u7a0b\u4efb\u52a1\nasync def task3():\n    # \u62a5\u544a\u6d88\u606f\n    print('Hello from coroutine 3')\n    # sleep \u6765\u6a21\u62df\u7b49\u5f85\n    await asyncio.sleep(1)\n</code></pre> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a main() \u534f\u7a0b\uff0c\u5b83\u901a\u8fc7\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u63a5\u53e3\u521b\u5efa asyncio.TaskGroup\u3002</p> <pre><code># \u5f02\u6b65\u5165\u53e3\u70b9\nasync def main():\n    # \u521b\u5efa\u4efb\u52a1\u7ec4\n    async with asyncio.TaskGroup() as group:\n    # ...\n</code></pre> <p>\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u6bcf\u4e2a\u534f\u7a0b\u5e76\u5c06\u5176\u4f5c\u4e3a\u4efb\u52a1\u53d1\u9001\u5230\u4e8b\u4ef6\u5faa\u73af\u4e2d\uff0c\u5c3d\u7ba1\u5b83\u4eec\u4f5c\u4e3a\u7ec4\u7684\u4e00\u90e8\u5206\u6536\u96c6\u5728\u4e00\u8d77\u3002</p> <pre><code>...\n# \u8fd0\u884c\u7b2c\u4e00\u4e2a\u4efb\u52a1\ngroup.create_task(task1())\n# \u8fd0\u884c\u7b2c\u4e8c\u4e2a\u4efb\u52a1\ngroup.create_task(task2())\n# \u8fd0\u884c\u7b2c\u4e09\u4e2a\u4efb\u52a1\ngroup.create_task(task3())\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u4fdd\u7559\u5bf9 asyncio.Task \u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u56e0\u4e3a asyncio.TaskGroup \u5c06\u4e3a\u6211\u4eec\u8ddf\u8e2a\u5b83\u4eec\u3002</p> <p>\u53e6\u5916\uff0c\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u7b49\u5f85\u4efb\u52a1\uff0c\u56e0\u4e3a\u5f53\u6211\u4eec\u9000\u51fa asyncio.TaskGroup \u7684\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5757\u65f6\uff0c\u6211\u4eec\u5c06\u7b49\u5f85\u7ec4\u4e2d\u7684\u6240\u6709\u4efb\u52a1\u3002</p> <p>\u5c06\u5b83\u4eec\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u4e0b\u9762\u5217\u51fa\u4e86\u5b8c\u6574\u7684\u793a\u4f8b\u3002</p> <pre><code># asyncio \u4efb\u52a1\u7ec4\u793a\u4f8b\nimport asyncio\n\n# \u534f\u7a0b\u4efb\u52a1\nasync def task1():\n    # \u62a5\u544a\u6d88\u606f\n    print('Hello from coroutine 1')\n    # sleep \u6765\u6a21\u62df\u7b49\u5f85\n    await asyncio.sleep(1)\n\n# \u534f\u7a0b\u4efb\u52a1\nasync def task2():\n    # \u62a5\u544a\u6d88\u606f\n    print('Hello from coroutine 2')\n    # sleep \u6765\u6a21\u62df\u7b49\u5f85\n    await asyncio.sleep(1)\n\n# \u534f\u7a0b\u4efb\u52a1\nasync def task3():\n    # \u62a5\u544a\u6d88\u606f\n    print('Hello from coroutine 3')\n    # sleep \u6765\u6a21\u62df\u7b49\u5f85\n    await asyncio.sleep(1)\n\n# \u5f02\u6b65\u5165\u53e3\u70b9\nasync def main():\n    # \u521b\u5efa\u4efb\u52a1\u7ec4\n    async with asyncio.TaskGroup() as group:\n        # \u8fd0\u884c\u7b2c\u4e00\u4e2a\u4efb\u52a1\n        group.create_task(task1())\n        # \u8fd0\u884c\u7b2c\u4e8c\u4e2a\u4efb\u52a1\n        group.create_task(task2())\n        # \u8fd0\u884c\u7b2c\u4e09\u4e2a\u4efb\u52a1\n        group.create_task(task3())\n    # \u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210...\n    print('Done')\n\n# \u5165\u53e3\u70b9\nasyncio.run(main())\n</code></pre> <p>\u8fd0\u884c\u793a\u4f8b\u9996\u5148\u6267\u884c main() \u534f\u7a0b\uff0c\u4e3a\u6211\u4eec\u542f\u52a8\u4e00\u4e2a\u65b0\u7684\u4e8b\u4ef6\u5faa\u73af\u3002</p> <p>main() \u534f\u7a0b\u8fd0\u884c\u5e76\u521b\u5efa\u4e00\u4e2a asyncio.TaskGroup\u3002</p> <p>\u7136\u540e\uff0c\u6240\u6709\u4e09\u4e2a\u534f\u7a0b\u90fd\u521b\u5efa\u4e3a asyncio.Task \u5bf9\u8c61\uff0c\u5e76\u901a\u8fc7 asyncio.TaskGroup \u53d1\u9001\u5230\u4e8b\u4ef6\u5faa\u73af\u3002</p> <p>asyncio.TaskGroup \u7684\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5757\u5df2\u9000\u51fa\uff0c\u5b83\u4f1a\u81ea\u52a8\u7b49\u5f85\u6240\u6709\u4e09\u4e2a\u4efb\u52a1\u3002</p> <p>\u4efb\u52a1\u62a5\u544a\u5b83\u4eec\u7684\u6d88\u606f\u5e76\u4f11\u7720\u3002</p> <p>\u6240\u6709\u4efb\u52a1\u5b8c\u6210\u540e\uff0cmain() \u534f\u7a0b\u4f1a\u62a5\u544a\u6700\u7ec8\u6d88\u606f\u3002</p> <pre><code>Hello from coroutine 1\nHello from coroutine 2\nHello from coroutine 3\nDone\n</code></pre> <p>\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u63a2\u8ba8\u5982\u4f55\u5c06 asyncio.TaskGroup \u4e0e\u63a5\u53d7\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7684\u4efb\u52a1\u4e00\u8d77\u4f7f\u7528\u3002</p> <p>Example of Waiting on Multiple Tasks with a TaskGroup</p> <p>We can explore the case of creating multiple tasks within an asyncio.TaskGroup and then waiting for all tasks to complete.</p> <p>This can be achieved by first defining a suite of different coroutines that represent the tasks we want to complete.</p> <p>In this case, we will define 3 coroutines that each report a different message and then sleep for one second.</p> <pre><code># coroutine task\nasync def task1():\n    # report a message\n    print('Hello from coroutine 1')\n    # sleep to simulate waiting\n    await asyncio.sleep(1)\n\n# coroutine task\nasync def task2():\n    # report a message\n    print('Hello from coroutine 2')\n    # sleep to simulate waiting\n    await asyncio.sleep(1)\n\n# coroutine task\nasync def task3():\n    # report a message\n    print('Hello from coroutine 3')\n    # sleep to simulate waiting\n    await asyncio.sleep(1)\n</code></pre> <p>Next, we can define a main() coroutine that creates the asyncio.TaskGroup via the context manager interface.</p> <pre><code># asyncio entry point\nasync def main():\n    # create task group\n    async with asyncio.TaskGroup() as group:\n    # ...\n</code></pre> <p>We can then create and issue each coroutine as a task into the event loop, although collected together as part of the group.</p> <pre><code>...\n# run first task\ngroup.create_task(task1())\n# run second task\ngroup.create_task(task2())\n# run third task\ngroup.create_task(task3())\n</code></pre> <p>Notice that we don\u2019t need to keep a reference to the asyncio.Task objects as the asyncio.TaskGroup will keep track of them for us.</p> <p>Also, notice that we don\u2019t need to await the tasks because when we exit the context manager block for the asyncio.TaskGroup we will await all tasks in the group.</p> <p>Tying this together, the complete example is listed below.</p> <pre><code># example of asyncio task group\nimport asyncio\n\n# coroutine task\nasync def task1():\n    # report a message\n    print('Hello from coroutine 1')\n    # sleep to simulate waiting\n    await asyncio.sleep(1)\n\n# coroutine task\nasync def task2():\n    # report a message\n    print('Hello from coroutine 2')\n    # sleep to simulate waiting\n    await asyncio.sleep(1)\n\n# coroutine task\nasync def task3():\n    # report a message\n    print('Hello from coroutine 3')\n    # sleep to simulate waiting\n    await asyncio.sleep(1)\n\n# asyncio entry point\nasync def main():\n    # create task group\n    async with asyncio.TaskGroup() as group:\n        # run first task\n        group.create_task(task1())\n        # run second task\n        group.create_task(task2())\n        # run third task\n        group.create_task(task3())\n    # wait for all tasks to complete...\n    print('Done')\n\n# entry point\nasyncio.run(main())\n</code></pre> <p>Running the example first executes the main() coroutine, starting a new event loop for us.</p> <p>The main() coroutine runs and creates an asyncio.TaskGroup.</p> <p>All three coroutines are then created as asyncio.Task objects and issued to the event loop via the asyncio.TaskGroup.</p> <p>The context manager block for the asyncio.TaskGroup is exited which automatically awaits all three tasks.</p> <p>The tasks report their message and sleep.</p> <p>Once all tasks are completed the main() coroutine reports a final message.</p> <pre><code>Hello from coroutine 1\nHello from coroutine 2\nHello from coroutine 3\nDone\n</code></pre> <p>Next, let\u2019s explore how we might use an asyncio.TaskGroup with tasks that take arguments and return values.</p>"},{"location":"asyncio/task_group/#\u5e26\u6709\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7684\u4efb\u52a1\u7ec4\u793a\u4f8b","title":"\u5e26\u6709\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7684\u4efb\u52a1\u7ec4\u793a\u4f8b","text":"\u4e2d\u6587\u539f\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u63a2\u7d22\u5c06\u534f\u7a0b\u6267\u884c\u4e3a\u5e26\u6709\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7684\u4efb\u52a1\u7684\u60c5\u51b5\u3002</p> <p>\u8fd9\u4e9b\u5c31\u50cf\u6211\u4eec\u901a\u5e38\u5728\u6ca1\u6709 asyncio.TaskGroup \u7684\u60c5\u51b5\u4e0b\u4f5c\u4e3a\u4efb\u52a1\u53d1\u51fa\u7684\u534f\u7a0b\u4e00\u6837\uff0c\u4f46\u6700\u597d\u6709\u4e00\u4e2a\u793a\u4f8b\u53ef\u4f9b\u53c2\u8003\u3002</p> <p>\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u5b9a\u4e49\u4e00\u4e2a\u4efb\u52a1\uff0c\u8be5\u4efb\u52a1\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff0c\u4f11\u7720\uff0c\u7136\u540e\u8fd4\u56de\u8be5\u53c2\u6570\u4e58\u4ee5 100\u3002</p> <pre><code># \u534f\u7a0b\u4efb\u52a1\nasync def task(value):\n    # sleep \u6765\u6a21\u62df\u7b49\u5f85\n    await asyncio.sleep(1)\n    # \u8fd4\u56de\u503c\n    return value * 100\n</code></pre> <p>\u7136\u540e\uff0c\u4e3b\u534f\u7a0b\u5c06\u521b\u5efa\u4e00\u4e2a asyncio.TaskGroup\uff0c\u7136\u540e\u521b\u5efa\u8be5\u4efb\u52a1\u7684 9 \u4e2a\u5b9e\u4f8b\uff0c\u5e76\u5c06\u503c 1 \u5230 9 \u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u8be5\u4efb\u52a1\u3002</p> <p>\u4fdd\u7559\u4efb\u52a1\u5bf9\u8c61\uff0c\u4ee5\u4fbf\u6211\u4eec\u7a0d\u540e\u53ef\u4ee5\u4ece\u4e2d\u68c0\u7d22\u503c\u3002 \u8fd9\u662f\u4f7f\u7528\u5217\u8868\u7406\u89e3\u6765\u5b9e\u73b0\u7684\u3002</p> <p>\u6240\u6709\u4efb\u52a1\u5b8c\u6210\u540e\uff0c\u5c06\u68c0\u7d22\u5e76\u62a5\u544a\u8fd4\u56de\u503c\u3002</p> <pre><code># \u5f02\u6b65\u5165\u53e3\u70b9\nasync def main():\n    # \u521b\u5efa\u4efb\u52a1\u7ec4\n    async with asyncio.TaskGroup() as group:\n        # \u521b\u5efa\u5e76\u53d1\u5e03\u4efb\u52a1\n        tasks = [group.create_task(task(i)) for i in range(1,10)]\n    # \u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210...\n    # \u62a5\u544a\u6240\u6709\u7ed3\u679c\n    for t in tasks:\n        print(t.result())\n</code></pre> <p>\u5c06\u5b83\u4eec\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u4e0b\u9762\u5217\u51fa\u4e86\u5b8c\u6574\u7684\u793a\u4f8b\u3002</p> <pre><code># \u5177\u6709\u8fd4\u56de\u503c\u7684 asyncio \u4efb\u52a1\u7ec4\u793a\u4f8b\nimport asyncio\n\n# \u534f\u7a0b\u4efb\u52a1\nasync def task(value):\n    # sleep \u6765\u6a21\u62df\u7b49\u5f85\n    await asyncio.sleep(1)\n    # \u8fd4\u56de\u503c\n    return value * 100\n\n# \u5f02\u6b65\u5165\u53e3\u70b9\nasync def main():\n    # \u521b\u5efa\u4efb\u52a1\u7ec4\n    async with asyncio.TaskGroup() as group:\n        # \u521b\u5efa\u5e76\u53d1\u5e03\u4efb\u52a1\n        tasks = [group.create_task(task(i)) for i in range(1,10)]\n    # \u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210...\n    # \u62a5\u544a\u6240\u6709\u7ed3\u679c\n    for t in tasks:\n        print(t.result())\n\n# \u5165\u53e3\u70b9\nasyncio.run(main())\n</code></pre> <p>\u8fd0\u884c\u793a\u4f8b\u9996\u5148\u6267\u884c main() \u534f\u7a0b\uff0c\u4e3a\u6211\u4eec\u542f\u52a8\u4e00\u4e2a\u65b0\u7684\u4e8b\u4ef6\u5faa\u73af\u3002</p> <p>main() \u534f\u7a0b\u8fd0\u884c\u5e76\u521b\u5efa\u4e00\u4e2a asyncio.TaskGroup\u3002</p> <p>\u603b\u5171 9 \u4e2a\u534f\u7a0b\u901a\u8fc7 asyncio.TaskGroup \u4f5c\u4e3a\u4efb\u52a1\u53d1\u51fa\uff0c\u5e76\u4e14 asyncio.Task \u5bf9\u8c61\u5b58\u50a8\u5728\u5217\u8868\u4e2d\u3002</p> <p>\u7136\u540e main() \u534f\u7a0b\u7b49\u5f85\u6240\u6709\u4efb\u52a1\u3002</p> <p>\u6bcf\u4e2a\u4efb\u52a1\u8fd0\u884c\u3001\u4f11\u7720\uff0c\u7136\u540e\u8fd4\u56de\u5176\u8f93\u5165\u53c2\u6570\u7684\u4e00\u767e\u500d\u3002</p> <p>\u6240\u6709\u4efb\u52a1\u5b8c\u6210\u540e\uff0c\u5c06\u8fed\u4ee3 asyncio.Task \u5bf9\u8c61\u5e76\u62a5\u544a\u6bcf\u4e2a\u5bf9\u8c61\u7684\u8fd4\u56de\u503c\u3002</p> <p>\u8fd9\u5c55\u793a\u4e86\u6211\u4eec\u5982\u4f55\u5c06\u53c2\u6570\u4f20\u9012\u7ed9\u901a\u8fc7 asyncio.TaskGroup \u521b\u5efa\u7684\u4efb\u52a1\uff0c\u4ee5\u53ca\u5982\u4f55\u8ddf\u8e2a asyncio.Task \u5bf9\u8c61\uff0c\u4ee5\u4fbf\u5728\u7a0d\u540e\u9636\u6bb5\u624b\u52a8\u68c0\u7d22\u6bcf\u4e2a\u4efb\u52a1\u7684\u7ed3\u679c\u3002</p> <pre><code>100\n200\n300\n400\n500\n600\n700\n800\n900\n</code></pre> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u4e00\u4e2a\u4efb\u52a1\u5931\u8d25\uff0c\u5219\u53d6\u6d88\u7ec4\u4e2d\u7684\u6240\u6709\u4efb\u52a1\u3002</p> <p>Example of TaskGroup with Arguments and Return Values</p> <p>We can explore the case of executing coroutines as tasks that take arguments and return values.</p> <p>These are just like coroutines we might issue normally as tasks without the asyncio.TaskGroup, but it is good to have an example for reference.</p> <p>In this case, we will define a task that takes an argument, sleeps, then returns the argument multiplied by 100.</p> <pre><code># coroutine task\nasync def task(value):\n    # sleep to simulate waiting\n    await asyncio.sleep(1)\n    # return value\n    return value * 100\n</code></pre> <p>The main coroutine will then create an asyncio.TaskGroup and then create 9 instances of the task, passing the value 1 to 9 as arguments to the task.</p> <p>The task objects are kept so we can retrieve the values from them later. This is achieved using a list comprehension.</p> <p>Once all tasks are complete, the return values are retrieved and reported.</p> <pre><code># asyncio entry point\nasync def main():\n    # create task group\n    async with asyncio.TaskGroup() as group:\n        # create and issue tasks\n        tasks = [group.create_task(task(i)) for i in range(1,10)]\n    # wait for all tasks to complete...\n    # report all results\n    for t in tasks:\n        print(t.result())\n</code></pre> <p>Tying this together, the complete example is listed below.</p> <pre><code># example of asyncio task group with return values\nimport asyncio\n\n# coroutine task\nasync def task(value):\n    # sleep to simulate waiting\n    await asyncio.sleep(1)\n    # return value\n    return value * 100\n\n# asyncio entry point\nasync def main():\n    # create task group\n    async with asyncio.TaskGroup() as group:\n        # create and issue tasks\n        tasks = [group.create_task(task(i)) for i in range(1,10)]\n    # wait for all tasks to complete...\n    # report all results\n    for t in tasks:\n        print(t.result())\n\n# entry point\nasyncio.run(main())\n</code></pre> <p>Running the example first executes the main() coroutine, starting a new event loop for us.</p> <p>The main() coroutine runs and creates an asyncio.TaskGroup.</p> <p>A total of 9 coroutines are issued as tasks via the asyncio.TaskGroup and the asyncio.Task objects are stored in a list.</p> <p>The main() coroutine then awaits all tasks.</p> <p>Each task runs, sleeps, then returns its input argument multiples by one hundred.</p> <p>Once all tasks are complete, the asyncio.Task objects are iterated and the return value is reported from each.</p> <p>This shows how we might pass arguments to tasks created via the asyncio.TaskGroup and how we might keep track of asyncio.Task objects in order to manually retrieve results from each task at a later stage.</p> <pre><code>100\n200\n300\n400\n500\n600\n700\n800\n900\n</code></pre> <p>Next, let\u2019s look at an example of canceling all tasks in the group if one task fails.</p>"},{"location":"asyncio/task_group/#\u4f7f\u7528-taskgroup-\u5982\u679c\u4e00\u9879\u4efb\u52a1\u5931\u8d25\u5219\u53d6\u6d88\u6240\u6709\u4efb\u52a1\u7684\u793a\u4f8b","title":"\u4f7f\u7528 TaskGroup \u5982\u679c\u4e00\u9879\u4efb\u52a1\u5931\u8d25\u5219\u53d6\u6d88\u6240\u6709\u4efb\u52a1\u7684\u793a\u4f8b","text":"\u4e2d\u6587\u539f\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u63a2\u8ba8\u5982\u679c\u4e00\u4e2a\u4efb\u52a1\u5931\u8d25\u5219\u53d6\u6d88 asyncio.TaskGroup \u4e2d\u7684\u6240\u6709\u4efb\u52a1\u7684\u60c5\u51b5\u3002</p> <p>\u5931\u8d25\u7684\u4efb\u52a1\u610f\u5473\u7740\u534f\u7a0b\u5728 asyncio.Task \u5bf9\u8c61\u4e2d\u6267\u884c\uff0c\u8be5\u5bf9\u8c61\u5f15\u53d1\u534f\u7a0b\u4e2d\u672a\u5904\u7406\u7684\u5f02\u5e38\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4f1a\u5192\u6ce1\u5230\u4efb\u52a1\u5e76\u5bfc\u81f4\u4efb\u52a1\u63d0\u524d\u505c\u6b62\u3002</p> <p>\u53d1\u51fa\u8bb8\u591a\u4efb\u52a1\u5e76\u5728\u4e00\u9879\u6216\u591a\u9879\u4efb\u52a1\u5931\u8d25\u65f6\u53d6\u6d88\u6240\u6709\u4efb\u52a1\u662f\u5f88\u5e38\u89c1\u7684\u3002</p> <p>asyncio.TaskGroup \u5c06\u4e3a\u6211\u4eec\u81ea\u52a8\u6267\u884c\u6b64\u64cd\u4f5c\u3002</p> <p>\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u5b9a\u4e49 3 \u4e2a\u4e0d\u540c\u7684\u534f\u7a0b\u6765\u62a5\u544a\u6d88\u606f\u548c\u7761\u7720\u3002 \u7136\u540e\uff0c\u7b2c\u4e8c\u4e2a\u534f\u7a0b\u5c06\u5931\u8d25\u5e76\u51fa\u73b0\u672a\u6355\u83b7\u7684\u5f02\u5e38\u3002</p> <pre><code># \u534f\u7a0b\u4efb\u52a1\nasync def task1():\n    # \u62a5\u544a\u6d88\u606f\n    print('Hello from coroutine 1')\n    # sleep \u6765\u6a21\u62df\u7b49\u5f85\n    await asyncio.sleep(1)\n\n# \u534f\u7a0b\u4efb\u52a1\nasync def task2():\n    # \u62a5\u544a\u6d88\u606f\n    print('Hello from coroutine 2')\n    # sleep \u6765\u6a21\u62df\u7b49\u5f85\n    await asyncio.sleep(0.5)\n    # sleep \u6765\u6a21\u62df\u7b49\u5f85\n    raise Exception('Something bad happened')\n\n# \u534f\u7a0b\u4efb\u52a1\nasync def task3():\n    # \u62a5\u544a\u6d88\u606f\n    print('Hello from coroutine 3')\n    # sleep \u6765\u6a21\u62df\u7b49\u5f85\n    await asyncio.sleep(1)\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u5728\u5f15\u53d1\u5f02\u5e38\u4e4b\u524d\uff0c\u7b2c\u4e8c\u4e2a\u4efb\u52a1\u7684\u7761\u7720\u65f6\u95f4\u5c11\u4e8e\u5176\u4ed6\u4e24\u4e2a\u4efb\u52a1\u3002</p> <p>\u8fd9\u662f\u4e3a\u4e86\u786e\u4fdd\u5728\u7b2c\u4e8c\u4e2a\u4efb\u52a1\u5931\u8d25\u65f6\u5176\u4ed6\u4e24\u4e2a\u4efb\u52a1\u4ecd\u5728\u8fd0\u884c\uff0c\u4ee5\u4fbf\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5b83\u4eec\u662f\u5426\u5982\u6211\u4eec\u9884\u671f\u7684\u90a3\u6837\u88ab\u53d6\u6d88\u3002</p> <p>main() \u534f\u7a0b\u5c06\u901a\u8fc7 asyncio.TaskGroup \u53d1\u51fa\u6240\u6709\u4efb\u52a1\uff0c\u7136\u540e\u5728\u6240\u6709\u4efb\u52a1\u201c\u5b8c\u6210\u201d\u540e\u4f9d\u6b21\u62a5\u544a\u6bcf\u4e2a\u4efb\u52a1\u7684\u5b8c\u6210\u548c\u53d6\u6d88\u72b6\u6001\u3002</p> <p>\u56de\u60f3\u4e00\u4e0b\uff0c\u201c\u5b8c\u6210\u201d\u4efb\u52a1\u662f\u6307\u6b63\u5e38\u5b8c\u6210\u3001\u53d6\u6d88\u6216\u56e0\u5f02\u5e38\u800c\u5931\u8d25\u7684\u4efb\u52a1\u3002</p> <pre><code># \u5f02\u6b65\u5165\u53e3\u70b9\nasync def main():\n    # \u5904\u7406\u5f02\u5e38\n    try:\n        # \u521b\u5efa\u4efb\u52a1\u7ec4\n        async with asyncio.TaskGroup() as group:\n            # \u8fd0\u884c\u7b2c\u4e00\u4e2a\u4efb\u52a1\n            t1 = group.create_task(task1())\n            # \u8fd0\u884c\u7b2c\u4e8c\u4e2a\u4efb\u52a1\n            t2 = group.create_task(task2())\n            # \u8fd0\u884c\u7b2c\u4e09\u4e2a\u4efb\u52a1\n            t3 = group.create_task(task3())\n    except:\n        pass\n    # \u68c0\u67e5\u6bcf\u4e2a\u4efb\u52a1\u7684\u72b6\u6001\n    print(f'Task1: done={t1.done()}, cancelled={t1.cancelled()}')\n    print(f'Task2: done={t2.done()}, cancelled={t2.cancelled()}')\n    print(f'Task3: done={t3.done()}, cancelled={t3.cancelled()}')\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u5c06\u6574\u4e2a asyncio.TaskGroup \u5305\u88c5\u5728\u5f02\u5e38\u4e2d\uff0c\u56e0\u4e3a\u4efb\u52a1\u4e2d\u53d1\u751f\u7684\u4efb\u4f55\u672a\u6355\u83b7\u7684\u5f02\u5e38\u90fd\u4f1a\u7531 asyncio.TaskGroup \u91cd\u65b0\u5f15\u53d1</p> <p>\u5c06\u5b83\u4eec\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u4e0b\u9762\u5217\u51fa\u4e86\u5b8c\u6574\u7684\u793a\u4f8b\u3002</p> <pre><code># \u4efb\u52a1\u5931\u8d25\u7684 asyncio \u4efb\u52a1\u7ec4\u793a\u4f8b\nimport asyncio\n\n# \u534f\u7a0b\u4efb\u52a1\nasync def task1():\n    # \u62a5\u544a\u6d88\u606f\n    print('Hello from coroutine 1')\n    # sleep \u6765\u6a21\u62df\u7b49\u5f85\n    await asyncio.sleep(1)\n\n# \u534f\u7a0b\u4efb\u52a1\nasync def task2():\n    # \u62a5\u544a\u6d88\u606f\n    print('Hello from coroutine 2')\n    # sleep \u6765\u6a21\u62df\u7b49\u5f85\n    await asyncio.sleep(0.5)\n    # \u56e0\u5f02\u5e38\u800c\u5931\u8d25\n    raise Exception('Something bad happened')\n\n# \u534f\u7a0b\u4efb\u52a1\nasync def task3():\n    # \u62a5\u544a\u6d88\u606f\n    print('Hello from coroutine 3')\n    # sleep \u6765\u6a21\u62df\u7b49\u5f85\n    await asyncio.sleep(1)\n\n# \u5f02\u6b65\u5165\u53e3\u70b9\nasync def main():\n    # \u5904\u7406\u5f02\u5e38\n    try:\n        # \u521b\u5efa\u4efb\u52a1\u7ec4\n        async with asyncio.TaskGroup() as group:\n            # \u8fd0\u884c\u7b2c\u4e00\u4e2a\u4efb\u52a1\n            t1 = group.create_task(task1())\n            # \u8fd0\u884c\u7b2c\u4e8c\u4e2a\u4efb\u52a1\n            t2 = group.create_task(task2())\n            # \u8fd0\u884c\u7b2c\u4e09\u4e2a\u4efb\u52a1\n            t3 = group.create_task(task3())\n    except:\n        pass\n    # \u68c0\u67e5\u6bcf\u4e2a\u4efb\u52a1\u7684\u72b6\u6001\n    print(f'Task1: done={t1.done()}, cancelled={t1.cancelled()}')\n    print(f'Task2: done={t2.done()}, cancelled={t2.cancelled()}')\n    print(f'Task3: done={t3.done()}, cancelled={t3.cancelled()}')\n\n# \u5165\u53e3\u70b9\nasyncio.run(main())\n</code></pre> <p>\u8fd0\u884c\u793a\u4f8b\u9996\u5148\u6267\u884c main() \u534f\u7a0b\uff0c\u4e3a\u6211\u4eec\u542f\u52a8\u4e00\u4e2a\u65b0\u7684\u4e8b\u4ef6\u5faa\u73af\u3002</p> <p>main() \u534f\u7a0b\u8fd0\u884c\u5e76\u521b\u5efa\u4e00\u4e2a asyncio.TaskGroup\u3002</p> <p>\u7136\u540e\uff0c\u8fd9\u4e09\u4e2a\u534f\u7a0b\u901a\u8fc7 asyncio.TaskGroup \u4f5c\u4e3a\u4efb\u52a1\u53d1\u51fa\uff0c\u5e76\u4e14 asyncio.Task \u5bf9\u8c61\u4fdd\u5b58\u5728\u5c40\u90e8\u53d8\u91cf\u4e2d\u4ee5\u4f9b\u7a0d\u540e\u4f7f\u7528\u3002</p> <p>asyncio.TaskGroup \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5757\u9000\u51fa\uff0c\u7136\u540e main() \u534f\u7a0b\u7b49\u5f85\u6240\u6709\u4e09\u4e2a\u4efb\u52a1\u3002</p> <p>\u4efb\u52a1\u8fd0\u884c\u3001\u62a5\u544a\u6d88\u606f\u5e76\u4f11\u7720\u3002 \u7136\u540e\u7b2c\u4e8c\u4e2a\u534f\u7a0b\u5931\u8d25\u5e76\u51fa\u73b0\u5f02\u5e38\u3002</p> <p>asyncio.TaskGroup \u5904\u7406\u5f02\u5e38\u5e76\u53d6\u6d88\u6240\u6709\u5269\u4f59\u7684\u672a\u5b8c\u6210\u4efb\u52a1\u3002 \u7136\u540e\uff0c\u8be5\u5f02\u5e38\u5728\u9876\u5c42\u91cd\u65b0\u5f15\u53d1\u5e76\u88ab\u5ffd\u7565\u3002</p> <p>\u7136\u540e\u62a5\u544a\u6bcf\u4e2a\u4efb\u52a1\u7684\u5b8c\u6210\u548c\u53d6\u6d88\u72b6\u6001\u3002 \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6240\u6709\u4efb\u52a1\u90fd\u5df2\u5b8c\u6210\uff0c\u5e76\u4e14\u4efb\u52a1 2 \u56e0\u5f02\u5e38\u5931\u8d25\u65f6\u6b63\u5728\u8fd0\u884c\u7684\u4e24\u4e2a\u4efb\u52a1\uff081 \u548c 3\uff09\u786e\u5b9e\u88ab\u53d6\u6d88\u3002</p> <p>\u8fd9\u7a81\u51fa\u663e\u793a\u4e86\u5982\u679c\u7ec4\u4e2d\u7684\u4efb\u52a1\u56e0\u672a\u5904\u7406\u7684\u5f02\u5e38\u800c\u5931\u8d25\uff0c\u5219\u5c06\u5982\u4f55\u53d6\u6d88\u7ec4\u4e2d\u7684\u6240\u6709\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u3002</p> <p>\u53ef\u4ee5\u9632\u6b62\u4efb\u52a1\u88ab\u53d6\u6d88\u3002 \u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u66f4\u591a\u76f8\u5173\u4fe1\u606f\uff1a</p> <ul> <li>Asyncio \u9632\u6b62\u53d6\u6d88</li> </ul> <pre><code>Hello from coroutine 1\nHello from coroutine 2\nHello from coroutine 2\nTask1: done=True, cancelled=True\nTask2: done=True, cancelled=False\nTask3: done=True, cancelled=True\n</code></pre> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e00\u4e2a\u624b\u52a8\u53d6\u6d88\u7ec4\u5185\u4e00\u9879\u4efb\u52a1\u7684\u4f8b\u5b50\u3002</p> <p>Example of Cancelling All Tasks if One Task Fails Using TaskGroup</p> <p>We can explore the case of canceling all tasks in the asyncio.TaskGroup if one task fails.</p> <p>A failed task means that a coroutine is executed in an asyncio.Task object that raises an exception that is not handled in the coroutine, meaning that it bubbles up to the task and causes the task to be halted early.</p> <p>It is common to issue many tasks and cancel all tasks if one or more of the tasks fails.</p> <p>The asyncio.TaskGroup will perform this action automatically for us.</p> <p>In this case, we will define 3 different coroutines that report a message and sleep. The second coroutine will then fail with an uncaught exception.</p> <pre><code># coroutine task\nasync def task1():\n    # report a message\n    print('Hello from coroutine 1')\n    # sleep to simulate waiting\n    await asyncio.sleep(1)\n\n# coroutine task\nasync def task2():\n    # report a message\n    print('Hello from coroutine 2')\n    # sleep to simulate waiting\n    await asyncio.sleep(0.5)\n    # fail with an exception\n    raise Exception('Something bad happened')\n\n# coroutine task\nasync def task3():\n    # report a message\n    print('Hello from coroutine 2')\n    # sleep to simulate waiting\n    await asyncio.sleep(1)\n</code></pre> <p>Note that the second task sleeps less than the other two tasks before raising an exception.</p> <p>This is to ensure that the other two tasks are still running at the point that the second task fails so that we can see if they are canceled as we expect.</p> <p>The main() coroutine will issue all tasks via the asyncio.TaskGroup and then report the done and cancel status of each in turn once all tasks are \u201cdone\u201d.</p> <p>Recall a \u201cdone\u201d task is a task that is finished normally, canceled, or failed with an exception.</p> <pre><code># asyncio entry point\nasync def main():\n    # handle exceptions\n    try:\n        # create task group\n        async with asyncio.TaskGroup() as group:\n            # run first task\n            t1 = group.create_task(task1())\n            # run second task\n            t2 = group.create_task(task2())\n            # run third task\n            t3 = group.create_task(task3())\n    except:\n        pass\n    # check the status of each task\n    print(f'Task1: done={t1.done()}, cancelled={t1.cancelled()}')\n    print(f'Task2: done={t2.done()}, cancelled={t2.cancelled()}')\n    print(f'Task3: done={t3.done()}, cancelled={t3.cancelled()}')\n</code></pre> <p>Notice that we wrap the entire asyncio.TaskGroup in an exception as any uncaught exception that occurs in a task is re-raised by the asyncio.TaskGroup</p> <p>Tying this together, the complete example is listed below.</p> <pre><code># example of asyncio task group with a failed task\nimport asyncio\n\n# coroutine task\nasync def task1():\n    # report a message\n    print('Hello from coroutine 1')\n    # sleep to simulate waiting\n    await asyncio.sleep(1)\n\n# coroutine task\nasync def task2():\n    # report a message\n    print('Hello from coroutine 2')\n    # sleep to simulate waiting\n    await asyncio.sleep(0.5)\n    # fail with an exception\n    raise Exception('Something bad happened')\n\n# coroutine task\nasync def task3():\n    # report a message\n    print('Hello from coroutine 2')\n    # sleep to simulate waiting\n    await asyncio.sleep(1)\n\n# asyncio entry point\nasync def main():\n    # handle exceptions\n    try:\n        # create task group\n        async with asyncio.TaskGroup() as group:\n            # run first task\n            t1 = group.create_task(task1())\n            # run second task\n            t2 = group.create_task(task2())\n            # run third task\n            t3 = group.create_task(task3())\n    except:\n        pass\n    # check the status of each task\n    print(f'Task1: done={t1.done()}, cancelled={t1.cancelled()}')\n    print(f'Task2: done={t2.done()}, cancelled={t2.cancelled()}')\n    print(f'Task3: done={t3.done()}, cancelled={t3.cancelled()}')\n\n# entry point\nasyncio.run(main())\n</code></pre> <p>Running the example first executes the main() coroutine, starting a new event loop for us.</p> <p>The main() coroutine runs and creates an asyncio.TaskGroup.</p> <p>The three coroutines are then issued as tasks via the asyncio.TaskGroup and the asyncio.Task objects are kept in local variables for later.</p> <p>The asyncio.TaskGroup context manager block is exited and the main() coroutine then awaits all three tasks.</p> <p>The tasks run, report a message and sleep. The second coroutine then fails with an exception.</p> <p>The asyncio.TaskGroup handles the exception and cancels all remaining not-done tasks. The exception is then re-raised at the top level and ignored.</p> <p>The done and canceled status of each task is then reported. We can see that all tasks are done and that the two tasks (1 and 3) that were running at the time task 2 failed with an exception were indeed canceled.</p> <p>This highlights how all running tasks in the group will be canceled if a task in the group fails with an unhanded exception.</p> <p>It is possible to shield a task from cancellation. You can learn more about this in the tutorial:</p> <ul> <li>Asyncio Shield From Cancellation</li> </ul> <pre><code>Hello from coroutine 1\nHello from coroutine 2\nHello from coroutine 2\nTask1: done=True, cancelled=True\nTask2: done=True, cancelled=False\nTask3: done=True, cancelled=True\n</code></pre> <p>Next, let\u2019s look at an example of manually canceling one task in the group.</p>"},{"location":"asyncio/task_group/#\u53d6\u6d88\u4efb\u52a1\u7ec4\u4e2d\u7684\u4e00\u9879\u4efb\u52a1\u7684\u793a\u4f8b","title":"\u53d6\u6d88\u4efb\u52a1\u7ec4\u4e2d\u7684\u4e00\u9879\u4efb\u52a1\u7684\u793a\u4f8b","text":"\u4e2d\u6587\u539f\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u63a2\u8ba8\u624b\u52a8\u53d6\u6d88\u7ec4\u4e2d\u4e00\u9879\u4efb\u52a1\u7684\u60c5\u51b5\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 asyncio.Task \u5bf9\u8c61\u4e0a\u7684 cancel() \u65b9\u6cd5\u6765\u5b9e\u73b0\u3002</p> <p>\u5982\u679c\u4efb\u52a1\u6ca1\u6709\u5b8c\u6210\uff0c\u53d6\u6d88\u4efb\u52a1\u7684\u8bf7\u6c42\u5c06\u7531\u4efb\u52a1\u5904\u7406\u3002</p> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173\u53d6\u6d88\u4efb\u52a1\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>\u5982\u4f55\u53d6\u6d88 Asyncio \u4efb\u52a1</li> </ul> <p>\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 asyncio.TaskGroup \u53d1\u51fa 3 \u4e2a\u4efb\u52a1\uff0c\u7a0d\u7b49\u7247\u523b\uff0c\u7136\u540e\u53d6\u6d88\u7b2c\u4e8c\u4e2a\u4efb\u52a1\u3002</p> <p>\u9884\u671f\u53ea\u6709\u7b2c\u4e8c\u4e2a\u4efb\u52a1\u4f1a\u88ab\u53d6\u6d88\uff0c\u6240\u6709\u5176\u4ed6\u4efb\u52a1\u5c06\u7ee7\u7eed\u6b63\u5e38\u8fd0\u884c\u3002 \u6211\u4eec\u5c06\u5728\u6240\u6709\u4efb\u52a1\u5b8c\u6210\u540e\u901a\u8fc7\u62a5\u544a\u6240\u6709\u4efb\u52a1\u7684\u201c\u5df2\u5b8c\u6210\u201d\u548c\u201c\u5df2\u53d6\u6d88\u201d\u72b6\u6001\u6765\u786e\u8ba4\u8fd9\u4e00\u70b9\u3002</p> <pre><code># \u5f02\u6b65\u5165\u53e3\u70b9\nasync def main():\n    # \u521b\u5efa\u4efb\u52a1\u7ec4\n    async with asyncio.TaskGroup() as group:\n        # \u8fd0\u884c\u7b2c\u4e00\u4e2a\u4efb\u52a1\n        t1 = group.create_task(task1())\n        # \u8fd0\u884c\u7b2c\u4e8c\u4e2a\u4efb\u52a1\n        t2 = group.create_task(task2())\n        # \u8fd0\u884c\u7b2c\u4e09\u4e2a\u4efb\u52a1\n        t3 = group.create_task(task3())\n        # \u6682\u505c\u7247\u523b\n        await asyncio.sleep(0.5)\n        # \u53d6\u6d88\u7b2c\u4e8c\u4e2a\u4efb\u52a1\n        t2.cancel()\n    # \u68c0\u67e5\u6bcf\u4e2a\u4efb\u52a1\u7684\u72b6\u6001\n    print(f'Task1: done={t1.done()}, cancelled={t1.cancelled()}')\n    print(f'Task2: done={t2.done()}, cancelled={t2.cancelled()}')\n    print(f'Task3: done={t3.done()}, cancelled={t3.cancelled()}')\n</code></pre> <p>\u5c06\u5b83\u4eec\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u4e0b\u9762\u5217\u51fa\u4e86\u5b8c\u6574\u7684\u793a\u4f8b\u3002</p> <pre><code># \u5177\u6709\u5df2\u53d6\u6d88\u4efb\u52a1\u7684 asyncio \u4efb\u52a1\u7ec4\u793a\u4f8b\nimport asyncio\n\n# \u534f\u7a0b\u4efb\u52a1\nasync def task1():\n    # sleep \u6765\u6a21\u62df\u7b49\u5f85\n    await asyncio.sleep(1)\n    # \u62a5\u544a\u6d88\u606f\n    print('Hello from coroutine 1')\n\n# \u534f\u7a0b\u4efb\u52a1\nasync def task2():\n    # sleep \u6765\u6a21\u62df\u7b49\u5f85\n    await asyncio.sleep(1)\n    # \u62a5\u544a\u6d88\u606f\n    print('Hello from coroutine 2')\n\n# \u534f\u7a0b\u4efb\u52a1\nasync def task3():\n    # sleep \u6765\u6a21\u62df\u7b49\u5f85\n    await asyncio.sleep(1)\n    # \u62a5\u544a\u6d88\u606f\n    print('Hello from coroutine 3')\n\n# \u5f02\u6b65\u5165\u53e3\u70b9\nasync def main():\n    # \u521b\u5efa\u4efb\u52a1\u7ec4\n    async with asyncio.TaskGroup() as group:\n        # \u8fd0\u884c\u7b2c\u4e00\u4e2a\u4efb\u52a1\n        t1 = group.create_task(task1())\n        # \u8fd0\u884c\u7b2c\u4e8c\u4e2a\u4efb\u52a1\n        t2 = group.create_task(task2())\n        # \u8fd0\u884c\u7b2c\u4e09\u4e2a\u4efb\u52a1\n        t3 = group.create_task(task3())\n        # \u6682\u505c\u7247\u523b\n        await asyncio.sleep(0.5)\n        # \u53d6\u6d88\u7b2c\u4e8c\u4e2a\u4efb\u52a1\n        t2.cancel()\n    # \u68c0\u67e5\u6bcf\u4e2a\u4efb\u52a1\u7684\u72b6\u6001\n    print(f'Task1: done={t1.done()}, cancelled={t1.cancelled()}')\n    print(f'Task2: done={t2.done()}, cancelled={t2.cancelled()}')\n    print(f'Task3: done={t3.done()}, cancelled={t3.cancelled()}')\n\n# \u5165\u53e3\u70b9\nasyncio.run(main())\n</code></pre> <p>\u8fd0\u884c\u793a\u4f8b\u9996\u5148\u6267\u884c main() \u534f\u7a0b\uff0c\u4e3a\u6211\u4eec\u542f\u52a8\u4e00\u4e2a\u65b0\u7684\u4e8b\u4ef6\u5faa\u73af\u3002</p> <p>main() \u534f\u7a0b\u8fd0\u884c\u5e76\u521b\u5efa\u4e00\u4e2a asyncio.TaskGroup\u3002</p> <p>\u7136\u540e\uff0c\u8fd9\u4e09\u4e2a\u534f\u7a0b\u901a\u8fc7 asyncio.TaskGroup \u4f5c\u4e3a\u4efb\u52a1\u53d1\u51fa\uff0c\u5e76\u4e14 asyncio.Task \u5bf9\u8c61\u4fdd\u5b58\u5728\u5c40\u90e8\u53d8\u91cf\u4e2d\u4ee5\u4f9b\u7a0d\u540e\u4f7f\u7528\u3002</p> <p>main() \u534f\u7a0b\u4f1a\u4f11\u7720\u4e00\u4f1a\u513f\uff0c\u4ee5\u5141\u8bb8\u4efb\u52a1\u8fd0\u884c\u3002</p> <p>main() \u534f\u7a0b\u7ed3\u679c\u7136\u540e\u53d6\u6d88\u7b2c\u4e8c\u4e2a\u4efb\u52a1\u3002 \u7136\u540e\u5b83\u9000\u51fa asyncio.TaskGroup \u7684\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5e76\u7b49\u5f85\u6240\u6709\u4efb\u52a1\u3002</p> <p>\u7b2c\u4e8c\u4e2a\u4efb\u52a1\u88ab\u53d6\u6d88\u3002 \u5176\u4f59\u4efb\u52a1\u6b63\u5e38\u5b8c\u6210\u3002 \u6211\u4eec\u53ea\u80fd\u770b\u5230\u6765\u81ea\u4efb\u52a1 1 \u548c 3 \u7684\u6d88\u606f\uff0c\u56e0\u4e3a\u4efb\u52a1 2 \u5728\u62a5\u544a\u6d88\u606f\u4e4b\u524d\u5df2\u88ab\u53d6\u6d88\u3002</p> <p>\u68c0\u67e5\u4efb\u52a1\u7684\u72b6\u6001\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6240\u6709\u4efb\u52a1\u90fd\u5df2\u5b8c\u6210\uff0c\u53ea\u6709\u4efb\u52a1 2 \u88ab\u53d6\u6d88\u3002</p> <p>\u8fd9\u51f8\u663e\u4e86\u6211\u4eec\u53ef\u4ee5\u624b\u52a8\u53d6\u6d88\u7ec4\u4e2d\u7684\u4efb\u52a1\uff0c\u800c\u4e0d\u5f71\u54cd\u5176\u4ed6\u4efb\u52a1\u3002</p> <pre><code>Hello from coroutine 1\nHello from coroutine 2\nTask1: done=True, cancelled=False\nTask2: done=True, cancelled=True\nTask3: done=True, cancelled=False\n</code></pre> <p>Example of Cancelling One Task in a TaskGroup</p> <p>We can explore the case of manually canceling one task in the group.</p> <p>This can be achieved by calling the cancel() method on the asyncio.Task object.</p> <p>If the task is not done, the request to cancel the task will be handled by the task.</p> <p>You can learn more about canceling tasks in the tutorial:</p> <ul> <li>How to Cancel an Asyncio Task</li> </ul> <p>In this case, we will issue 3 tasks using the asyncio.TaskGroup, wait a moment, then cancel the second task.</p> <p>The expectation is that only the second task will be canceled and all other tasks will be left to run as per normal. We will confirm this by reporting the \u201cdone\u201d and \u201ccancelled\u201d status of all tasks after all tasks are done.</p> <pre><code># asyncio entry point\nasync def main():\n    # create task group\n    async with asyncio.TaskGroup() as group:\n        # run first task\n        t1 = group.create_task(task1())\n        # run second task\n        t2 = group.create_task(task2())\n        # run third task\n        t3 = group.create_task(task3())\n        # wait a moment\n        await asyncio.sleep(0.5)\n        # cancel the second task\n        t2.cancel()\n    # check the status of each task\n    print(f'Task1: done={t1.done()}, cancelled={t1.cancelled()}')\n    print(f'Task2: done={t2.done()}, cancelled={t2.cancelled()}')\n    print(f'Task3: done={t3.done()}, cancelled={t3.cancelled()}')\n</code></pre> <p>Tying this together, the complete example is listed below.</p> <pre><code># example of asyncio task group with a canceled task\nimport asyncio\n\n# coroutine task\nasync def task1():\n    # sleep to simulate waiting\n    await asyncio.sleep(1)\n    # report a message\n    print('Hello from coroutine 1')\n\n# coroutine task\nasync def task2():\n    # sleep to simulate waiting\n    await asyncio.sleep(1)\n    # report a message\n    print('Hello from coroutine 2')\n\n# coroutine task\nasync def task3():\n    # sleep to simulate waiting\n    await asyncio.sleep(1)\n    # report a message\n    print('Hello from coroutine 2')\n\n# asyncio entry point\nasync def main():\n    # create task group\n    async with asyncio.TaskGroup() as group:\n        # run first task\n        t1 = group.create_task(task1())\n        # run second task\n        t2 = group.create_task(task2())\n        # run third task\n        t3 = group.create_task(task3())\n        # wait a moment\n        await asyncio.sleep(0.5)\n        # cancel the second task\n        t2.cancel()\n    # check the status of each task\n    print(f'Task1: done={t1.done()}, cancelled={t1.cancelled()}')\n    print(f'Task2: done={t2.done()}, cancelled={t2.cancelled()}')\n    print(f'Task3: done={t3.done()}, cancelled={t3.cancelled()}')\n\n# entry point\nasyncio.run(main())\n</code></pre> <p>Running the example first executes the main() coroutine, starting a new event loop for us.</p> <p>The main() coroutine runs and creates an asyncio.TaskGroup.</p> <p>The three coroutines are then issued as tasks via the asyncio.TaskGroup and the asyncio.Task objects are kept in local variables for later.</p> <p>The main() coroutine sleeps for a moment, allowing the tasks to run.</p> <p>The main() coroutine results and then cancels the second task. It then exits the context manager of the asyncio.TaskGroup and awaits all tasks.</p> <p>The second task is canceled. The remaining tasks complete normally. We see messages from tasks 1 and 3 only because task 2 was canceled before the message could be reported.</p> <p>Checking the status of the tasks, we can see that all tasks are done and only task 2 was canceled.</p> <p>This highlights that we can manually cancel tasks in the group, leaving other tasks unaffected.</p> <pre><code>Hello from coroutine 1\nHello from coroutine 2\nTask1: done=True, cancelled=False\nTask2: done=True, cancelled=True\nTask3: done=True, cancelled=False\n</code></pre>"},{"location":"asyncio/task_group/#\u8fdb\u4e00\u6b65\u9605\u8bfb","title":"\u8fdb\u4e00\u6b65\u9605\u8bfb","text":"\u4e2d\u6587\u539f\u6587 <p>\u672c\u8282\u63d0\u4f9b\u4e86\u60a8\u53ef\u80fd\u4f1a\u89c9\u5f97\u6709\u7528\u7684\u5176\u4ed6\u8d44\u6e90\u3002</p> <p>\u4e66\u7c4d</p> <ul> <li>Python Asyncio Jump-Start, Jason Brownlee, 2022 (my book).</li> <li>Python Asyncio Interview Questions</li> <li>Asyncio Module API Cheat Sheet</li> </ul> <p>\u6211\u8fd8\u63a8\u8350\u4ee5\u4e0b\u4e66\u7c4d:</p> <ul> <li>Python Concurrency with asyncio, Matthew Fowler, 2022.</li> <li>Using Asyncio in Python, Caleb Hattingh, 2020.</li> </ul> <p>\u6307\u5357</p> <ul> <li>Python Asyncio: The Complete Guide</li> </ul> <p>APIs</p> <ul> <li>asyncio \u2014 Asynchronous I/O</li> <li>Asyncio Coroutines and Tasks</li> <li>Asyncio Streams</li> <li>Asyncio Subprocesses</li> <li>Asyncio Queues</li> <li>Asyncio Synchronization Primitives</li> </ul> <p>\u53c2\u8003</p> <ul> <li>Asynchronous I/O, Wikipedia.</li> <li>Coroutine, Wikipedia.</li> </ul> <p>Further Reading</p> <p>This section provides additional resources that you may find helpful.</p> <p>Books</p> <ul> <li>Python Asyncio Jump-Start, Jason Brownlee, 2022 (my book).</li> <li>Python Asyncio Interview Questions</li> <li>Asyncio Module API Cheat Sheet</li> </ul> <p>I also recommend the following books:</p> <ul> <li>Python Concurrency with asyncio, Matthew Fowler, 2022.</li> <li>Using Asyncio in Python, Caleb Hattingh, 2020.</li> </ul> <p>Guides</p> <ul> <li>Python Asyncio: The Complete Guide</li> </ul> <p>APIs</p> <ul> <li>asyncio \u2014 Asynchronous I/O</li> <li>Asyncio Coroutines and Tasks</li> <li>Asyncio Streams</li> <li>Asyncio Subprocesses</li> <li>Asyncio Queues</li> <li>Asyncio Synchronization Primitives</li> </ul> <p>References</p> <ul> <li>Asynchronous I/O, Wikipedia.</li> <li>Coroutine, Wikipedia.</li> </ul>"},{"location":"asyncio/en/","title":"Python Asyncio: \u5b8c\u6574\u6307\u5357","text":"<p>Python Asyncio: The Complete Guide</p> <p>\u539f\u6587: https://superfastpython.com/python-asyncio/</p>"},{"location":"asyncio/en/#\u6700\u65b0","title":"\u6700\u65b0","text":"\u4e2d\u6587\u82f1\u6587 <p>Python \u7684 Asyncio \u63d0\u4f9b\u4e86\u57fa\u4e8e\u534f\u7a0b(coroutines)\u7684\u5f02\u6b65\u7f16\u7a0b(asynchronous programming)\u3002</p> <p>\u5f02\u6b65\u7f16\u7a0b\u662f\u4e00\u79cd\u6d41\u884c\u7684\u7f16\u7a0b\u8303\u5f0f\uff0c\u5b83\u5141\u8bb8\u5927\u91cf\u8f7b\u91cf\u7ea7\u4efb\u52a1\u5e76\u53d1\u8fd0\u884c\uff0c\u4e0e\u7ebf\u7a0b\u76f8\u6bd4\uff0c\u5176\u5185\u5b58\u5f00\u9500\u975e\u5e38\u5c0f\u3002</p> <p>\u8fd9\u4f7f\u5f97 asyncio \u5728 Python Web \u5f00\u53d1\u3001\u8fdb\u884c\u7f51\u7edc\u8c03\u7528\u7684 Python API\uff0c\u4ee5\u53ca\u5957\u63a5\u5b57\u7f16\u7a0b\u7684\u5e76\u53d1\u6027\u65b9\u9762\u975e\u5e38\u5438\u5f15\u4eba\u4e14\u5e7f\u6cdb\u4f7f\u7528\u3002</p> <p>\u8fd9\u672c\u6307\u5357\u63d0\u4f9b\u4e86 Python Asyncio \u7684\u8be6\u7ec6\u4e14\u5168\u9762\u7684\u4ecb\u7ecd\u3002</p> <p>\u4e00\u4e9b\u63d0\u793a\uff1a</p> <ol> <li>\u4f60\u53ef\u80fd\u60f3\u8981\u5c06\u8fd9\u672c\u6307\u5357\u52a0\u5165\u4e66\u7b7e\uff0c\u5e76\u5206\u51e0\u6b21\u9605\u8bfb\u3002</li> <li>\u4f60\u53ef\u4ee5\u4e0b\u8f7d\u8fd9\u672c\u6307\u5357\u4e2d\u4f7f\u7528\u7684\u6240\u6709\u4ee3\u7801\u7684\u538b\u7f29\u5305\u3002</li> <li>\u4f60\u53ef\u4ee5\u5728\u8bc4\u8bba\u4e2d\u63d0\u95ee\u6216\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u5411\u6211\u5bfb\u6c42\u5e2e\u52a9\u3002</li> <li>\u4f60\u53ef\u4ee5\u901a\u8fc7\u76ee\u5f55\u8df3\u8f6c\u5230\u4f60\u611f\u5174\u8da3\u7684\u4e3b\u9898\uff08\u5982\u4e0b\uff09\u3002</li> </ol> <p>\u8ba9\u6211\u4eec\u5f00\u59cb\u6df1\u5165\u5b66\u4e60\u3002</p> <p>Python Asyncio provides asynchronous programming with coroutines.</p> <p>Asynchronous programming is a popular programming paradigm that allows a large number of lightweight tasks to run concurrently with very little memory overhead, compared to threads.</p> <p>This makes asyncio very attractive and widely used for Python web development, Python APIs that make web calls, and concurrency for socket programming.</p> <p>This book-length guide provides a detailed and comprehensive walkthrough of Python Asyncio.</p> <p>Some tips:</p> <ol> <li>You may want to bookmark this guide and read it over a few sittings.</li> <li>You can download a zip of all code used in this guide.</li> <li>You can get help, ask a question in the comments or email me.</li> <li>You can jump to the topics that interest you via the table of contents (below).</li> </ol> <p>Let\u2019s dive in.</p>"},{"location":"asyncio/en/#\u65e7\u7248","title":"\u65e7\u7248","text":"\u4e2d\u6587\u82f1\u6587 <p>Asyncio \u5141\u8bb8\u6211\u4eec\u5728 Python \u4e2d\u4f7f\u7528\u57fa\u4e8e\u534f\u7a0b\u7684\u5e76\u53d1\u7684\u5f02\u6b65\u7f16\u7a0b\u3002</p> <p>\u5c3d\u7ba1 asyncio \u5df2\u7ecf\u5728 Python \u4e2d\u4f7f\u7528\u5f88\u591a\u5e74\u4e86\uff0c\u4f46\u5b83\u4ecd\u7136\u662f Python \u4e2d\u6700\u6709\u8da3\u4f46\u4e5f\u662f\u6700\u4ee4\u4eba\u6cae\u4e27\u7684\u9886\u57df\u4e4b\u4e00\u3002</p> <p>\u5bf9\u4e8e\u65b0\u5f00\u53d1\u4eba\u5458\u6765\u8bf4\uff0c\u5f00\u59cb\u4f7f\u7528 asyncio \u975e\u5e38\u56f0\u96be\u3002</p> <p>\u672c\u6307\u5357\u5bf9 Python \u4e2d\u7684 asyncio \u8fdb\u884c\u4e86\u8be6\u7ec6\u800c\u5168\u9762\u7684\u56de\u987e\uff0c\u5305\u62ec\u5982\u4f55\u5b9a\u4e49\u3001\u521b\u5efa\u548c\u8fd0\u884c\u534f\u7a0b\u3001\u4ec0\u4e48\u662f\u5f02\u6b65\u7f16\u7a0b\u3001\u4ec0\u4e48\u662f\u975e\u963b\u585e io\u3001\u4e0e\u534f\u7a0b\u4e00\u8d77\u4f7f\u7528\u7684\u5e76\u53d1\u539f\u8bed\u3001 \u5e38\u89c1\u95ee\u9898\u548c\u6700\u4f73\u5b9e\u8df5\u3002</p> <p>\u8fd9\u662f\u4e00\u672c\u8d85\u8fc7 29,000 \u5b57\u7684\u6d77\u91cf\u6307\u5357\u3002 \u60a8\u53ef\u80fd\u9700\u8981\u4e3a\u5176\u6dfb\u52a0\u4e66\u7b7e\uff0c\u4ee5\u4fbf\u5728\u5f00\u53d1\u5e76\u53d1\u7a0b\u5e8f\u65f6\u53ef\u4ee5\u53c2\u8003\u5b83\u3002</p> <p>\u8ba9\u6211\u4eec\u6df1\u5165\u4e86\u89e3\u4e00\u4e0b\u3002</p> <p>Asyncio allows us to use asynchronous programming with coroutine-based concurrency in Python.</p> <p>Although asyncio has been available in Python for many years now, it remains one of the most interesting and yet one of the most frustrating areas of Python.</p> <p>It is just plain hard to get started with asyncio for new developers.</p> <p>This guide provides a detailed and comprehensive(\u5168\u9762\u7684) review of asyncio in Python, including how to define, create and run coroutines, what is asynchronous programming, what is non-blocking-io, concurrency primitives(\u539f\u59cb\u5e76\u53d1) used with coroutines, common questions, and best practices.</p> <p>This is a massive 29,000+ word guide. You may want to bookmark it so you can refer to it as you develop your concurrent programs.</p> <p>Let\u2019s dive in.</p>"},{"location":"asyncio/en/c1/","title":"1. \u4ec0\u4e48\u662f\u5f02\u6b65\u7f16\u7a0b","text":"<p>1. What is Asynchronous Programming</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f02\u6b65\u7f16\u7a0b\u662f\u4e00\u79cd\u4e0d\u4f1a\u963b\u585e\u7684\u7f16\u7a0b\u8303\u5f0f\u3002</p> <p>\u76f8\u53cd\uff0c\u8bf7\u6c42\u548c\u51fd\u6570\u8c03\u7528\u4f1a\u5728\u5c06\u6765\u7684\u67d0\u4e2a\u65f6\u95f4\u5728\u540e\u53f0\u4ee5\u67d0\u79cd\u65b9\u5f0f\u629b\u51fa\u548c\u6267\u884c\u3002 \u8fd9\u4f7f\u5f97\u8c03\u7528\u8005\u53ef\u4ee5\u81ea\u7531\u5730\u6267\u884c\u5176\u4ed6\u6d3b\u52a8\uff0c\u5e76\u5728\u7a0d\u540e\u5f53\u7ed3\u679c\u53ef\u7528\u6216\u8c03\u7528\u8005\u611f\u5174\u8da3\u65f6\u5904\u7406\u629b\u51fa\u7684\u5f85\u6267\u884c\u4efb\u52a1\u3002</p> <p>\u5728\u6df1\u5165\u4e86\u89e3 asyncio \u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u5148\u4e86\u89e3\u4e00\u4e0b\u5f02\u6b65\u7f16\u7a0b\u3002</p> <p>Asynchronous programming is a programming paradigm that does not block.</p> <p>Instead, requests and function calls are issued and executed somehow in the background at some future time. This frees the caller to perform other activities and handle the results of issued calls at a later time when results are available or when the caller is interested.</p> <p>Let\u2019s get a handle on asynchronous programming before we dive into asyncio.</p>"},{"location":"asyncio/en/c1/#11-\u5f02\u6b65\u4efb\u52a1","title":"1.1 \u5f02\u6b65\u4efb\u52a1","text":"<p>1.1 Asynchronous Tasks</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f02\u6b65\u610f\u5473\u7740\u4e0d\u5728\u540c\u4e00\u65f6\u523b, \u4e0e\u540c\u6b65\u6216\u540c\u65f6\u76f8\u5bf9.</p> <p>\u5f02\u6b65(asynchronous): \u65f6\u95f4\u4e0a\u4e0d\u540c\u4e00\u65f6\u523b\u6216\u540c\u65f6\u8fdb\u884c\u3002</p> <p>\u2014 MERRIAM-WEBSTER DICTIONARY</p> <p>\u7f16\u7a0b\u65f6\uff0c\u5f02\u6b65(asynchronous) \u610f\u5473\u7740\u8bf7\u6c42\u64cd\u4f5c\uff0c\u5c3d\u7ba1\u5728\u8bf7\u6c42\u65f6\u5e76\u672a\u6267\u884c\u3002 \u8fd9\u662f\u7a0d\u540e\u6267\u884c\u7684\u3002</p> <p>\u5f02\u6b65(Asynchronous): \u53ef\u4ee5\u4ee5\u76f8\u5bf9\u4e8e\u5f7c\u6b64\u7684\u4efb\u4f55\u987a\u5e8f\u540c\u65f6\u8fd0\u884c\u7684\u5355\u72ec\u6267\u884c\u6d41\u662f\u5f02\u6b65\u7684\u3002</p> <p>\u2014 PAGE 265, \u5e76\u53d1\u7684\u827a\u672f, 2009.</p> <p>\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u5f02\u6b65\u51fd\u6570\u8c03\u7528\u3002</p> <p>\u8fd9\u5c06\u53d1\u51fa\u8fdb\u884c\u51fd\u6570\u8c03\u7528\u7684\u8bf7\u6c42\uff0c\u5e76\u4e14\u4e0d\u4f1a\u7b49\u5f85\u8c03\u7528\u5b8c\u6210\u3002 \u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u7a0d\u540e\u68c0\u67e5\u51fd\u6570\u8c03\u7528\u7684\u72b6\u6001\u6216\u7ed3\u679c\u3002</p> <ul> <li>\u5f02\u6b65\u51fd\u6570\u8c03\u7528(Asynchronous Function Call): \u8bf7\u6c42\u5728\u67d0\u4e2a\u65f6\u95f4\u4ee5\u67d0\u79cd\u65b9\u5f0f\u8c03\u7528\u67d0\u4e2a\u51fd\u6570\uff0c\u4ece\u800c\u5141\u8bb8\u8c03\u7528\u8005\u6062\u590d\u5e76\u6267\u884c\u5176\u4ed6\u6d3b\u52a8\u3002</li> </ul> <p>\u51fd\u6570\u8c03\u7528\u5c06\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5728\u67d0\u4e2a\u65f6\u95f4\u5728\u540e\u53f0\u53d1\u751f\uff0c\u5e76\u4e14\u7a0b\u5e8f\u53ef\u4ee5\u6267\u884c\u5176\u4ed6\u4efb\u52a1\u6216\u54cd\u5e94\u5176\u4ed6\u4e8b\u4ef6\u3002</p> <p>\u8fd9\u662f\u5173\u952e\u3002 \u6211\u4eec\u65e0\u6cd5\u63a7\u5236\u5982\u4f55\u6216\u4f55\u65f6\u5904\u7406\u8bf7\u6c42\uff0c\u53ea\u662f\u6211\u4eec\u5e0c\u671b\u5728\u7a0b\u5e8f\u6267\u884c\u5176\u4ed6\u64cd\u4f5c\u65f6\u5904\u7406\u5b83\u3002</p> <p>\u53d1\u51fa\u5f02\u6b65\u51fd\u6570\u8c03\u7528\u901a\u5e38\u4f1a\u4ea7\u751f\u8bf7\u6c42\u7684\u67d0\u4e9b\u53e5\u67c4\uff0c\u8c03\u7528\u8005\u53ef\u4ee5\u4f7f\u7528\u8be5\u53e5\u67c4\u68c0\u67e5\u8c03\u7528\u7684\u72b6\u6001\u6216\u83b7\u53d6\u7ed3\u679c\u3002 \u8fd9\u901a\u5e38\u88ab\u79f0\u4e3a\u672a\u6765(future)\u3002</p> <ul> <li>Future: \u5f02\u6b65\u51fd\u6570\u8c03\u7528\u7684\u53e5\u67c4\uff0c\u5141\u8bb8\u68c0\u67e5\u8c03\u7528\u7684\u72b6\u6001\u5e76\u68c0\u7d22\u7ed3\u679c\u3002</li> </ul> <p>\u5f02\u6b65\u51fd\u6570\u8c03\u7528\u548c future \u7684\u7ec4\u5408\u901a\u5e38\u79f0\u4e3a\u5f02\u6b65\u4efb\u52a1\u3002 \u8fd9\u662f\u56e0\u4e3a\u5b83\u6bd4\u51fd\u6570\u8c03\u7528\u66f4\u590d\u6742\uff0c\u4f8b\u5982\u5141\u8bb8\u53d6\u6d88\u8bf7\u6c42\u7b49\u7b49\u3002</p> <ul> <li>\u5f02\u6b65\u4efb\u52a1(Asynchronous Task): \u7528\u4e8e\u6307\u5f02\u6b65\u51fd\u6570\u8c03\u7528\u548c\u7ed3\u679c future \u7684\u805a\u5408\u3002</li> </ul> <p>Asynchronous means not at the same time, as opposed to synchronous or at the same time.</p> <p>asynchronous: not simultaneous or concurrent in time</p> <p>\u2014 MERRIAM-WEBSTER DICTIONARY</p> <p>When programming, asynchronous means that the action is requested, although not performed at the time of the request. It is performed later.</p> <p>Asynchronous: Separate execution streams that can run concurrently in any order relative to each other are asynchronous.</p> <p>\u2014 PAGE 265, THE ART OF CONCURRENCY, 2009.</p> <p>For example, we can make an asynchronous function call.</p> <p>This will issue the request to make the function call and will not wait around for the call to complete. We can choose to check on the status or result of the function call later.</p> <ul> <li>Asynchronous Function Call: Request that a function is called at some time and in some manner, allowing the caller to resume and perform other activities.</li> </ul> <p>The function call will happen somehow and at some time, in the background, and the program can perform other tasks or respond to other events.</p> <p>This is key. We don\u2019t have control over how or when the request is handled, only that we would like it handled while the program does other things.</p> <p>Issuing an asynchronous function call often results in some handle on the request that the caller can use to check on the status of the call or get results. This is often called a future.</p> <ul> <li>Future: A handle on an asynchronous function call allowing the status of the call to be checked and results to be retrieved.</li> </ul> <p>The combination of the asynchronous function call and future together is often referred to as an asynchronous task. This is because it is more elaborate than a function call, such as allowing the request to be canceled and more.</p> <ul> <li>Asynchronous Task: Used to refer to the aggregate of an asynchronous function call and resulting future.</li> </ul>"},{"location":"asyncio/en/c1/#12-\u5f02\u6b65\u7f16\u7a0b","title":"1.2 \u5f02\u6b65\u7f16\u7a0b","text":"<p>1.2 Asynchronous Programming</p> \u4e2d\u6587\u82f1\u6587 <p>\u53d1\u51fa\u5f02\u6b65\u4efb\u52a1\u548c\u8fdb\u884c\u5f02\u6b65\u51fd\u6570\u8c03\u7528\u79f0\u4e3a\u5f02\u6b65\u7f16\u7a0b\u3002</p> <p>\u90a3\u4e48\u4ec0\u4e48\u662f\u5f02\u6b65\u7f16\u7a0b\u5462\uff1f \u8fd9\u610f\u5473\u7740\u7279\u5b9a\u7684\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u4efb\u52a1\u53ef\u4ee5\u5728\u4e0e\u4e3b\u5e94\u7528\u7a0b\u5e8f\u5206\u5f00\u7684\u540e\u53f0\u8fd0\u884c\u3002 \u7cfb\u7edf\u4e0d\u4f1a\u963b\u585e\u6240\u6709\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u7b49\u5f85\u8be5\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u4efb\u52a1\u5b8c\u6210\uff0c\u800c\u662f\u53ef\u4ee5\u81ea\u7531\u5730\u6267\u884c\u4e0d\u4f9d\u8d56\u4e8e\u8be5\u4efb\u52a1\u7684\u5176\u4ed6\u5de5\u4f5c\u3002 \u7136\u540e\uff0c\u4e00\u65e6\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u4efb\u52a1\u5b8c\u6210\uff0c\u6211\u4eec\u5c31\u4f1a\u6536\u5230\u901a\u77e5\uff0c\u4ee5\u4fbf\u6211\u4eec\u53ef\u4ee5\u5904\u7406\u7ed3\u679c\u3002</p> <p>\u2014 PAGE 3, PYTHON CONCURRENCY WITH ASYNCIO, 2022.</p> <ul> <li>\u5f02\u6b65\u7f16\u7a0b(Asynchronous Programming): \u4f7f\u7528\u5f02\u6b65\u6280\u672f\uff0c\u4f8b\u5982\u53d1\u51fa\u5f02\u6b65\u4efb\u52a1\u6216\u51fd\u6570\u8c03\u7528\u3002</li> </ul> <p>\u5f02\u6b65\u7f16\u7a0b\u4e3b\u8981\u7528\u4e8e\u975e\u963b\u585e I/O\uff0c\u4f8b\u5982\u4ece\u4e0e\u5176\u4ed6\u8fdb\u7a0b\u6216\u5176\u4ed6\u7cfb\u7edf\u7684\u5957\u63a5\u5b57\u8fde\u63a5\u8fdb\u884c\u8bfb\u5199\u3002</p> <p>\u5728\u975e\u963b\u585e\u6a21\u5f0f\u4e0b\uff0c\u5f53\u6211\u4eec\u5411\u5957\u63a5\u5b57\u5199\u5165\u5b57\u8282\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u89e6\u53d1\u5e76\u5fd8\u8bb0\u5199\u5165\u6216\u8bfb\u53d6\uff0c\u5e76\u4e14\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\u5176\u4ed6\u4efb\u52a1\u3002</p> <p>\u2014 PAGE 18, PYTHON CONCURRENCY WITH ASYNCIO, 2022.</p> <p>\u975e\u963b\u585e I/O \u662f\u4e00\u79cd\u6267\u884c I/O \u7684\u65b9\u5f0f\uff0c\u5176\u4e2d\u8bf7\u6c42\u8bfb\u53d6\u548c\u5199\u5165\uff0c\u4f46\u5f02\u6b65\u6267\u884c\u3002 \u8c03\u7528\u8005\u65e0\u9700\u7b49\u5f85\u64cd\u4f5c\u5b8c\u6210\u5373\u53ef\u8fd4\u56de\u3002</p> <p>\u8bfb\u53d6\u548c\u5199\u5165\u64cd\u4f5c\u4ee5\u67d0\u79cd\u65b9\u5f0f\u6267\u884c\uff08\u4f8b\u5982\uff0c\u901a\u8fc7\u5e95\u5c42\u64cd\u4f5c\u7cfb\u7edf\u6216\u6784\u5efa\u5728\u5176\u4e0a\u7684\u7cfb\u7edf\uff09\uff0c\u5e76\u4e14\u64cd\u4f5c\u548c/\u6216\u6570\u636e\u7684\u72b6\u6001\u7a0d\u540e\u7531\u8c03\u7528\u8005\u68c0\u7d22\uff0c\u4e00\u65e6\u53ef\u7528\uff0c\u6216\u8005\u5f53\u8c03\u7528\u8005\u51c6\u5907\u597d\u65f6\u3002</p> <ul> <li>\u975e\u963b\u585e I/O(Non-blocking I/O): \u901a\u8fc7\u5f02\u6b65\u8bf7\u6c42\u548c\u54cd\u5e94\u6267\u884c I/O \u64cd\u4f5c\uff0c\u800c\u4e0d\u662f\u7b49\u5f85\u64cd\u4f5c\u5b8c\u6210\u3002</li> </ul> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u975e\u963b\u585e I/O \u4e0e\u5f02\u6b65\u7f16\u7a0b\u7684\u5173\u7cfb\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u901a\u8fc7\u5f02\u6b65\u7f16\u7a0b\u6765\u4f7f\u7528\u975e\u963b\u585eI/O\uff0c\u6216\u8005\u8bf4\u975e\u963b\u585eI/O\u662f\u901a\u8fc7\u5f02\u6b65\u7f16\u7a0b\u6765\u5b9e\u73b0\u7684\u3002</p> <p>\u975e\u963b\u585e I/O \u4e0e\u5f02\u6b65\u7f16\u7a0b\u7684\u7ed3\u5408\u975e\u5e38\u5e38\u89c1\uff0c\u56e0\u6b64\u901a\u5e38\u7b80\u79f0\u4e3a\u5f02\u6b65 I/O\u3002</p> <ul> <li>\u5f02\u6b65I/O(Asynchronous I/O): \u4e00\u79cd\u7b80\u5199\uff0c\u6307\u5c06\u5f02\u6b65\u7f16\u7a0b\u4e0e\u975e\u963b\u585e I/O \u76f8\u7ed3\u5408\u3002</li> </ul> <p>\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u7814\u7a76\u4e00\u4e0b Python \u4e2d\u7684\u5f02\u6b65\u7f16\u7a0b\u652f\u6301\u3002</p> <p>Issuing asynchronous tasks and making asynchronous function calls is referred to as asynchronous programming.</p> <p>So what is asynchronous programming? It means that a particular long-running task can be run in the background separate from the main application. Instead of blocking all other application code waiting for that long-running task to be completed, the system is free to do other work that is not dependent on that task. Then, once the long-running task is completed, we\u2019ll be notified that it is done so we can process the result.</p> <p>\u2014 PAGE 3, PYTHON CONCURRENCY WITH ASYNCIO, 2022.</p> <ul> <li>Asynchronous Programming: The use of asynchronous techniques, such as issuing asynchronous tasks or function calls.</li> </ul> <p>Asynchronous programming is primarily used with non-blocking I/O, such as reading and writing from socket connections with other processes or other systems.</p> <p>In non-blocking mode, when we write bytes to a socket, we can just fire and forget the write or read, and our application can go on to perform other tasks.</p> <p>\u2014 PAGE 18, PYTHON CONCURRENCY WITH ASYNCIO, 2022.</p> <p>Non-blocking I/O is a way of performing I/O where reads and writes are requested, although performed asynchronously. The caller does not need to wait for the operation to complete before returning.</p> <p>The read and write operations are performed somehow (e.g. by the underlying operating system or systems built upon it), and the status of the action and/or data is retrieved by the caller later, once available, or when the caller is ready.</p> <ul> <li>Non-blocking I/O: Performing I/O operations via asynchronous requests and responses, rather than waiting for operations to complete.</li> </ul> <p>As such, we can see how non-blocking I/O is related to asynchronous programming. In fact, we use non-blocking I/O via asynchronous programming, or non-blocking I/O is implemented via asynchronous programming.</p> <p>The combination of non-blocking I/O with asynchronous programming is so common that it is commonly referred to by the shorthand of asynchronous I/O.</p> <ul> <li>Asynchronous I/O: A shorthand that refers to combining asynchronous programming with non-blocking I/O.</li> </ul> <p>Next, let\u2019s consider asynchronous programming support in Python.</p>"},{"location":"asyncio/en/c1/#13-python-\u5f02\u6b65\u7f16\u7a0b","title":"1.3 Python \u5f02\u6b65\u7f16\u7a0b","text":"<p>1.3 Asynchronous Programming in Python</p> \u4e2d\u6587\u82f1\u6587 <p>\u4ece\u5e7f\u4e49\u4e0a\u8bb2\uff0cPython \u4e2d\u7684\u5f02\u6b65\u7f16\u7a0b\u662f\u6307\u53d1\u51fa\u8bf7\u6c42\u800c\u4e0d\u662f\u963b\u585e\u7b49\u5f85\u8bf7\u6c42\u5b8c\u6210\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u591a\u79cd\u65b9\u5f0f\u5728 Python \u4e2d\u5b9e\u73b0\u5f02\u6b65\u7f16\u7a0b\uff0c\u5c3d\u7ba1\u5176\u4e2d\u4e00\u4e9b\u4e0e Python \u5e76\u53d1\u6027\u6700\u76f8\u5173\u3002</p> <p>\u7b2c\u4e00\u4e2a\u660e\u663e\u7684\u4f8b\u5b50\u662f asyncio \u6a21\u5757\u3002 \u8be5\u6a21\u5757\u4f7f\u7528 async/await \u8bed\u6cd5\u4ee5\u53ca\u5e26\u6709\u5957\u63a5\u5b57\u548c\u5b50\u8fdb\u7a0b\u7684\u975e\u963b\u585e I/O \u76f4\u63a5\u63d0\u4f9b\u5f02\u6b65\u7f16\u7a0b\u73af\u5883\u3002</p> <p>asyncio \u662f\u5f02\u6b65 I/O \u7684\u7f29\u5199\u3002 \u5b83\u662f\u4e00\u4e2a Python \u5e93\uff0c\u5141\u8bb8\u6211\u4eec\u4f7f\u7528\u5f02\u6b65\u7f16\u7a0b\u6a21\u578b\u8fd0\u884c\u4ee3\u7801\u3002 \u8fd9\u8ba9\u6211\u4eec\u53ef\u4ee5\u540c\u65f6\u5904\u7406\u591a\u4e2a I/O \u64cd\u4f5c\uff0c\u540c\u65f6\u4ecd\u7136\u5141\u8bb8\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u4fdd\u6301\u54cd\u5e94\u80fd\u529b\u3002</p> <p>\u2014 PAGE 3, PYTHON CONCURRENCY WITH ASYNCIO, 2022.</p> <p>\u5b83\u662f\u4f7f\u7528\u5728\u4e8b\u4ef6\u5faa\u73af\u4e2d\u8fd0\u884c\u7684\u534f\u7a0b\u5b9e\u73b0\u7684\uff0c\u4e8b\u4ef6\u5faa\u73af\u672c\u8eab\u5728\u5355\u4e2a\u7ebf\u7a0b\u4e2d\u8fd0\u884c\u3002</p> <ul> <li>Asyncio: Python \u901a\u8fc7 asyncio \u6a21\u5757\u63d0\u4f9b\u7684\u5f02\u6b65\u7f16\u7a0b\u73af\u5883\u3002</li> </ul> <p>\u66f4\u5e7f\u6cdb\u5730\u8bf4\uff0cPython \u63d0\u4f9b\u4e86\u53ef\u4ee5\u5f02\u6b65\u6267\u884c\u4efb\u52a1\u7684\u7ebf\u7a0b\u548c\u8fdb\u7a0b\u3002</p> <p>\u4f8b\u5982\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u542f\u52a8\u7b2c\u4e8c\u4e2a\u7ebf\u7a0b\u6765\u6267\u884c\u51fd\u6570\u8c03\u7528\u5e76\u6062\u590d\u5176\u4ed6\u6d3b\u52a8\u3002 \u64cd\u4f5c\u7cfb\u7edf\u5c06\u5728\u67d0\u4e2a\u65f6\u95f4\u8c03\u5ea6\u5e76\u6267\u884c\u7b2c\u4e8c\u4e2a\u7ebf\u7a0b\uff0c\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u80fd\u4f1a\u4e5f\u53ef\u80fd\u4e0d\u4f1a\u624b\u52a8\u68c0\u67e5\u4efb\u52a1\u7684\u72b6\u6001\u3002</p> <p>\u7ebf\u7a0b\u662f\u5f02\u6b65\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u53ef\u80fd\u4ee5\u4e0d\u540c\u7684\u901f\u5ea6\u8fd0\u884c\uff0c\u5e76\u4e14\u4efb\u4f55\u7ebf\u7a0b\u90fd\u53ef\u80fd\u968f\u65f6\u505c\u6b62\u4e0d\u53ef\u9884\u6d4b\u7684\u6301\u7eed\u65f6\u95f4\u3002</p> <p>\u2014 PAGE 76, THE ART OF MULTIPROCESSOR PROGRAMMING, 2020.</p> <p>\u66f4\u5177\u4f53\u5730\u8bf4\uff0cPython \u5728 ThreadPoolExecutor \u548c ProcessPoolExeuctor \u7c7b\u4e2d\u63d0\u4f9b\u4e86\u57fa\u4e8e\u6267\u884c\u5668\u7684\u7ebf\u7a0b\u6c60\u548c\u8fdb\u7a0b\u6c60\u3002</p> <p>\u8fd9\u4e9b\u7c7b\u4f7f\u7528\u76f8\u540c\u7684\u63a5\u53e3\uff0c\u5e76\u901a\u8fc7\u8fd4\u56de Future \u5bf9\u8c61\u7684 submit() \u65b9\u6cd5\u652f\u6301\u5f02\u6b65\u4efb\u52a1\u3002</p> <p>Concurrent.futures \u6a21\u5757\u4e3a\u5f02\u6b65\u6267\u884c\u53ef\u8c03\u7528\u5bf9\u8c61\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9ad8\u7ea7\u63a5\u53e3\u3002 \u5f02\u6b65\u6267\u884c\u53ef\u4ee5\u4f7f\u7528 ThreadPoolExecutor \u901a\u8fc7\u7ebf\u7a0b\u6267\u884c\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 ProcessPoolExecutor \u901a\u8fc7\u5355\u72ec\u7684\u8fdb\u7a0b\u6267\u884c\u3002</p> <p>\u2014 CONCURRENT.FUTURES \u2014 LAUNCHING PARALLEL TASKS</p> <p>multiprocessing \u6a21\u5757\u8fd8\u63d0\u4f9b\u4f7f\u7528 Pool \u548c ThreadPool \u7c7b\u4e2d\u7684\u8fdb\u7a0b\u548c\u7ebf\u7a0b\u7684\u5de5\u4f5c\u7ebf\u7a0b\u6c60\uff0c\u8fd9\u4e9b\u7c7b\u662f ThreadPoolExecutor \u548c ProcessPoolExeuctor \u7c7b\u7684\u524d\u7f6e\u8fd0\u884c\u5668\u3002</p> <p>\u8fd9\u4e9b\u7c7b\u7684\u529f\u80fd\u662f\u6839\u636e\u5f02\u6b65\u6267\u884c\u4efb\u52a1\u6765\u63cf\u8ff0\u7684\u3002 \u5b83\u4eec\u660e\u786e\u63d0\u4f9b\u7528\u4e8e\u6267\u884c\u4efb\u52a1\u7684\u6bcf\u4e2a\u65b9\u6cd5\u7684\u540c\u6b65\uff08\u963b\u585e\uff09\u548c\u5f02\u6b65\uff08\u975e\u963b\u585e\uff09\u7248\u672c\u3002</p> <p>\u4f8b\u5982\uff0c\u53ef\u4ee5\u901a\u8fc7 apply() \u65b9\u6cd5\u540c\u6b65\u53d1\u51fa\u4e00\u6b21\u6027\u51fd\u6570\u8c03\u7528\uff0c\u6216\u901a\u8fc7 apply_async() \u65b9\u6cd5\u5f02\u6b65\u53d1\u51fa\u4e00\u6b21\u6027\u51fd\u6570\u8c03\u7528\u3002</p> <p>\u4e00\u4e2a\u8fdb\u7a0b\u6c60\u5bf9\u8c61\uff0c\u5b83\u63a7\u5236\u53ef\u4ee5\u5411\u5176\u63d0\u4ea4\u4f5c\u4e1a\u7684\u5de5\u4f5c\u8fdb\u7a0b\u6c60\u3002 \u5b83\u652f\u6301\u5e26\u6709\u8d85\u65f6\u548c\u56de\u8c03\u7684\u5f02\u6b65\u7ed3\u679c\uff0c\u5e76\u5177\u6709\u5e76\u884c\u6620\u5c04\u5b9e\u73b0\u3002</p> <p>\u2014 MULTIPROCESSING \u2014 PROCESS-BASED PARALLELISM</p> <p>Python \u4e2d\u7684\u5f02\u6b65\u7f16\u7a0b\u8fd8\u6709\u5176\u4ed6\u65b9\u9762\u4e0e Python \u5e76\u53d1\u6027\u7684\u5173\u7cfb\u4e0d\u592a\u4e25\u683c\u3002</p> <p>\u4f8b\u5982\uff0cPython \u8fdb\u7a0b\u5f02\u6b65\u63a5\u6536\u6216\u5904\u7406\u4fe1\u53f7\u3002 \u4fe1\u53f7\u672c\u8d28\u4e0a\u662f\u4ece\u5176\u4ed6\u8fdb\u7a0b\u53d1\u9001\u7684\u5f02\u6b65\u4e8b\u4ef6\u3002</p> <p>\u8fd9\u4e3b\u8981\u7531 signal \u6a21\u5757\u652f\u6301\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u4e86\u89e3\u4e86\u5f02\u6b65\u7f16\u7a0b\uff0c\u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b asyncio\u3002</p> <p>\u8981\u4f7f\u7528\u6240\u6709 CPU \u8fd0\u884c\u4e8b\u4ef6\u5faa\u73af\uff0c\u53ef\u4ee5\u4e0b\u8f7d\u6211\u7684\u514d\u8d39\u4e66 \u4ee5\u4e86\u89e3\u5982\u4f55\u64cd\u4f5c\u3002</p> <p>Broadly, asynchronous programming in Python refers to making requests and not blocking to wait for them to complete.</p> <p>We can implement asynchronous programming in Python in various ways, although a few are most relevant for Python concurrency.</p> <p>The first and obvious example is the asyncio module. This module directly offers an asynchronous programming environment using the async/await syntax and non-blocking I/O with sockets and subprocesses.</p> <p>asyncio is short for asynchronous I/O. It is a Python library that allows us to run code using an asynchronous programming model. This lets us handle multiple I/O operations at once, while still allowing our application to remain responsive.</p> <p>\u2014 PAGE 3, PYTHON CONCURRENCY WITH ASYNCIO, 2022.</p> <p>It is implemented using coroutines that run in an event loop that itself runs in a single thread.</p> <ul> <li>Asyncio: An asynchronous programming environment provided in Python via the asyncio module.</li> </ul> <p>More broadly, Python offers threads and processes that can execute tasks asynchronously.</p> <p>For example, one thread can start a second thread to execute a function call and resume other activities. The operating system will schedule and execute the second thread at some time and the first thread may or may not check on the status of the task, manually.</p> <p>Threads are asynchronous, meaning that they may run at different speeds, and any thread can halt for an unpredictable duration at any time.</p> <p>\u2014 PAGE 76, THE ART OF MULTIPROCESSOR PROGRAMMING, 2020.</p> <p>More concretely, Python provides executor-based thread pools and process pools in the ThreadPoolExecutor and ProcessPoolExeuctor classes.</p> <p>These classes use the same interface and support asynchronous tasks via the submit() method that returns a Future object.</p> <p>The concurrent.futures module provides a high-level interface for asynchronously executing callables. The asynchronous execution can be performed with threads, using ThreadPoolExecutor, or separate processes, using ProcessPoolExecutor.</p> <p>\u2014 CONCURRENT.FUTURES \u2014 LAUNCHING PARALLEL TASKS</p> <p>The multiprocessing module also provides pools of workers using processes and threads in the Pool and ThreadPool classes, forerunners to the ThreadPoolExecutor and ProcessPoolExeuctor classes.</p> <p>The capabilities of these classes are described in terms of worker execution tasks asynchronously. They explicitly provide synchronous (blocking) and asynchronous (non-blocking) versions of each method for executing tasks.</p> <p>For example, one may issue a one-off function call synchronously via the apply() method or asynchronously via the apply_async() method.</p> <p>A process pool object which controls a pool of worker processes to which jobs can be submitted. It supports asynchronous results with timeouts and callbacks and has a parallel map implementation.</p> <p>\u2014 MULTIPROCESSING \u2014 PROCESS-BASED PARALLELISM</p> <p>There are other aspects of asynchronous programming in Python that are less strictly related to Python concurrency.</p> <p>For example, Python processes receive or handle signals asynchronously. Signals are fundamentally asynchronous events sent from other processes.</p> <p>This is primarily supported by the signal module.</p> <p>Now that we know about asynchronous programming, let\u2019s take a closer look at asyncio.</p> <p>Run your loops using all CPUs, download my FREE book to learn how.</p>"},{"location":"asyncio/en/c10/","title":"10. \u540c\u65f6\u8fd0\u884c\u591a\u4e2a\u534f\u7a0b","text":"<p>10. Run Many Coroutines Concurrently</p> \u4e2d\u6587\u82f1\u6587 <p>asyncio \u7684\u4e00\u4e2a\u597d\u5904\u662f\u6211\u4eec\u53ef\u4ee5\u540c\u65f6\u8fd0\u884c\u8bb8\u591a\u534f\u7a0b\u3002</p> <p>\u8fd9\u4e9b\u534f\u7a0b\u53ef\u4ee5\u5728\u4e00\u4e2a\u7ec4\u4e2d\u521b\u5efa\u5e76\u5b58\u50a8\uff0c\u7136\u540e\u540c\u65f6\u4e00\u8d77\u6267\u884c\u3002</p> <p>\u8fd9\u53ef\u4ee5\u4f7f\u7528 asyncio.gather() \u51fd\u6570\u6765\u5b9e\u73b0\u3002</p> <p>\u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b\u3002</p> <p>A benefit of asyncio is that we can run many coroutines concurrently.</p> <p>These coroutines can be created in a group and stored, then executed all together at the same time.</p> <p>This can be achieved using the asyncio.gather() function.</p> <p>Let\u2019s take a closer look.</p>"},{"location":"asyncio/en/c10/#101-\u4ec0\u4e48\u662f-asyncio-gather","title":"10.1 \u4ec0\u4e48\u662f Asyncio Gather()","text":"<p>10.1 What is Asyncio gather()</p> \u4e2d\u6587\u82f1\u6587 <p>asyncio.gather() \u6a21\u5757\u51fd\u6570\u5141\u8bb8\u8c03\u7528\u8005\u5c06\u591a\u4e2a\u53ef\u7b49\u5f85\u9879\u7ec4\u5408\u5728\u4e00\u8d77\u3002</p> <p>\u4e00\u65e6\u5206\u7ec4\uff0c\u53ef\u7b49\u5f85\u9879\u5c31\u53ef\u4ee5\u5e76\u53d1\u6267\u884c\u3001\u7b49\u5f85\u548c\u53d6\u6d88\u3002</p> <p>\u540c\u65f6\u8fd0\u884c aws \u5e8f\u5217\u4e2d\u7684\u53ef\u7b49\u5f85\u5bf9\u8c61\u3002</p> <p>\u2014 COROUTINES AND TASKS</p> <p>\u5bf9\u4e8e\u5206\u7ec4\u548c\u6267\u884c\u591a\u4e2a\u534f\u7a0b\u6216\u591a\u4e2a\u4efb\u52a1\u6765\u8bf4\uff0c\u5b83\u662f\u4e00\u4e2a\u6709\u7528\u7684\u5b9e\u7528\u51fd\u6570\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u8fd0\u884c\u53ef\u7b49\u5f85\u5bf9\u8c61\u96c6\u5408\nresults = await asyncio.gather(coro1(), asyncio.create_task(coro2()))\n</code></pre> <p>\u5728\u6211\u4eec\u53ef\u80fd\u9884\u5148\u521b\u5efa\u8bb8\u591a\u4efb\u52a1\u6216\u534f\u7a0b\uff0c\u7136\u540e\u5e0c\u671b\u4e00\u6b21\u6267\u884c\u6240\u6709\u4efb\u52a1\u6216\u534f\u7a0b\u5e76\u7b49\u5f85\u5b83\u4eec\u5168\u90e8\u5b8c\u6210\u7136\u540e\u518d\u7ee7\u7eed\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 asyncio.gather() \u51fd\u6570\u3002</p> <p>\u8fd9\u662f\u4e00\u79cd\u53ef\u80fd\u7684\u60c5\u51b5\uff0c\u5176\u4e2d\u9700\u8981\u8bb8\u591a\u7c7b\u4f3c\u4efb\u52a1\u7684\u7ed3\u679c\uff0c\u4f8b\u5982 \u5177\u6709\u4e0d\u540c\u6570\u636e\u7684\u76f8\u540c\u4efb\u52a1\u6216\u534f\u7a0b\u3002</p> <p>\u53ef\u7b49\u5f85\u5bf9\u8c61\u53ef\u4ee5\u5e76\u53d1\u6267\u884c\uff0c\u8fd4\u56de\u7ed3\u679c\uff0c\u5e76\u4e14\u4e3b\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u5b83\u6240\u4f9d\u8d56\u7684\u7ed3\u679c\u6765\u6062\u590d\u3002</p> <p>gather() \u51fd\u6570\u6bd4\u7b80\u5355\u5730\u7b49\u5f85\u4efb\u52a1\u5b8c\u6210\u66f4\u5f3a\u5927\u3002</p> <p>\u5b83\u5141\u8bb8\u5c06\u4e00\u7ec4\u53ef\u7b49\u5f85\u5bf9\u8c61\u89c6\u4e3a\u5355\u4e2a\u53ef\u7b49\u5f85\u5bf9\u8c61\u3002</p> <p>\u8fd9\u5141\u8bb8\uff1a</p> <ul> <li>\u901a\u8fc7 await \u8868\u8fbe\u5f0f\u6267\u884c\u5e76\u7b49\u5f85\u7ec4\u4e2d\u7684\u6240\u6709\u53ef\u7b49\u5f85\u4efb\u52a1\u5b8c\u6210\u3002</li> <li>\u4ece\u6240\u6709\u5206\u7ec4\u7684\u53ef\u7b49\u5f85\u9879\u4e2d\u83b7\u53d6\u7ed3\u679c\uff0c\u4ee5\u4fbf\u7a0d\u540e\u901a\u8fc7 result() \u65b9\u6cd5\u68c0\u7d22\u3002</li> <li>\u901a\u8fc7 cancel() \u65b9\u6cd5\u53d6\u6d88\u7684\u53ef\u7b49\u5f85\u7ec4\u3002</li> <li>\u68c0\u67e5\u7ec4\u4e2d\u7684\u6240\u6709\u53ef\u7b49\u5f85\u9879\u662f\u5426\u5df2\u901a\u8fc7 done() \u65b9\u6cd5\u5b8c\u6210\u3002</li> <li>\u4ec5\u5f53\u7ec4\u4e2d\u7684\u6240\u6709\u4efb\u52a1\u5b8c\u6210\u65f6\u624d\u6267\u884c\u56de\u8c03\u51fd\u6570\u3002</li> </ul> <p>\u548c\u66f4\u591a\u3002</p> <p>The asyncio.gather() module function allows the caller to group multiple awaitables together.</p> <p>Once grouped, the awaitables can be executed concurrently, awaited, and canceled.</p> <p>Run awaitable objects in the aws sequence concurrently.</p> <p>\u2014 COROUTINES AND TASKS</p> <p>It is a helpful utility function for both grouping and executing multiple coroutines or multiple tasks.</p> <p>For example:</p> <pre><code>...\n# run a collection of awaitables\nresults = await asyncio.gather(coro1(), asyncio.create_task(coro2()))\n</code></pre> <p>We may use the asyncio.gather() function in situations where we may create many tasks or coroutines up-front and then wish to execute them all at once and wait for them all to complete before continuing on.</p> <p>This is a likely situation where the result is required from many like-tasks, e.g. same task or coroutine with different data.</p> <p>The awaitables can be executed concurrently, results returned, and the main program can resume by making use of the results on which it is dependent.</p> <p>The gather() function is more powerful than simply waiting for tasks to complete.</p> <p>It allows a group of awaitables to be treated as a single awaitable.</p> <p>This allows:</p> <ul> <li>Executing and waiting for all awaitables in the group to be done via an await expression.</li> <li>Getting results from all grouped awaitables to be retrieved later via the result() method.</li> <li>The group of awaitables to be canceled via the cancel() method.</li> <li>Checking if all awaitables in the group are done via the done() method.</li> <li>Executing callback functions only when all tasks in the group are done.</li> </ul> <p>And more.</p>"},{"location":"asyncio/en/c10/#102-\u5982\u4f55\u4f7f\u7528-asyncio-gather","title":"10.2 \u5982\u4f55\u4f7f\u7528 Asyncio Gather()","text":"<p>10.2 How to use Asyncio gather()</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u4ed4\u7ec6\u7814\u7a76\u5982\u4f55\u4f7f\u7528 asyncio.gather() \u51fd\u6570\u3002</p> <p>asyncio.gather() \u51fd\u6570\u91c7\u7528\u4e00\u4e2a\u6216\u591a\u4e2a\u53ef\u7b49\u5f85\u9879\u4f5c\u4e3a\u53c2\u6570\u3002</p> <p>\u56de\u60f3\u4e00\u4e0b\uff0c\u53ef\u7b49\u5f85\u7684\u53ef\u80fd\u662f\u534f\u7a0b\u3001Future \u6216 Task\u3002</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u7528 gather() \u51fd\u6570\uff1a</p> <ul> <li>\u591a\u9879\u4efb\u52a1</li> <li>\u591a\u4e2a\u534f\u7a0b</li> <li>\u4efb\u52a1\u548c\u534f\u7a0b\u7684\u6df7\u5408</li> </ul> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u6267\u884c\u591a\u4e2a\u534f\u7a0b\nasyncio.gather(coro1(), coro2())\n</code></pre> <p>\u5982\u679c\u5c06 Task \u5bf9\u8c61\u63d0\u4f9b\u7ed9 gather()\uff0c\u5b83\u4eec\u5c06\u5df2\u7ecf\u5728\u8fd0\u884c\uff0c\u56e0\u4e3a Task \u662f\u4f5c\u4e3a\u521b\u5efa\u7684\u4e00\u90e8\u5206\u8fdb\u884c\u8c03\u5ea6\u7684\u3002</p> <p>asyncio.gather() \u51fd\u6570\u5c06\u53ef\u7b49\u5f85\u5bf9\u8c61\u4f5c\u4e3a\u4f4d\u7f6e\u53c2\u6570\u3002</p> <p>\u6211\u4eec\u65e0\u6cd5\u521b\u5efa\u53ef\u7b49\u5f85\u9879\u7684\u5217\u8868\u6216\u96c6\u5408\u5e76\u5c06\u5176\u63d0\u4f9b\u7ed9\u6536\u96c6\uff0c\u56e0\u4e3a\u8fd9\u4f1a\u5bfc\u81f4\u9519\u8bef\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u65e0\u6cd5\u76f4\u63a5\u63d0\u4f9b\u53ef\u7b49\u5f85\u5217\u8868\nasyncio.gather([coro1(), coro2()])\n</code></pre> <p>\u5982\u679c\u9996\u5148\u4f7f\u7528\u661f\u53f7\u8fd0\u7b97\u7b26 (*) \u5c06\u5176\u89e3\u5305\u5230\u5355\u72ec\u7684\u8868\u8fbe\u5f0f\u4e2d\uff0c\u5219\u53ef\u4ee5\u63d0\u4f9b\u53ef\u7b49\u5f85\u5217\u8868\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u6536\u96c6\u4e00\u4efd\u5df2\u89e3\u538b\u7684\u7b49\u5f85\u5217\u8868\nasyncio.gather(*[coro1(), coro2()])\n</code></pre> <p>\u5982\u679c\u5411 gather() \u63d0\u4f9b\u534f\u7a0b\uff0c\u5b83\u4eec\u4f1a\u81ea\u52a8\u5305\u88c5\u5728 Task \u5bf9\u8c61\u4e2d\u3002</p> <p>gather() \u51fd\u6570\u4e0d\u4f1a\u963b\u585e\u3002</p> <p>\u76f8\u53cd\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u4ee3\u8868\u53ef\u7b49\u5f85\u7ec4\u7684 asyncio.Future \u5bf9\u8c61\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u5f97\u5230\u4e00\u4e2a\u4ee3\u8868\u591a\u4e2a\u53ef\u7b49\u5f85\u5bf9\u8c61\u7684Future\u5bf9\u8c61\ngroup = asyncio.gather(coro1(), coro2())\n</code></pre> <p>\u4e00\u65e6\u521b\u5efa\u4e86 Future \u5bf9\u8c61\uff0c\u5b83\u5c31\u4f1a\u5728\u4e8b\u4ef6\u5faa\u73af\u4e2d\u81ea\u52a8\u8c03\u5ea6\u3002</p> <p>\u53ef\u7b49\u5f85\u4ee3\u8868\u7ec4\uff0c\u7ec4\u4e2d\u7684\u6240\u6709\u53ef\u7b49\u5f85\u5c06\u5c3d\u5feb\u6267\u884c\u3002</p> <p>\u8fd9\u610f\u5473\u7740\u5982\u679c\u8c03\u7528\u8005\u6ca1\u6709\u6267\u884c\u4efb\u4f55\u5176\u4ed6\u64cd\u4f5c\uff0c\u5219\u9884\u5b9a\u7684\u7b49\u5f85\u7ec4\u5c06\u8fd0\u884c\uff08\u5047\u8bbe\u8c03\u7528\u8005\u6302\u8d77\uff09\u3002</p> <p>\u8fd9\u4e5f\u610f\u5473\u7740\u60a8\u4e0d\u5fc5\u7b49\u5f85\u4ece gather() \u8fd4\u56de\u7684 Future\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u5f97\u5230\u4e00\u4e2a\u4ee3\u8868\u591a\u4e2a\u53ef\u7b49\u5f85\u5bf9\u8c61\u7684Future\u5bf9\u8c61\ngroup = asyncio.gather(coro1(), coro2())\n# \u6302\u8d77\u5e76\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\uff0c\u8be5\u7ec4\u53ef\u80fd\u6b63\u5728\u6267\u884c..\nawait asyncio.sleep(10)\n</code></pre> <p>\u53ef\u4ee5\u7b49\u5f85\u8fd4\u56de\u7684 Future \u5bf9\u8c61\uff0c\u5b83\u5c06\u7b49\u5f85\u7ec4\u4e2d\u7684\u6240\u6709\u53ef\u7b49\u5f85\u4efb\u52a1\u5b8c\u6210\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u8fd0\u884c\u53ef\u7b49\u5f85\u5bf9\u8c61\u7ec4\nawait group\n</code></pre> <p>\u7b49\u5f85\u4ece gather() \u8fd4\u56de\u7684 Future \u5c06\u8fd4\u56de\u53ef\u7b49\u5f85\u9879\u7684\u8fd4\u56de\u503c\u5217\u8868\u3002</p> <p>\u5982\u679c\u53ef\u7b49\u5f85\u9879\u4e0d\u8fd4\u56de\u503c\uff0c\u5219\u6b64\u5217\u8868\u5c06\u5305\u542b\u9ed8\u8ba4\u7684 \u201cNone\u201d \u8fd4\u56de\u503c\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u8fd0\u884c\u53ef\u7b49\u5f85\u7ec4\u5e76\u83b7\u53d6\u8fd4\u56de\u503c\nresults = await group\n</code></pre> <p>\u8fd9\u901a\u5e38\u5728\u4e00\u884c\u4e2d\u6267\u884c\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u5728\u4e00\u884c\u4e2d\u8fd0\u884c\u4efb\u52a1\u5e76\u83b7\u53d6\u7ed3\u679c\nresults = await asyncio.gather(coro1(), coro2())\n</code></pre> <p>In this section, we will take a closer look at how we might use the asyncio.gather() function.</p> <p>The asyncio.gather() function takes one or more awaitables as arguments.</p> <p>Recall an awaitable may be a coroutine, a Future or a Task.</p> <p>Therefore, we can call the gather() function with:</p> <ul> <li>Multiple tasks</li> <li>Multiple coroutines</li> <li>Mixture of tasks and coroutines</li> </ul> <p>For example:</p> <pre><code>...\n# execute multiple coroutines\nasyncio.gather(coro1(), coro2())\n</code></pre> <p>If Task objects are provided to gather(), they will already be running because Tasks are scheduled as part of being created.</p> <p>The asyncio.gather() function takes awaitables as position arguments.</p> <p>We cannot create a list or collection of awaitables and provide it to gather, as this will result in an error.</p> <p>For example:</p> <pre><code>...\n# cannot provide a list of awaitables directly\nasyncio.gather([coro1(), coro2()])\n</code></pre> <p>A list of awaitables can be provided if it is first unpacked into separate expressions using the star operator (*).</p> <p>For example:</p> <pre><code>...\n# gather with an unpacked list of awaitables\nasyncio.gather(*[coro1(), coro2()])\n</code></pre> <p>If coroutines are provided to gather(), they are wrapped in Task objects automatically.</p> <p>The gather() function does not block.</p> <p>Instead, it returns an asyncio.Future object that represents the group of awaitables.</p> <p>For example:</p> <pre><code>...\n# get a future that represents multiple awaitables\ngroup = asyncio.gather(coro1(), coro2())\n</code></pre> <p>Once the Future object is created it is scheduled automatically within the event loop.</p> <p>The awaitable represents the group, and all awaitables in the group will execute as soon as they are able.</p> <p>This means that if the caller did nothing else, the scheduled group of awaitables will run (assuming the caller suspends).</p> <p>It also means that you do not have to await the Future that is returned from gather().</p> <p>For example:</p> <pre><code>...\n# get a future that represents multiple awaitables\ngroup = asyncio.gather(coro1(), coro2())\n# suspend and wait a while, the group may be executing..\nawait asyncio.sleep(10)\n</code></pre> <p>The returned Future object can be awaited which will wait for all awaitables in the group to be done.</p> <p>For example:</p> <pre><code>...\n# run the group of awaitables\nawait group\n</code></pre> <p>Awaiting the Future returned from gather() will return a list of return values from the awaitables.</p> <p>If the awaitables do not return a value, then this list will contain the default \u201cNone\u201d return value.</p> <p>For example:</p> <pre><code>...\n# run the group of awaitables and get return values\nresults = await group\n</code></pre> <p>This is more commonly performed in one line.</p> <p>For example:</p> <pre><code>...\n# run tasks and get results on one line\nresults = await asyncio.gather(coro1(), coro2())\n</code></pre>"},{"location":"asyncio/en/c10/#103-\u5bf9\u4e8e\u5217\u8868\u4e2d\u7684\u591a\u4e2a\u534f\u7a0b\u7684-gather-\u793a\u4f8b","title":"10.3 \u5bf9\u4e8e\u5217\u8868\u4e2d\u7684\u591a\u4e2a\u534f\u7a0b\u7684 Gather() \u793a\u4f8b","text":"<p>10.3 Example of gather() For Many Coroutines in a List</p> \u4e2d\u6587\u82f1\u6587 <p>\u9884\u5148\u521b\u5efa\u591a\u4e2a\u534f\u7a0b\u7136\u540e\u7a0d\u540e\u6536\u96c6\u5b83\u4eec\u662f\u5f88\u5e38\u89c1\u7684\u3002</p> <p>\u8fd9\u5141\u8bb8\u7a0b\u5e8f\u51c6\u5907\u8981\u5e76\u53d1\u6267\u884c\u7684\u4efb\u52a1\uff0c\u7136\u540e\u7acb\u5373\u89e6\u53d1\u5b83\u4eec\u7684\u5e76\u53d1\u6267\u884c\u5e76\u7b49\u5f85\u5b83\u4eec\u5b8c\u6210\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u624b\u52a8\u6216\u4f7f\u7528\u5217\u8868\u7406\u89e3\u5c06\u8bb8\u591a\u534f\u7a0b\u6536\u96c6\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u8bb8\u591a\u534f\u7a0b\ncoros = [task_coro(i) for i in range(10)]\n</code></pre> <p>\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5bf9\u5217\u8868\u4e2d\u7684\u6240\u6709\u534f\u7a0b\u8c03\u7528gather()\u3002</p> <p>\u534f\u7a0b\u5217\u8868\u4e0d\u80fd\u76f4\u63a5\u63d0\u4f9b\u7ed9 gather() \u51fd\u6570\uff0c\u56e0\u4e3a\u8fd9\u4f1a\u5bfc\u81f4\u9519\u8bef\u3002</p> <p>\u76f8\u53cd\uff0c gather() \u51fd\u6570\u8981\u6c42\u5c06\u6bcf\u4e2a\u53ef\u7b49\u5f85\u9879\u4f5c\u4e3a\u5355\u72ec\u7684\u4f4d\u7f6e\u53c2\u6570\u63d0\u4f9b\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5c06\u5217\u8868\u5c55\u5f00\u4e3a\u5355\u72ec\u7684\u8868\u8fbe\u5f0f\u5e76\u5c06\u5b83\u4eec\u4f20\u9012\u7ed9 gather() \u51fd\u6570\u6765\u5b9e\u73b0\u3002 \u661f\u53f7\u8fd0\u7b97\u7b26\uff08*\uff09\u5c06\u4e3a\u6211\u4eec\u6267\u884c\u6b64\u64cd\u4f5c\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u8fd0\u884c\u4efb\u52a1\nawait asyncio.gather(*coros)\n</code></pre> <p>\u5c06\u5b83\u4eec\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u4e0b\u9762\u5217\u51fa\u4e86\u4f7f\u7528 Gather() \u8fd0\u884c\u9884\u5148\u51c6\u5907\u7684\u534f\u7a0b\u5217\u8868\u7684\u5b8c\u6574\u793a\u4f8b\u3002</p> <pre><code># SuperFastPython.com\n# \u6536\u96c6\u5217\u8868\u4e2d\u8bb8\u591a\u534f\u7a0b\u7684\u793a\u4f8b\nimport asyncio\n\n# \u7528\u4e8e\u4efb\u52a1\u7684\u534f\u7a0b\nasync def task_coro(value):\n    # \u62a5\u544a\u6d88\u606f\n    print(f'&gt;task {value} executing')\n    # \u7761\u4e00\u4f1a\u513f\n    await asyncio.sleep(1)\n\n# coroutine used for the entry point\nasync def main():\n    # \u62a5\u544a\u6d88\u606f\n    print('main starting')\n    # \u521b\u5efa\u8bb8\u591a\u534f\u7a0b\n    coros = [task_coro(i) for i in range(10)]\n    # \u8fd0\u884c\u4efb\u52a1\n    await asyncio.gather(*coros)\n    # \u62a5\u544a\u6d88\u606f\n    print('main done')\n\n# \u542f\u52a8\u5f02\u6b65\u7a0b\u5e8f\nasyncio.run(main())\n</code></pre> <p>\u8fd0\u884c\u8be5\u793a\u4f8b\u5c06\u6267\u884c main() \u534f\u7a0b\u4f5c\u4e3a\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u3002</p> <p>\u7136\u540e\uff0cmain() \u534f\u7a0b\u4f7f\u7528\u5217\u8868\u7406\u89e3\u521b\u5efa\u4e00\u4e2a\u5305\u542b 10 \u4e2a\u534f\u7a0b\u5bf9\u8c61\u7684\u5217\u8868\u3002</p> <p>\u7136\u540e\u5c06\u8be5\u5217\u8868\u63d0\u4f9b\u7ed9 gather() \u51fd\u6570\uff0c\u5e76\u4f7f\u7528\u661f\u53f7\u8fd0\u7b97\u7b26\u5c06\u5176\u89e3\u5305\u4e3a 10 \u4e2a\u5355\u72ec\u7684\u8868\u8fbe\u5f0f\u3002</p> <p>\u7136\u540e\uff0cmain() \u534f\u7a0b\u7b49\u5f85\u4ece\u8c03\u7528 Gather() \u8fd4\u56de\u7684 Future \u5bf9\u8c61\uff0c\u6302\u8d77\u5e76\u7b49\u5f85\u6240\u6709\u5df2\u8c03\u5ea6\u7684\u534f\u7a0b\u5b8c\u6210\u5176\u6267\u884c\u3002</p> <p>\u534f\u7a0b\u4f1a\u5c3d\u5feb\u8fd0\u884c\uff0c\u62a5\u544a\u5176\u72ec\u7279\u7684\u6d88\u606f\u5e76\u5728\u7ec8\u6b62\u524d\u4f11\u7720\u3002</p> <p>\u4ec5\u5f53\u7ec4\u4e2d\u7684\u6240\u6709\u534f\u7a0b\u5b8c\u6210\u540e\uff0c main() \u534f\u7a0b\u624d\u4f1a\u6062\u590d\u5e76\u62a5\u544a\u5176\u6700\u7ec8\u6d88\u606f\u3002</p> <p>\u8fd9\u5f3a\u8c03\u4e86\u6211\u4eec\u5982\u4f55\u51c6\u5907\u534f\u7a0b\u96c6\u5408\u5e76\u5c06\u5b83\u4eec\u4f5c\u4e3a\u5355\u72ec\u7684\u8868\u8fbe\u5f0f\u63d0\u4f9b\u7ed9 gather() \u51fd\u6570\u3002</p> <pre><code>main starting\n&gt;task 0 executing\n&gt;task 1 executing\n&gt;task 2 executing\n&gt;task 3 executing\n&gt;task 4 executing\n&gt;task 5 executing\n&gt;task 6 executing\n&gt;task 7 executing\n&gt;task 8 executing\n&gt;task 9 executing\nmain done\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173\u5982\u4f55\u4f7f\u7528 Gather() \u51fd\u6570\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>\u5982\u4f55\u5728 Python \u4e2d\u4f7f\u7528 asyncio.gather()</li> </ul> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u63a2\u8ba8\u5982\u4f55\u7b49\u5f85\u4e00\u7ec4\u5f02\u6b65\u4efb\u52a1\u3002</p> <p>It is common to create multiple coroutines beforehand and then gather them later.</p> <p>This allows a program to prepare the tasks that are to be executed concurrently and then trigger their concurrent execution all at once and wait for them to complete.</p> <p>We can collect many coroutines together into a list either manually or using a list comprehension.</p> <p>For example:</p> <pre><code>...\n# create many coroutines\ncoros = [task_coro(i) for i in range(10)]\n</code></pre> <p>We can then call gather() with all coroutines in the list.</p> <p>The list of coroutines cannot be provided directly to the gather() function as this will result in an error.</p> <p>Instead, the gather() function requires each awaitable to be provided as a separate positional argument.</p> <p>This can be achieved by unwrapping the list into separate expressions and passing them to the gather() function. The star operator (*) will perform this operation for us.</p> <p>For example:</p> <pre><code>...\n# run the tasks\nawait asyncio.gather(*coros)\nTying this together, the complete example of running a list of pre-prepared coroutines with gather() is listed below.\n\n# SuperFastPython.com\n# example of gather for many coroutines in a list\nimport asyncio\n\n# coroutine used for a task\nasync def task_coro(value):\n    # report a message\n    print(f'&gt;task {value} executing')\n    # sleep for a moment\n    await asyncio.sleep(1)\n\n# coroutine used for the entry point\nasync def main():\n    # report a message\n    print('main starting')\n    # create many coroutines\n    coros = [task_coro(i) for i in range(10)]\n    # run the tasks\n    await asyncio.gather(*coros)\n    # report a message\n    print('main done')\n\n# start the asyncio program\nasyncio.run(main())\n</code></pre> <p>Running the example executes the main() coroutine as the entry point to the program.</p> <p>The main() coroutine then creates a list of 10 coroutine objects using a list comprehension.</p> <p>This list is then provided to the gather() function and unpacked into 10 separate expressions using the star operator.</p> <p>The main() coroutine then awaits the Future object returned from the call to gather(), suspending and waiting for all scheduled coroutines to complete their execution.</p> <p>The coroutines run as soon as they are able, reporting their unique messages and sleeping before terminating.</p> <p>Only after all coroutines in the group are complete does the main() coroutine resume and report its final message.</p> <p>This highlights how we might prepare a collection of coroutines and provide them as separate expressions to the gather() function.</p> <pre><code>main starting\n&gt;task 0 executing\n&gt;task 1 executing\n&gt;task 2 executing\n&gt;task 3 executing\n&gt;task 4 executing\n&gt;task 5 executing\n&gt;task 6 executing\n&gt;task 7 executing\n&gt;task 8 executing\n&gt;task 9 executing\nmain done\n</code></pre> <p>You can learn more about how to use the gather() function in the tutorial:</p> <ul> <li>How to Use asyncio.gather() in Python</li> </ul> <p>Next, we will explore how to wait on a group of asyncio tasks.</p>"},{"location":"asyncio/en/c11/","title":"11. \u5728Group\u4e2d\u7ba1\u7406\u591a\u4e2a\u534f\u7a0b","text":"<p>Manage Multiple Coroutines in a Group</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>**asyncio.TaskGroup**</code> \u6765\u4e00\u8d77\u7ba1\u7406\u591a\u4e2a\u534f\u7a0b\u3002</p> <p>\u5982\u679c\u7ec4\u4e2d\u7684\u67d0\u4e2a\u4efb\u52a1\u56e0\u5f02\u5e38\u5931\u8d25\uff0c\u7ec4\u4e2d\u7684\u6240\u6709\u4efb\u52a1\u90fd\u4f1a\u81ea\u52a8\u88ab\u53d6\u6d88\u3002</p> <p>We can manage multiple coroutines together in a group using the asyncio.TaskGroup.</p> <p>If a task in the group fails with an exception, all tasks in the group are cancelled automatically.</p>"},{"location":"asyncio/en/c11/#111-asynciotaskgroup\u7b80\u4ecb","title":"11.1 asyncio.TaskGroup\u7b80\u4ecb","text":"<p>What is an asyncio.TaskGroup</p> \u4e2d\u6587\u82f1\u6587 <p>Python 3.11 \u5f15\u5165\u4e86\u7528\u4e8e\u7ba1\u7406\u5173\u8054 <code>asyncio</code> \u4efb\u52a1\u7ec4\u7684 <code>asyncio.TaskGroup</code>\u3002</p> <p>\u6dfb\u52a0\u4e86 <code>TaskGroup</code> \u7c7b\uff0c\u8fd9\u662f\u4e00\u79cd\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c\u6301\u6709\u4e00\u4e2a\u4efb\u52a1\u7ec4\uff0c\u5e76\u5728\u9000\u51fa\u65f6\u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210\u3002\u5bf9\u4e8e\u65b0\u4ee3\u7801\uff0c\u63a8\u8350\u4f7f\u7528 <code>TaskGroup</code> \u800c\u4e0d\u662f\u76f4\u63a5\u4f7f\u7528 <code>create_task()</code> \u548c <code>gather()</code>\u3002</p> <ul> <li>Python 3.11 \u65b0\u7279\u6027</li> </ul> <p><code>asyncio.TaskGroup</code> \u7c7b\u65e8\u5728\u66ff\u4ee3\u7528\u4e8e\u521b\u5efa\u4efb\u52a1\u7684 <code>asyncio.create_task()</code> \u51fd\u6570\u548c\u7528\u4e8e\u7b49\u5f85\u4efb\u52a1\u7ec4\u7684 <code>asyncio.gather()</code> \u51fd\u6570\u3002</p> <p>\u5386\u53f2\u4e0a\uff0c\u6211\u4eec\u4f7f\u7528 <code>asyncio.create_task()</code> \u51fd\u6570\u521b\u5efa\u5e76\u542f\u52a8\u534f\u7a0b\u4f5c\u4e3a <code>asyncio.Task</code>\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u5e76\u542f\u52a8\u534f\u7a0b\u4f5c\u4e3a\u4efb\u52a1\ntask = asyncio.create_task(coro())\n</code></pre> <p>\u8fd9\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 <code>asyncio.Task</code> \u5bf9\u8c61\uff0c\u5e76\u5c06\u5176\u53d1\u9001\u5230 <code>asyncio</code> \u4e8b\u4ef6\u5faa\u73af\u4e2d\u5c3d\u5feb\u6267\u884c\u3002</p> <p>\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u7b49\u5f85\u8be5\u4efb\u52a1\u5b8c\u6210\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u7b49\u5f85\u4efb\u52a1\u5b8c\u6210\nresult = await task\n</code></pre> <p>\u4f60\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u5c06\u534f\u7a0b\u4f5c\u4e3a <code>asyncio.Task</code> \u5bf9\u8c61\u6267\u884c\u7684\u4fe1\u606f\uff1a</p> <ul> <li>\u5982\u4f55\u5728 Python \u4e2d\u521b\u5efa Asyncio \u4efb\u52a1</li> </ul> <p>\u6b63\u5982\u6211\u4eec\u6240\u89c1\uff0c<code>asyncio.gather()</code> \u51fd\u6570\u7528\u4e8e\u540c\u65f6\u521b\u5efa\u548c\u542f\u52a8\u591a\u4e2a\u534f\u7a0b\u4f5c\u4e3a <code>asyncio.Task</code> \u5bf9\u8c61\u53d1\u9001\u5230\u4e8b\u4ef6\u5faa\u73af\u4e2d\uff0c\u5141\u8bb8\u8c03\u7528\u8005\u5c06\u5b83\u4eec\u4f5c\u4e3a\u4e00\u4e2a\u7ec4\u6765\u5904\u7406\u3002</p> <p>\u6700\u5e38\u89c1\u7684\u7528\u6cd5\u662f\u7b49\u5f85\u6240\u6709\u542f\u52a8\u7684\u4efb\u52a1\u5b8c\u6210\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u542f\u52a8\u534f\u7a0b\u4f5c\u4e3a\u4efb\u52a1\u5e76\u7b49\u5f85\u5b83\u4eec\u5b8c\u6210\nresults = await asyncio.gather(coro1(), coro2(), coro3())\n</code></pre> <p><code>asyncio.TaskGroup</code> \u53ef\u4ee5\u6267\u884c\u8fd9\u4e9b\u64cd\u4f5c\uff0c\u5e76\u4e14\u662f\u9996\u9009\u7684\u65b9\u6cd5\u3002</p> <p>\u4e00\u4e2a\u6301\u6709\u4efb\u52a1\u7ec4\u7684\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002\u53ef\u4ee5\u4f7f\u7528 <code>create_task()</code> \u5c06\u4efb\u52a1\u6dfb\u52a0\u5230\u7ec4\u4e2d\u3002\u5f53\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u9000\u51fa\u65f6\uff0c\u6240\u6709\u4efb\u52a1\u90fd\u4f1a\u88ab\u7b49\u5f85\u5b8c\u6210\u3002</p> <ul> <li>ASYNCIO \u4efb\u52a1\u7ec4</li> </ul> <p>Python 3.11 introduced the asyncio.TaskGroup task for managing a group of associated asyncio task.</p> <p>Added the TaskGroup class, an asynchronous context manager holding a group of tasks that will wait for all of them upon exit. For new code this is recommended over using create_task() and gather() directly.</p> <ul> <li>WHAT\u2019S NEW IN PYTHON 3.11</li> </ul> <p>The asyncio.TaskGroup class is intended as a replacement for the asyncio.create_task() function for creating tasks and the asyncio.gather() function for waiting on a group of tasks.</p> <p>Historically, we create and issue a coroutine as an asyncio.Task using the asyncio.create_task() function.</p> <p>For example:</p> <pre><code>...\n# create and issue coroutine as task\ntask = asyncio.create_task(coro())\n</code></pre> <p>This creates a new asyncio.Task object and issues it to the asyncio event loop for execution as soon as it is able.</p> <p>We can then choose to await the task and wait for it to be completed.</p> <p>For example:</p> <pre><code>...\n# wait for task to complete\nresult = await task\n</code></pre> <p>You can learn more about executing coroutines as asyncio.Task objects in the tutorial:</p> <ul> <li>How to Create Asyncio Tasks in Python</li> </ul> <p>As we have seen, the asyncio.gather() function is used to create and issue many coroutines simultaneously as asyncio.Task objects to the event loop, allowing the caller to treat them all as a group.</p> <p>The most common usage is to wait for all issued tasks to complete.</p> <p>For example:</p> <pre><code>...\n# issue coroutines as tasks and wait for them to complete\nresults = await asyncio.gather(coro1(), coro2(), coro2)\n</code></pre> <p>The asyncio.TaskGroup can perform both of these activities and is the preferred approach.</p> <p>An asynchronous context manager holding a group of tasks. Tasks can be added to the group using create_task(). All tasks are awaited when the context manager exits.</p> <ul> <li>ASYNCIO TASK GROUPS</li> </ul>"},{"location":"asyncio/en/c11/#112-\u5982\u4f55\u521b\u5efa\u4e00\u4e2aasynciotaskgroup","title":"11.2 \u5982\u4f55\u521b\u5efa\u4e00\u4e2aasyncio.TaskGroup","text":"<p>How to Create an asyncio.TaskGroup</p> \u4e2d\u6587\u82f1\u6587 <p><code>asyncio.TaskGroup</code> \u5bf9\u8c61\u5b9e\u73b0\u4e86\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u63a5\u53e3\uff0c\u8fd9\u662f\u8be5\u7c7b\u7684\u9996\u9009\u4f7f\u7528\u65b9\u5f0f\u3002</p> <p>\u8fd9\u610f\u5473\u7740\u8be5\u7c7b\u7684\u5b9e\u4f8b\u662f\u901a\u8fc7 \u201casync with\u201d \u8868\u8fbe\u5f0f\u521b\u5efa\u548c\u4f7f\u7528\u7684\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u4e00\u4e2a TaskGroup\nasync with asyncio.TaskGroup() as group:\n    # ...\n</code></pre> <p>\u5982\u679c\u4f60\u5bf9 \u201casync with\u201d \u8868\u8fbe\u5f0f\u4e0d\u719f\u6089\uff0c\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u6559\u7a0b\uff1a</p> <ul> <li>\u5982\u4f55\u5728 Python \u4e2d\u4f7f\u7528 \u201casync with\u201d \u8868\u8fbe\u5f0f</li> </ul> <p>\u56de\u60f3\u4e00\u4e0b\uff0c\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5b9e\u73b0\u4e86\u53ef\u4ee5\u7b49\u5f85\u7684 <code>__aenter__()</code> \u548c <code>__aexit__()</code> \u65b9\u6cd5\u3002</p> <p>\u5bf9\u4e8e <code>asyncio.TaskGroup</code>\uff0c\u5f53\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5757\u9000\u51fa\u65f6\uff0c<code>__aexit__()</code> \u65b9\u6cd5\u4f1a\u81ea\u52a8\u88ab\u8c03\u7528\uff0c\u5e76\u4f1a\u7b49\u5f85\u6240\u6709\u7531 <code>asyncio.TaskGroup</code> \u521b\u5efa\u7684\u4efb\u52a1\u5b8c\u6210\u3002</p> <p>\u8fd9\u610f\u5473\u7740\u65e0\u8bba\u662f\u6b63\u5e38\u9000\u51fa <code>TaskGroup</code> \u5bf9\u8c61\u7684\u5757\uff0c\u8fd8\u662f\u901a\u8fc7\u5f02\u5e38\u9000\u51fa\uff0c\u90fd\u4f1a\u81ea\u52a8\u7b49\u5f85\u76f4\u5230\u6240\u6709\u7ec4\u5185\u4efb\u52a1\u5b8c\u6210\u3002</p> <pre><code>...\n# \u521b\u5efa\u4e00\u4e2a TaskGroup\nasync with asyncio.TaskGroup() as group:\n    # ...\n# \u7b49\u5f85\u6240\u6709\u7ec4\u5185\u4efb\u52a1\u5b8c\u6210\n</code></pre> <p>\u4f60\u53ef\u4ee5\u5728\u4ee5\u4e0b\u6559\u7a0b\u4e2d\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u4fe1\u606f\uff1a</p> <ul> <li>Python \u4e2d\u7684\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668</li> </ul> <p>An asyncio.TaskGroup object implements the asynchronous context manager interface, and this is the preferred usage of the class.</p> <p>This means that an instance of the class is created and is used via the \u201casync with\u201d expression.</p> <p>For example:</p> <pre><code>...\n# create a taskgroup\nasync with asyncio.TaskGroup() as group:\n    # ...\n</code></pre> <p>If you are new to the \u201casync with\u201d expression, see the tutorial:</p> <ul> <li>How to Use the \u201casync with\u201d Expression in Python</li> </ul> <p>Recall that an asynchronous context manager implements the <code>__aenter__()</code> and <code>__aexit__()</code> methods which can be awaited.</p> <p>In the case of the asyncio.TaskGroup, the <code>__aexit__()</code> method which is called automatically when the context manager block is exited will await all tasks created by the asyncio.TaskGroup.</p> <p>This means that exiting the TaskGroup object\u2019s block normally or via an exception will automatically await until all group tasks are done.</p> <pre><code>...\n# create a taskgroup\nasync with asyncio.TaskGroup() as group:\n    # ...\n# wait for all group tasks are done\n</code></pre> <p>You can learn more about asynchronous context managers in the tutorial:</p> <ul> <li>Asynchronous Context Managers in Python</li> </ul>"},{"location":"asyncio/en/c11/#113-\u5982\u4f55\u4f7f\u7528-asynciotaskgroup-\u521b\u5efa\u4efb\u52a1","title":"11.3 \u5982\u4f55\u4f7f\u7528 asyncio.TaskGroup \u521b\u5efa\u4efb\u52a1","text":"<p>How to Create Tasks Using asyncio.TaskGroup</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 <code>asyncio.TaskGroup</code> \u5bf9\u8c61\u7684 create_task() \u65b9\u6cd5\u5728\u4efb\u52a1\u7ec4\u4e2d\u521b\u5efa\u4e00\u4e2a\u4efb\u52a1\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u4e00\u4e2a TaskGroup\nasync with asyncio.TaskGroup() as group:\n    # \u521b\u5efa\u5e76\u542f\u52a8\u4e00\u4e2a\u4efb\u52a1\n    task = group.create_task(coro())\n</code></pre> <p>\u8fd9\u5c06\u521b\u5efa\u4e00\u4e2a asyncio.Task \u5bf9\u8c61\uff0c\u5e76\u5c06\u5176\u53d1\u9001\u5230 asyncio \u4e8b\u4ef6\u5faa\u73af\u4e2d\u6267\u884c\uff0c\u7c7b\u4f3c\u4e8e asyncio.create_task() \u51fd\u6570\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u8fd9\u4e2a\u4efb\u52a1\u4e0e\u4efb\u52a1\u7ec4\u76f8\u5173\u8054\u3002</p> <p>\u5982\u679c\u6211\u4eec\u9009\u62e9\u76f4\u63a5\u7b49\u5f85\u8be5\u4efb\u52a1\uff0c\u53ef\u4ee5\u83b7\u53d6\u7ed3\u679c\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u4e00\u4e2a TaskGroup\nasync with asyncio.TaskGroup() as group:\n    # \u521b\u5efa\u5e76\u542f\u52a8\u4e00\u4e2a\u4efb\u52a1\n    result = await group.create_task(coro())\n</code></pre> <p>\u4f7f\u7528 <code>asyncio.TaskGroup</code> \u7684\u597d\u5904\u662f\u6211\u4eec\u53ef\u4ee5\u5728\u7ec4\u4e2d\u542f\u52a8\u591a\u4e2a\u4efb\u52a1\uff0c\u5e76\u5728\u4efb\u52a1\u4e4b\u95f4\u6267\u884c\u4ee3\u7801\uff0c\u4f8b\u5982\u68c0\u67e5\u7ed3\u679c\u6216\u6536\u96c6\u66f4\u591a\u6570\u636e\u3002</p> <p>We can create a task in the task group via the create_task() method on the asyncio.TaskGroup object.</p> <p>For example:</p> <pre><code>...\n# create a taskgroup\nasync with asyncio.TaskGroup() as group:\n    # create and issue a task\n    task = group.create_task(coro())\n</code></pre> <p>This will create an asyncio.Task object and issue it to the asyncio event loop for execution, just like the asyncio.create_task() function, except that the task is associated with the group.</p> <p>We can await the task directly if we choose and get results.</p> <p>For example:</p> <pre><code>...\n# create a taskgroup\nasync with asyncio.TaskGroup() as group:\n    # create and issue a task\n    result = await group.create_task(coro())\n</code></pre> <p>The benefit of using the asyncio.TaskGroup is that we can issue multiple tasks in the group and execute code in between. such as checking results or gathering more data.</p>"},{"location":"asyncio/en/c11/#114-\u5982\u4f55\u7b49\u5f85\u4f7f\u7528-asynciotaskgroup-\u7684\u4efb\u52a1","title":"11.4 \u5982\u4f55\u7b49\u5f85\u4f7f\u7528 <code>asyncio.TaskGroup</code> \u7684\u4efb\u52a1","text":"<p>How to Wait on Tasks Using asyncio.TaskGroup</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u9000\u51fa\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5757\u6765\u7b49\u5f85\u7ec4\u4e2d\u7684\u6240\u6709\u4efb\u52a1\u3002</p> <p>\u56e0\u6b64\uff0c\u8fd9\u4e9b\u4efb\u52a1\u4f1a\u81ea\u52a8\u88ab\u7b49\u5f85\uff0c\u4e0d\u9700\u8981\u989d\u5916\u7684\u64cd\u4f5c\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u4e00\u4e2a TaskGroup\nasync with asyncio.TaskGroup() as group:\n    # ...\n# \u7b49\u5f85\u6240\u6709\u7ec4\u5185\u4efb\u52a1\u5b8c\u6210\n</code></pre> <p>\u5982\u679c\u4e0d\u5e0c\u671b\u8fd9\u79cd\u884c\u4e3a\uff0c\u5219\u5fc5\u987b\u5728\u9000\u51fa\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u4e4b\u524d\uff0c\u786e\u4fdd\u6240\u6709\u4efb\u52a1\u5df2\u7ecf\u201c\u5b8c\u6210\u201d\uff08\u7ed3\u675f\u3001\u53d6\u6d88\u6216\u5931\u8d25\uff09\u3002</p> <p>We can wait on all tasks in the group by exiting the asynchronous context manager block.</p> <p>As such, the tasks are awaited automatically and nothing additional is required.</p> <p>For example:</p> <pre><code>...\n# create a taskgroup\nasync with asyncio.TaskGroup() as group:\n    # ...\n# wait for all group tasks are done\n</code></pre> <p>If this behavior is not preferred, then we must ensure all tasks are \u201cdone\u201d (finished, canceled, or failed) before exiting the context manager.</p>"},{"location":"asyncio/en/c11/#115-\u5728\u4e00\u4e2a\u4efb\u52a1\u5931\u8d25\u65f6\u5982\u4f55\u53d6\u6d88\u6240\u6709\u4f7f\u7528-asynciotaskgroup-\u7684\u4efb\u52a1","title":"11.5 \u5728\u4e00\u4e2a\u4efb\u52a1\u5931\u8d25\u65f6\u5982\u4f55\u53d6\u6d88\u6240\u6709\u4f7f\u7528 <code>asyncio.TaskGroup</code> \u7684\u4efb\u52a1","text":"<p>How to Cancel All Tasks If One Task Fails Using asyncio.TaskGroup</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u7ec4\u4e2d\u7684\u4e00\u4e2a\u4efb\u52a1\u56e0\u5f02\u5e38\u5931\u8d25\uff0c\u90a3\u4e48\u7ec4\u5185\u6240\u6709\u672a\u5b8c\u6210\u7684\u4efb\u52a1\u5c06\u88ab\u53d6\u6d88\u3002</p> <p>\u8fd9\u4e00\u8fc7\u7a0b\u662f\u81ea\u52a8\u6267\u884c\u7684\uff0c\u4e0d\u9700\u8981\u989d\u5916\u7684\u4ee3\u7801\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code># \u5904\u7406\u7ec4\u4e2d\u4efb\u4f55\u4efb\u52a1\u7684\u5931\u8d25\ntry:\n    ...\n    # \u521b\u5efa\u4e00\u4e2a TaskGroup\n    async with asyncio.TaskGroup() as group:\n        # \u521b\u5efa\u5e76\u542f\u52a8\u4efb\u52a1\n        task1 = group.create_task(coro1())\n        # \u521b\u5efa\u5e76\u542f\u52a8\u4efb\u52a1\n        task2 = group.create_task(coro2())\n        # \u521b\u5efa\u5e76\u542f\u52a8\u4efb\u52a1\n        task3 = group.create_task(coro3())\n    # \u7b49\u5f85\u6240\u6709\u7ec4\u5185\u4efb\u52a1\u5b8c\u6210\nexcept:\n    # \u6240\u6709\u672a\u5b8c\u6210\u7684\u4efb\u52a1\u90fd\u4f1a\u88ab\u53d6\u6d88\n    pass\n</code></pre> <p>\u5982\u679c\u4e0d\u5e0c\u671b\u8fd9\u79cd\u884c\u4e3a\uff0c\u90a3\u4e48\u6bcf\u4e2a\u4efb\u52a1\u7684\u5931\u8d25\u5fc5\u987b\u5728\u4efb\u52a1\u5185\u90e8\u81ea\u884c\u7ba1\u7406\uff0c\u4f8b\u5982\u5728\u534f\u7a0b\u5185\u90e8\u4f7f\u7528 <code>try-except</code> \u5757\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86\u5982\u4f55\u4f7f\u7528 <code>asyncio.TaskGroup</code>\uff0c\u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u770b\u770b\u4e00\u4e9b\u5b9e\u9645\u7684\u793a\u4f8b\u3002</p> <p>If one task in the group fails with an exception, then all non-done tasks remaining in the group will be canceled.</p> <p>This is performed automatically and does not require any additional code.</p> <p>For example:</p> <pre><code># handle the failure of any tasks in the group\ntry:\n    ...\n    # create a taskgroup\n    async with asyncio.TaskGroup() as group:\n        # create and issue a task\n        task1 = group.create_task(coro1())\n        # create and issue a task\n        task2 = group.create_task(coro2())\n        # create and issue a task\n        task3 = group.create_task(coro3())\n    # wait for all group tasks are done\nexcept:\n    # all non-done tasks are cancelled\n    pass\n</code></pre> <p>If this behavior is not preferred, then the failure of each task must be managed within the tasks themselves, e.g. by a try-except block within the coroutine.</p> <p>Now that we know how to use the asyncio.TaskGroup, let\u2019s look at some worked examples.</p>"},{"location":"asyncio/en/c11/#116-\u4f7f\u7528-taskgroup-\u7b49\u5f85\u591a\u4e2a\u4efb\u52a1\u7684\u793a\u4f8b","title":"11.6 \u4f7f\u7528 TaskGroup \u7b49\u5f85\u591a\u4e2a\u4efb\u52a1\u7684\u793a\u4f8b","text":"<p>Example of Waiting on Multiple Tasks with a TaskGroup</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728 <code>asyncio.TaskGroup</code> \u4e2d\u521b\u5efa\u591a\u4e2a\u4efb\u52a1\uff0c\u7136\u540e\u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210\u7684\u65b9\u5f0f\u6765\u8fdb\u884c\u63a2\u7d22\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u9996\u5148\u5b9a\u4e49\u4e00\u7ec4\u8868\u793a\u6211\u4eec\u5e0c\u671b\u5b8c\u6210\u7684\u4efb\u52a1\u7684\u4e0d\u540c\u534f\u7a0b\u6765\u5b9e\u73b0\u3002</p> <p>\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u5b9a\u4e49 3 \u4e2a\u534f\u7a0b\uff0c\u6bcf\u4e2a\u534f\u7a0b\u62a5\u544a\u4e00\u6761\u4e0d\u540c\u7684\u4fe1\u606f\uff0c\u7136\u540e\u4f11\u7720\u4e00\u79d2\u949f\u3002</p> <pre><code># \u534f\u7a0b\u4efb\u52a1\nasync def task1():\n    # \u8f93\u51fa\u4fe1\u606f\n    print('\u6765\u81ea\u534f\u7a0b 1 \u7684\u95ee\u5019')\n    # \u4f11\u7720\u4ee5\u6a21\u62df\u7b49\u5f85\n    await asyncio.sleep(1)\n\n# \u534f\u7a0b\u4efb\u52a1\nasync def task2():\n    # \u8f93\u51fa\u4fe1\u606f\n    print('\u6765\u81ea\u534f\u7a0b 2 \u7684\u95ee\u5019')\n    # \u4f11\u7720\u4ee5\u6a21\u62df\u7b49\u5f85\n    await asyncio.sleep(1)\n\n# \u534f\u7a0b\u4efb\u52a1\nasync def task3():\n    # \u8f93\u51fa\u4fe1\u606f\n    print('\u6765\u81ea\u534f\u7a0b 3 \u7684\u95ee\u5019')\n    # \u4f11\u7720\u4ee5\u6a21\u62df\u7b49\u5f85\n    await asyncio.sleep(1)\n</code></pre> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a <code>main()</code> \u534f\u7a0b\uff0c\u901a\u8fc7\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u63a5\u53e3\u521b\u5efa <code>asyncio.TaskGroup</code>\u3002</p> <pre><code># asyncio \u5165\u53e3\u70b9\nasync def main():\n    # \u521b\u5efa\u4efb\u52a1\u7ec4\n    async with asyncio.TaskGroup() as group:\n    # ...\n</code></pre> <p>\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u534f\u7a0b\u4f5c\u4e3a\u4efb\u52a1\u521b\u5efa\u5e76\u53d1\u9001\u5230\u4e8b\u4ef6\u5faa\u73af\u4e2d\uff0c\u5c3d\u7ba1\u5b83\u4eec\u4f5c\u4e3a\u7ec4\u7684\u4e00\u90e8\u5206\u88ab\u4e00\u8d77\u6536\u96c6\u3002</p> <pre><code>...\n# \u8fd0\u884c\u7b2c\u4e00\u4e2a\u4efb\u52a1\ngroup.create_task(task1())\n# \u8fd0\u884c\u7b2c\u4e8c\u4e2a\u4efb\u52a1\ngroup.create_task(task2())\n# \u8fd0\u884c\u7b2c\u4e09\u4e2a\u4efb\u52a1\ngroup.create_task(task3())\n</code></pre> <p>\u6ce8\u610f\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u4fdd\u7559 <code>asyncio.Task</code> \u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u56e0\u4e3a <code>asyncio.TaskGroup</code> \u4f1a\u4e3a\u6211\u4eec\u8ddf\u8e2a\u5b83\u4eec\u3002</p> <p>\u6b64\u5916\uff0c\u6211\u4eec\u4e5f\u4e0d\u9700\u8981\u7b49\u5f85\u8fd9\u4e9b\u4efb\u52a1\uff0c\u56e0\u4e3a\u5f53\u6211\u4eec\u9000\u51fa <code>asyncio.TaskGroup</code> \u7684\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5757\u65f6\uff0c\u6211\u4eec\u5c06\u7b49\u5f85\u7ec4\u4e2d\u7684\u6240\u6709\u4efb\u52a1\u3002</p> <p>\u7ed3\u5408\u8d77\u6765\uff0c\u5b8c\u6574\u7684\u793a\u4f8b\u5982\u4e0b\u6240\u793a\u3002</p> <pre><code># asyncio \u4efb\u52a1\u7ec4\u793a\u4f8b\nimport asyncio\n\n# \u534f\u7a0b\u4efb\u52a1\nasync def task1():\n    # \u8f93\u51fa\u4fe1\u606f\n    print('\u6765\u81ea\u534f\u7a0b 1 \u7684\u95ee\u5019')\n    # \u4f11\u7720\u4ee5\u6a21\u62df\u7b49\u5f85\n    await asyncio.sleep(1)\n\n# \u534f\u7a0b\u4efb\u52a1\nasync def task2():\n    # \u8f93\u51fa\u4fe1\u606f\n    print('\u6765\u81ea\u534f\u7a0b 2 \u7684\u95ee\u5019')\n    # \u4f11\u7720\u4ee5\u6a21\u62df\u7b49\u5f85\n    await asyncio.sleep(1)\n\n# \u534f\u7a0b\u4efb\u52a1\nasync def task3():\n    # \u8f93\u51fa\u4fe1\u606f\n    print('\u6765\u81ea\u534f\u7a0b 3 \u7684\u95ee\u5019')\n    # \u4f11\u7720\u4ee5\u6a21\u62df\u7b49\u5f85\n    await asyncio.sleep(1)\n\n# asyncio \u5165\u53e3\u70b9\nasync def main():\n    # \u521b\u5efa\u4efb\u52a1\u7ec4\n    async with asyncio.TaskGroup() as group:\n        # \u8fd0\u884c\u7b2c\u4e00\u4e2a\u4efb\u52a1\n        group.create_task(task1())\n        # \u8fd0\u884c\u7b2c\u4e8c\u4e2a\u4efb\u52a1\n        group.create_task(task2())\n        # \u8fd0\u884c\u7b2c\u4e09\u4e2a\u4efb\u52a1\n        group.create_task(task3())\n    # \u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210...\n    print('\u5b8c\u6210')\n\n# \u5165\u53e3\u70b9\nasyncio.run(main())\n</code></pre> <p>\u8fd0\u884c\u8be5\u793a\u4f8b\u9996\u5148\u6267\u884c <code>main()</code> \u534f\u7a0b\uff0c\u4e3a\u6211\u4eec\u542f\u52a8\u4e00\u4e2a\u65b0\u7684\u4e8b\u4ef6\u5faa\u73af\u3002</p> <p><code>main()</code> \u534f\u7a0b\u8fd0\u884c\u5e76\u521b\u5efa\u4e00\u4e2a <code>asyncio.TaskGroup</code>\u3002</p> <p>\u7136\u540e\uff0c\u6240\u6709\u4e09\u4e2a\u534f\u7a0b\u90fd\u4f5c\u4e3a <code>asyncio.Task</code> \u5bf9\u8c61\u521b\u5efa\uff0c\u5e76\u901a\u8fc7 <code>asyncio.TaskGroup</code> \u53d1\u9001\u5230\u4e8b\u4ef6\u5faa\u73af\u4e2d\u3002</p> <p><code>asyncio.TaskGroup</code> \u7684\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5757\u9000\u51fa\uff0c\u81ea\u52a8\u7b49\u5f85\u6240\u6709\u4e09\u4e2a\u4efb\u52a1\u3002</p> <p>\u8fd9\u4e9b\u4efb\u52a1\u4f1a\u8f93\u51fa\u4fe1\u606f\u5e76\u8fdb\u5165\u4f11\u7720\u72b6\u6001\u3002</p> <p>\u4e00\u65e6\u6240\u6709\u4efb\u52a1\u5b8c\u6210\uff0c<code>main()</code> \u534f\u7a0b\u4f1a\u8f93\u51fa\u4e00\u6761\u6700\u7ec8\u4fe1\u606f\u3002</p> <pre><code>\u6765\u81ea\u534f\u7a0b 1 \u7684\u95ee\u5019\n\u6765\u81ea\u534f\u7a0b 2 \u7684\u95ee\u5019\n\u6765\u81ea\u534f\u7a0b 3 \u7684\u95ee\u5019\n\u5b8c\u6210\n</code></pre> <p>\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u63a2\u7d22\u5982\u4f55\u4f7f\u7528\u5e26\u6709\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7684\u4efb\u52a1\u7684 <code>asyncio.TaskGroup</code>\u3002</p> <p>\u4f60\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u5982\u4f55\u4f7f\u7528 <code>TaskGroup</code> \u7684\u4fe1\u606f\uff1a</p> <ul> <li>\u5982\u4f55\u4f7f\u7528 asyncio.TaskGroup</li> </ul> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u63a2\u7d22\u5982\u4f55\u5728\u6709\u9650\u65f6\u95f4\u5185\u7b49\u5f85\u5355\u4e2a\u534f\u7a0b\u3002</p> <p>We can explore the case of creating multiple tasks within an asyncio.TaskGroup and then waiting for all tasks to complete.</p> <p>This can be achieved by first defining a suite of different coroutines that represent the tasks we want to complete.</p> <p>In this case, we will define 3 coroutines that each report a different message and then sleep for one second.</p> <pre><code># coroutine task\nasync def task1():\n    # report a message\n    print('Hello from coroutine 1')\n    # sleep to simulate waiting\n    await asyncio.sleep(1)\n\n# coroutine task\nasync def task2():\n    # report a message\n    print('Hello from coroutine 2')\n    # sleep to simulate waiting\n    await asyncio.sleep(1)\n\n# coroutine task\nasync def task3():\n    # report a message\n    print('Hello from coroutine 3')\n    # sleep to simulate waiting\n    await asyncio.sleep(1)\n</code></pre> <p>Next, we can define a main() coroutine that creates the asyncio.TaskGroup via the context manager interface.</p> <pre><code># asyncio entry point\nasync def main():\n    # create task group\n    async with asyncio.TaskGroup() as group:\n    # ...\n</code></pre> <p>We can then create and issue each coroutine as a task into the event loop, although collected together as part of the group.</p> <pre><code>...\n# run first task\ngroup.create_task(task1())\n# run second task\ngroup.create_task(task2())\n# run third task\ngroup.create_task(task3())\n</code></pre> <p>Notice that we don\u2019t need to keep a reference to the asyncio.Task objects as the asyncio.TaskGroup will keep track of them for us.</p> <p>Also, notice that we don\u2019t need to await the tasks because when we exit the context manager block for the asyncio.TaskGroup we will await all tasks in the group.</p> <p>Tying this together, the complete example is listed below.</p> <pre><code># example of asyncio task group\nimport asyncio\n\n# coroutine task\nasync def task1():\n    # report a message\n    print('Hello from coroutine 1')\n    # sleep to simulate waiting\n    await asyncio.sleep(1)\n\n# coroutine task\nasync def task2():\n    # report a message\n    print('Hello from coroutine 2')\n    # sleep to simulate waiting\n    await asyncio.sleep(1)\n\n# coroutine task\nasync def task3():\n    # report a message\n    print('Hello from coroutine 3')\n    # sleep to simulate waiting\n    await asyncio.sleep(1)\n\n# asyncio entry point\nasync def main():\n    # create task group\n    async with asyncio.TaskGroup() as group:\n        # run first task\n        group.create_task(task1())\n        # run second task\n        group.create_task(task2())\n        # run third task\n        group.create_task(task3())\n    # wait for all tasks to complete...\n    print('Done')\n\n# entry point\nasyncio.run(main())\n</code></pre> <p>Running the example first executes the main() coroutine, starting a new event loop for us.</p> <p>The main() coroutine runs and creates an asyncio.TaskGroup.</p> <p>All three coroutines are then created as asyncio.Task objects and issued to the event loop via the asyncio.TaskGroup.</p> <p>The context manager block for the asyncio.TaskGroup is exited which automatically awaits all three tasks.</p> <p>The tasks report their message and sleep.</p> <p>Once all tasks are completed the main() coroutine reports a final message.</p> <pre><code>Hello from coroutine 1\nHello from coroutine 2\nHello from coroutine 3\nDone\n</code></pre> <p>Next, let\u2019s explore how we might use an asyncio.TaskGroup with tasks that take arguments and return values.</p> <p>You can learn more about how to use the TaskGroup in the tutorial:</p> <ul> <li>How to use asyncio.TaskGroup</li> </ul> <p>Next, we will explore how to wait for a single coroutine with a time limit.</p>"},{"location":"asyncio/en/c12/","title":"12. \u7b49\u5f85\u4efb\u52a1\u7684\u96c6\u5408","text":"<p>12. Wait for A Collection of Tasks</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 asyncio.wait() \u51fd\u6570\u7b49\u5f85 asyncio \u4efb\u52a1\u5b8c\u6210\u3002</p> <p>\u53ef\u4ee5\u7b49\u5f85\u4e0d\u540c\u7684\u6761\u4ef6\uff0c\u4f8b\u5982\u6240\u6709\u4efb\u52a1\u5b8c\u6210\u3001\u7b2c\u4e00\u4e2a\u4efb\u52a1\u5b8c\u6210\u3001\u7b2c\u4e00\u4e2a\u4efb\u52a1\u56e0\u5f02\u5e38\u800c\u5931\u8d25\u3002</p> <p>\u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b\u3002</p> <p>We can wait for asyncio tasks to complete via the asyncio.wait() function.</p> <p>Different conditions can be waited for, such as all tasks to complete, the first task to complete, and the first task to fail with an exception.</p> <p>Let\u2019s take a closer look.</p>"},{"location":"asyncio/en/c12/#121-\u4ec0\u4e48\u662f-asynciowait","title":"12.1 \u4ec0\u4e48\u662f asyncio.wait()","text":"<p>12.1 What is asyncio.wait()</p> \u4e2d\u6587\u82f1\u6587 <p>asyncio.wait() \u51fd\u6570\u53ef\u7528\u4e8e\u7b49\u5f85\u5f02\u6b65\u4efb\u52a1\u96c6\u5408\u5b8c\u6210\u3002</p> <p>\u56de\u60f3\u4e00\u4e0b\uff0casyncio \u4efb\u52a1\u662f\u5305\u88c5\u534f\u7a0b\u7684 asyncio.Task \u7c7b\u7684\u5b9e\u4f8b\u3002 \u5b83\u5141\u8bb8\u534f\u7a0b\u72ec\u7acb\u5730\u8c03\u5ea6\u548c\u6267\u884c\uff0c\u5e76\u4e14 Task \u5b9e\u4f8b\u63d0\u4f9b\u4efb\u52a1\u7684\u53e5\u67c4\u7528\u4e8e\u67e5\u8be2\u72b6\u6001\u548c\u83b7\u53d6\u7ed3\u679c\u3002</p> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173\u5f02\u6b65\u4efb\u52a1\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>\u4ec0\u4e48\u662f\u5f02\u6b65\u4efb\u52a1</li> </ul> <p>wait() \u51fd\u6570\u5141\u8bb8\u6211\u4eec\u7b49\u5f85\u4e00\u7ec4\u4efb\u52a1\u5b8c\u6210\u3002</p> <p>\u5bf9 wait \u7684\u8c03\u7528\u53ef\u4ee5\u914d\u7f6e\u4e3a\u7b49\u5f85\u4e0d\u540c\u7684\u6761\u4ef6\uff0c\u4f8b\u5982\u6240\u6709\u4efb\u52a1\u90fd\u5df2\u5b8c\u6210\u3001\u7b2c\u4e00\u4e2a\u4efb\u52a1\u5df2\u5b8c\u6210\u4ee5\u53ca\u7b2c\u4e00\u4e2a\u4efb\u52a1\u56e0\u9519\u8bef\u800c\u5931\u8d25\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528 wait() \u51fd\u6570\u3002</p> <p>The asyncio.wait() function can be used to wait for a collection of asyncio tasks to complete.</p> <p>Recall that an asyncio task is an instance of the asyncio.Task class that wraps a coroutine. It allows a coroutine to be scheduled and executed independently, and the Task instance provides a handle on the task for querying status and getting results.</p> <p>You can learn more about asyncio tasks in the tutorial:</p> <ul> <li>What is an Asyncio Task</li> </ul> <p>The wait() function allows us to wait for a collection of tasks to be done.</p> <p>The call to wait can be configured to wait for different conditions, such as all tasks being completed, the first task completed and the first task failing with an error.</p> <p>Next, let\u2019s look at how we might use the wait() function.</p>"},{"location":"asyncio/en/c12/#122-\u5982\u4f55\u4f7f\u7528-asynciowait","title":"12.2 \u5982\u4f55\u4f7f\u7528 asyncio.wait()","text":"<p>12.2 How to Use asyncio.wait()</p> \u4e2d\u6587\u82f1\u6587 <p>asyncio.wait() \u51fd\u6570\u91c7\u7528\u53ef\u7b49\u5f85\u5bf9\u8c61\u7684\u96c6\u5408\uff0c\u901a\u5e38\u662f Task \u5bf9\u8c61\u3002</p> <p>\u8fd9\u53ef\u4ee5\u662f\u6211\u4eec\u521b\u5efa\u7684\u4efb\u52a1\u5bf9\u8c61\u7684list\u3001dict\u6216set\uff0c\u4f8b\u5982\u901a\u8fc7\u8c03\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u4e2d\u7684 asyncio.create_task() \u51fd\u6570 \u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u8bb8\u591a\u4efb\u52a1\ntasks = [asyncio.create_task(task_coro(i)) for i in range(10)]\n</code></pre> <p>\u5728\u6ee1\u8db3\u4efb\u52a1\u96c6\u5408\u7684\u67d0\u4e9b\u6761\u4ef6\u4e4b\u524d\uff0c asyncio.wait() \u5c06\u4e0d\u4f1a\u8fd4\u56de\u3002</p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6761\u4ef6\u662f\u6240\u6709\u4efb\u52a1\u5747\u5df2\u5b8c\u6210\u3002</p> <p>wait() \u51fd\u6570\u8fd4\u56de\u4e24\u4e2a\u96c6\u5408\u7684\u5143\u7ec4\u3002 \u7b2c\u4e00\u4e2a\u96c6\u5408\u5305\u542b\u6ee1\u8db3\u6761\u4ef6\u7684\u6240\u6709\u4efb\u52a1\u5bf9\u8c61\uff0c\u7b2c\u4e8c\u4e2a\u96c6\u5408\u5305\u542b\u5c1a\u672a\u6ee1\u8db3\u6761\u4ef6\u7684\u6240\u6709\u5176\u4ed6\u4efb\u52a1\u5bf9\u8c61\u3002</p> <p>\u8fd9\u4e9b\u96c6\u79f0\u4e3a \u201cdone\u201d \u96c6\u548c \u201cpending\u201d \u96c6\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210\ndone, pending = await asyncio.wait(tasks)\n</code></pre> <p>\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c asyncio.wait() \u662f\u4e00\u4e2a\u8fd4\u56de\u534f\u7a0b\u7684\u534f\u7a0b\u51fd\u6570\u3002</p> <p>\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u7b49\u5f85\u8fd9\u4e2a\u534f\u7a0b\uff0c\u5b83\u5c06\u8fd4\u56de\u96c6\u5408\u7684\u5143\u7ec4\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u7b49\u5f85\u534f\u7a0b\nwait_coro = asyncio.wait(tasks)\n# \u7b49\u5f85\u534f\u7a0b\ntuple = await wait_coro\n</code></pre> <p>\u7b49\u5f85\u7684\u6761\u4ef6\u53ef\u4ee5\u901a\u8fc7 \u201creturn_when\u201d \u53c2\u6570\u6307\u5b9a\uff0c\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a asyncio.ALL_COMPLETED\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210\ndone, pending = await asyncio.wait(tasks, return_when=asyncio.ALL_COMPLETED)\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06 return_when \u8bbe\u7f6e\u4e3a FIRST_COMPLETED \u6765\u7b49\u5f85\u7b2c\u4e00\u4e2a\u4efb\u52a1\u5b8c\u6210\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u7b49\u5f85\u7b2c\u4e00\u4e2a\u4efb\u52a1\u5b8c\u6210\ndone, pending = await asyncio.wait(tasks, return_when=asyncio.FIRST_COMPLETED)\n</code></pre> <p>\u5f53\u7b2c\u4e00\u4e2a\u4efb\u52a1\u5b8c\u6210\u5e76\u8fd4\u56de\u5b8c\u6210\u96c6\u4e2d\u65f6\uff0c\u5176\u4f59\u4efb\u52a1\u4e0d\u4f1a\u53d6\u6d88\u5e76\u7ee7\u7eed\u5e76\u53d1\u6267\u884c\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06 return_when \u8bbe\u7f6e\u4e3a FIRST_EXCEPTION \u6765\u7b49\u5f85\u7b2c\u4e00\u4e2a\u4efb\u52a1\u56e0\u5f02\u5e38\u800c\u5931\u8d25\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u7b49\u5f85\u7b2c\u4e00\u4e2a\u4efb\u52a1\u5931\u8d25\ndone, pending = await asyncio.wait(tasks, return_when=asyncio.FIRST_EXCEPTION)\n</code></pre> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b8c\u6210\u96c6\u5c06\u5305\u542b\u7b2c\u4e00\u4e2a\u56e0\u5f02\u5e38\u800c\u5931\u8d25\u7684\u4efb\u52a1\u3002 \u5982\u679c\u6ca1\u6709\u4efb\u52a1\u56e0\u5f02\u5e38\u800c\u5931\u8d25\uff0c\u5219\u5b8c\u6210\u96c6\u5c06\u5305\u542b\u6240\u6709\u4efb\u52a1\uff0c\u5e76\u4e14 wait() \u4ec5\u5728\u6240\u6709\u4efb\u52a1\u5b8c\u6210\u540e\u624d\u8fd4\u56de\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 \u201ctimeout\u201d \u53c2\u6570\u6307\u5b9a\u6211\u4eec\u613f\u610f\u7b49\u5f85\u7ed9\u5b9a\u6761\u4ef6\u7684\u65f6\u95f4\uff08\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff09\u3002</p> <p>\u5982\u679c\u5728\u6ee1\u8db3\u6761\u4ef6\u4e4b\u524d\u8d85\u65f6\u5230\u671f\uff0c\u5219\u8fd4\u56de\u4efb\u52a1\u5143\u7ec4\u4ee5\u53ca\u5f53\u65f6\u6ee1\u8db3\u6761\u4ef6\u7684\u4efb\u4f55\u4efb\u52a1\u5b50\u96c6\uff0c\u4f8b\u5982 \u5982\u679c\u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210\uff0c\u5219\u4e3a\u5b8c\u6210\u7684\u4efb\u52a1\u5b50\u96c6\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210\u5e76\u4f7f\u7528\u8d85\u65f6\ndone, pending = await asyncio.wait(tasks, timeout=3)\n</code></pre> <p>\u5982\u679c\u5728\u6ee1\u8db3\u6761\u4ef6\u4e4b\u524d\u8fbe\u5230\u8d85\u65f6\uff0c\u5219\u4e0d\u4f1a\u5f15\u53d1\u5f02\u5e38\uff0c\u5e76\u4e14\u4e0d\u4f1a\u53d6\u6d88\u5269\u4f59\u7684\u4efb\u52a1\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u5982\u4f55\u4f7f\u7528 asyncio.wait() \u51fd\u6570\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e9b\u6709\u6548\u7684\u793a\u4f8b\u3002</p> <p>The asyncio.wait() function takes a collection of awaitables, typically Task objects.</p> <p>This could be a list, dict, or set of task objects that we have created, such as via calls to the asyncio.create_task() function in a list comprehension.</p> <p>For example:</p> <pre><code>...\n# create many tasks\ntasks = [asyncio.create_task(task_coro(i)) for i in range(10)]\n</code></pre> <p>The asyncio.wait() will not return until some condition on the collection of tasks is met.</p> <p>By default, the condition is that all tasks are completed.</p> <p>The wait() function returns a tuple of two sets. The first set contains all task objects that meet the condition, and the second contains all other task objects that do not yet meet the condition.</p> <p>These sets are referred to as the \u201cdone\u201d set and the \u201cpending\u201d set.</p> <p>For example:</p> <pre><code>...\n# wait for all tasks to complete\ndone, pending = await asyncio.wait(tasks)\n</code></pre> <p>Technically, the asyncio.wait() is a coroutine function that returns a coroutine.</p> <p>We can then await this coroutine which will return the tuple of sets.</p> <p>For example:</p> <pre><code>...\n# create the wait coroutine\nwait_coro = asyncio.wait(tasks)\n# await the wait coroutine\ntuple = await wait_coro\n</code></pre> <p>The condition waited for can be specified by the \u201creturn_when\u201d argument which is set to asyncio.ALL_COMPLETED by default.</p> <p>For example:</p> <pre><code>...\n# wait for all tasks to complete\ndone, pending = await asyncio.wait(tasks, return_when=asyncio.ALL_COMPLETED)\n</code></pre> <p>We can wait for the first task to be completed by setting return_when to FIRST_COMPLETED.</p> <p>For example:</p> <pre><code>...\n# wait for the first task to be completed\ndone, pending = await asyncio.wait(tasks, return_when=asyncio.FIRST_COMPLETED)\n</code></pre> <p>When the first task is complete and returned in the done set, the remaining tasks are not canceled and continue to execute concurrently.</p> <p>We can wait for the first task to fail with an exception by setting return_when to FIRST_EXCEPTION.</p> <p>For example:</p> <pre><code>...\n# wait for the first task to fail\ndone, pending = await asyncio.wait(tasks, return_when=asyncio.FIRST_EXCEPTION)\n</code></pre> <p>In this case, the done set will contain the first task that failed with an exception. If no task fails with an exception, the done set will contain all tasks and wait() will return only after all tasks are completed.</p> <p>We can specify how long we are willing to wait for the given condition via a \u201ctimeout\u201d argument in seconds.</p> <p>If the timeout expires before the condition is met, the tuple of tasks is returned with whatever subset of tasks do meet the condition at that time, e.g. the subset of tasks that are completed if waiting for all tasks to complete.</p> <p>For example:</p> <pre><code>...\n# wait for all tasks to complete with a timeout\ndone, pending = await asyncio.wait(tasks, timeout=3)\n</code></pre> <p>If the timeout is reached before the condition is met, an exception is not raised and the remaining tasks are not canceled.</p> <p>Now that we know how to use the asyncio.wait() function, let\u2019s look at some worked examples.</p>"},{"location":"asyncio/en/c12/#123-\u7b49\u5f85\u6240\u6709\u4efb\u52a1\u7684\u793a\u4f8b","title":"12.3 \u7b49\u5f85\u6240\u6709\u4efb\u52a1\u7684\u793a\u4f8b","text":"<p>12.3 Example of Waiting for All Tasks</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u63a2\u7d22\u5982\u4f55\u4f7f\u7528 asyncio.wait() \u7b49\u5f85\u6240\u6709\u4efb\u52a1\u3002</p> <p>\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u4efb\u52a1\u534f\u7a0b\uff0c\u5b83\u751f\u6210\u4e00\u4e2a\u968f\u673a\u503c\uff0c\u4f11\u7720\u4e00\u5c0f\u4f1a\u513f\uff0c\u7136\u540e\u62a5\u544a\u5305\u542b\u751f\u6210\u503c\u7684\u6d88\u606f\u3002</p> <p>\u7136\u540e\uff0c\u4e3b\u534f\u7a0b\u5c06\u4f7f\u7528\u534f\u7a0b\u5728\u5217\u8868\u63a8\u5bfc\u4e2d\u521b\u5efa\u8bb8\u591a\u4efb\u52a1\uff0c\u7136\u540e\u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210\u3002</p> <p>\u4e0b\u9762\u5217\u51fa\u4e86\u5b8c\u6574\u7684\u793a\u4f8b\u3002</p> <pre><code># SuperFastPython.com\n# \u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210\u7684\u793a\u4f8b\nfrom random import random\nimport asyncio\n\n# \u5728\u65b0\u4efb\u52a1\u4e2d\u6267\u884c\u7684\u534f\u7a0b\nasync def task_coro(arg):\n    # \u751f\u6210 0 \u5230 1 \u4e4b\u95f4\u7684\u968f\u673a\u503c\n    value = random()\n    # \u6682\u65f6\u963b\u585e\n    await asyncio.sleep(value)\n    # \u62a5\u544a\u503c\n    print(f'&gt;task {arg} done with {value}')\n\n# \u4e3b\u534f\u7a0b\nasync def main():\n    # \u521b\u5efa\u8bb8\u591a\u4efb\u52a1\n    tasks = [asyncio.create_task(task_coro(i)) for i in range(10)]\n    # \u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210\n    done,pending = await asyncio.wait(tasks)\n    # \u62a5\u544a\u7ed3\u679c\n    print('All done')\n\n# \u542f\u52a8\u5f02\u6b65\u7a0b\u5e8f\nasyncio.run(main())\n</code></pre> <p>\u8fd0\u884c\u8be5\u793a\u4f8b\u9996\u5148\u521b\u5efa main() \u534f\u7a0b\uff0c\u5e76\u5c06\u5176\u7528\u4f5c asyncio \u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u3002</p> <p>\u7136\u540e\uff0cmain() \u534f\u7a0b\u5728\u5217\u8868\u7406\u89e3\u4e2d\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u5341\u4e2a\u4efb\u52a1\u7684\u5217\u8868\uff0c\u6bcf\u4e2a\u4efb\u52a1\u63d0\u4f9b\u4e00\u4e2a\u4ece 0 \u5230 9 \u7684\u552f\u4e00\u6574\u6570\u53c2\u6570\u3002</p> <p>\u7136\u540e main() \u534f\u7a0b\u88ab\u6302\u8d77\u5e76\u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210\u3002</p> <p>\u4efb\u52a1\u6267\u884c\u3002 \u6bcf\u4e2a\u751f\u6210\u4e00\u4e2a\u968f\u673a\u503c\uff0c\u4f11\u7720\u4e00\u4f1a\u513f\uff0c\u7136\u540e\u62a5\u544a\u5176\u751f\u6210\u7684\u503c\u3002</p> <p>\u6240\u6709\u4efb\u52a1\u5b8c\u6210\u540e\uff0cmain() \u534f\u7a0b\u6062\u590d\u5e76\u62a5\u544a\u6700\u7ec8\u6d88\u606f\u3002</p> <p>\u6b64\u793a\u4f8b\u91cd\u70b9\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528 wait() \u51fd\u6570\u6765\u7b49\u5f85\u4efb\u52a1\u96c6\u5408\u5b8c\u6210\u3002</p> <p>\u8fd9\u53ef\u80fd\u662f\u8be5\u51fd\u6570\u6700\u5e38\u89c1\u7684\u7528\u6cd5\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u7531\u4e8e\u4f7f\u7528\u968f\u673a\u6570\uff0c\u6bcf\u6b21\u8fd0\u884c\u7a0b\u5e8f\u65f6\u7ed3\u679c\u90fd\u4f1a\u6709\u6240\u4e0d\u540c\u3002</p> <pre><code>&gt;task 5 done with 0.0591009105682192\n&gt;task 8 done with 0.10453715687017351\n&gt;task 0 done with 0.15462838864295925\n&gt;task 6 done with 0.4103492027393125\n&gt;task 9 done with 0.45567100006991623\n&gt;task 2 done with 0.6984682905809402\n&gt;task 7 done with 0.7785363531316224\n&gt;task 3 done with 0.827386088873161\n&gt;task 4 done with 0.9481344994700972\n&gt;task 1 done with 0.9577302665040541\nAll done\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173 wait() \u51fd\u6570\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>\u5982\u4f55\u5728 Python \u4e2d\u4f7f\u7528 Asyncio wait()</li> </ul> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u63a2\u8ba8\u5982\u4f55\u5728\u6709\u65f6\u95f4\u9650\u5236\u7684\u60c5\u51b5\u4e0b\u7b49\u5f85\u5355\u4e2a\u534f\u7a0b\u3002</p> <p>We can explore how to wait for all tasks using asyncio.wait().</p> <p>In this example, we will define a simple task coroutine that generates a random value, sleeps for a fraction of a second, then reports a message with the generated value.</p> <p>The main coroutine will then create many tasks in a list comprehension with the coroutine and then wait for all tasks to be completed.</p> <p>The complete example is listed below.</p> <pre><code># SuperFastPython.com\n# example of waiting for all tasks to complete\nfrom random import random\nimport asyncio\n\n# coroutine to execute in a new task\nasync def task_coro(arg):\n    # generate a random value between 0 and 1\n    value = random()\n    # block for a moment\n    await asyncio.sleep(value)\n    # report the value\n    print(f'&gt;task {arg} done with {value}')\n\n# main coroutine\nasync def main():\n    # create many tasks\n    tasks = [asyncio.create_task(task_coro(i)) for i in range(10)]\n    # wait for all tasks to complete\n    done,pending = await asyncio.wait(tasks)\n    # report results\n    print('All done')\n\n# start the asyncio program\nasyncio.run(main())\n</code></pre> <p>Running the example first creates the main() coroutine and uses it as the entry point into the asyncio program.</p> <p>The main() coroutine then creates a list of ten tasks in a list comprehension, each providing a unique integer argument from 0 to 9.</p> <p>The main() coroutine is then suspended and waits for all tasks to complete.</p> <p>The tasks execute. Each generates a random value, sleeps for a moment, then reports its generated value.</p> <p>After all tasks have been completed, the main() coroutine resumes and reports a final message.</p> <p>This example highlights how we can use the wait() function to wait for a collection of tasks to be completed.</p> <p>This is perhaps the most common usage of the function.</p> <p>Note, that the results will differ each time the program is run given the use of random numbers.</p> <pre><code>&gt;task 5 done with 0.0591009105682192\n&gt;task 8 done with 0.10453715687017351\n&gt;task 0 done with 0.15462838864295925\n&gt;task 6 done with 0.4103492027393125\n&gt;task 9 done with 0.45567100006991623\n&gt;task 2 done with 0.6984682905809402\n&gt;task 7 done with 0.7785363531316224\n&gt;task 3 done with 0.827386088873161\n&gt;task 4 done with 0.9481344994700972\n&gt;task 1 done with 0.9577302665040541\nAll done\n</code></pre> <p>You can learn more about the wait() function in the tutorial:</p> <ul> <li>How to Use Asyncio wait() in Python</li> </ul> <p>Next, we will explore how to wait for a single coroutine with a time limit.</p>"},{"location":"asyncio/en/c13/","title":"13. \u7b49\u5f85\u6709\u65f6\u95f4\u9650\u5236\u7684\u534f\u7a0b","text":"<p>13. Wait for a Coroutine with a Time Limit</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 asyncio.wait_for() \u51fd\u6570\u7b49\u5f85 asyncio \u4efb\u52a1\u6216\u534f\u7a0b\u5b8c\u6210\u5e76\u8d85\u65f6\u3002</p> <p>\u5982\u679c\u5728\u4efb\u52a1\u5b8c\u6210\u4e4b\u524d\u8d85\u65f6\uff0c\u5219\u4efb\u52a1\u5c06\u88ab\u53d6\u6d88\u3002</p> <p>\u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b\u3002</p> <p>We can wait for an asyncio task or coroutine to complete with a timeout using the asyncio.wait_for() function.</p> <p>If the timeout elapses before the task completes, the task is canceled.</p> <p>Let\u2019s take a closer look.</p>"},{"location":"asyncio/en/c13/#131-\u4ec0\u4e48\u662f-asyncio-wait_for","title":"13.1 \u4ec0\u4e48\u662f Asyncio wait_for()","text":"<p>13.1 What is Asyncio wait_for()</p> \u4e2d\u6587\u82f1\u6587 <p>asyncio.wait_for() \u51fd\u6570\u5141\u8bb8\u8c03\u7528\u8005\u7b49\u5f85\u5f02\u6b65\u4efb\u52a1\u6216\u534f\u7a0b\u5b8c\u6210\u5e76\u8d85\u65f6\u3002</p> <p>\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u8d85\u65f6\uff0cwait_for()\u51fd\u6570\u5c06\u7b49\u5f85\uff0c\u76f4\u5230\u4efb\u52a1\u5b8c\u6210\u3002</p> <p>\u5982\u679c\u6307\u5b9a\u4e86\u8d85\u65f6\u5e76\u5728\u4efb\u52a1\u5b8c\u6210\u4e4b\u524d\u8d85\u65f6\uff0c\u5219\u4efb\u52a1\u5c06\u88ab\u53d6\u6d88\u3002</p> <p>\u7b49\u5f85 aw waitable \u5b8c\u6210\u5e76\u8d85\u65f6\u3002</p> <p>\u2014 COROUTINES AND TASKS</p> <p>\u8fd9\u5141\u8bb8\u8c03\u7528\u8005\u8bbe\u7f6e\u4ed6\u4eec\u613f\u610f\u7b49\u5f85\u4efb\u52a1\u5b8c\u6210\u591a\u957f\u65f6\u95f4\u7684\u671f\u671b\uff0c\u5e76\u5728\u8d85\u65f6\u7ed3\u675f\u65f6\u901a\u8fc7\u53d6\u6d88\u4efb\u52a1\u6765\u5f3a\u5236\u8d85\u65f6\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86 asyncio.wait_for() \u51fd\u6570\u662f\u4ec0\u4e48\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528\u5b83\u3002</p> <p>The asyncio.wait_for() function allows the caller to wait for an asyncio task or coroutine to complete with a timeout.</p> <p>If no timeout is specified, the wait_for() function will wait until the task is completed.</p> <p>If a timeout is specified and elapses before the task is complete, then the task is canceled.</p> <p>Wait for the aw awaitable to complete with a timeout.</p> <p>\u2014 COROUTINES AND TASKS</p> <p>This allows the caller to both set an expectation about how long they are willing to wait for a task to complete, and to enforce the timeout by canceling the task if the timeout elapses.</p> <p>Now that we know what the asyncio.wait_for() function is, let\u2019s look at how to use it.</p>"},{"location":"asyncio/en/c13/#132-\u5982\u4f55\u4f7f\u7528-asyncio-wait_for","title":"13.2 \u5982\u4f55\u4f7f\u7528 Asyncio wait_for()","text":"<p>13.2 How to Use Asyncio wait_for()</p> \u4e2d\u6587\u82f1\u6587 <p>asyncio.wait_for() \u51fd\u6570\u9700\u8981\u7b49\u5f85\u548c\u8d85\u65f6\u3002</p> <p>\u53ef\u7b49\u5f85\u7684\u53ef\u80fd\u662f\u534f\u7a0b\u6216\u4efb\u52a1\u3002</p> <p>\u5fc5\u987b\u6307\u5b9a\u8d85\u65f6\uff0c\u5e76\u4e14\u53ef\u4ee5\u4e3a None\uff08\u65e0\u8d85\u65f6\uff09\u3001\u6574\u6570\u6216\u6d6e\u70b9\u6570\u79d2\u6570\u3002</p> <p>wait_for() \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u534f\u7a0b\uff0c\u8be5\u534f\u7a0b\u5728\u88ab\u663e\u5f0f\u7b49\u5f85\u6216\u5b89\u6392\u4e3a\u4efb\u52a1\u4e4b\u524d\u4e0d\u4f1a\u6267\u884c\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u7b49\u5f85\u4efb\u52a1\u5b8c\u6210\nawait asyncio.wait_for(coro, timeout=10)\n</code></pre> <p>\u5982\u679c\u63d0\u4f9b\u4e86\u534f\u7a0b\uff0c\u5219\u4f1a\u5728\u6267\u884c wait_for() \u534f\u7a0b\u65f6\u5c06\u5176\u8f6c\u6362\u4e3a\u4efb\u52a1\u3002</p> <p>\u5982\u679c\u5728\u4efb\u52a1\u5b8c\u6210\u4e4b\u524d\u8d85\u65f6\uff0c\u4efb\u52a1\u5c06\u88ab\u53d6\u6d88\uff0c\u5e76\u5f15\u53d1 asyncio.TimeoutError\uff0c\u8fd9\u53ef\u80fd\u9700\u8981\u5904\u7406\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u6267\u884c\u8d85\u65f6\u4efb\u52a1\n\ntry:\n    # \u7b49\u5f85\u4efb\u52a1\u5b8c\u6210\n    await asyncio.wait_for(coro, timeout=1)\nexcept asyncio.TimeoutError:\n    # ...\n</code></pre> <p>\u5982\u679c\u7b49\u5f85\u7684\u4efb\u52a1\u56e0\u672a\u5904\u7406\u7684\u5f02\u5e38\u800c\u5931\u8d25\uff0c\u5219\u8be5\u5f02\u5e38\u5c06\u4f20\u64ad\u56de\u6b63\u5728\u7b49\u5f85 wait_for() \u534f\u7a0b\u7684\u8c03\u7528\u8005\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u53ef\u80fd\u9700\u8981\u5bf9\u5176\u8fdb\u884c\u5904\u7406\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u6267\u884c\u53ef\u80fd\u5931\u8d25\u7684\u4efb\u52a1\ntry:\n    # \u7b49\u5f85\u4efb\u52a1\u5b8c\u6210\n    await asyncio.wait_for(coro, timeout=1)\nexcept asyncio.TimeoutError:\n    # ...\nexcept Exception:\n    # ...\n</code></pre> <p>\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u8c03\u7528 wait_for() \u5e76\u8bbe\u7f6e\u8d85\u65f6\u3002</p> <p>The asyncio.wait_for() function takes an awaitable and a timeout.</p> <p>The awaitable may be a coroutine or a task.</p> <p>A timeout must be specified and may be None for no timeout, an integer or floating point number of seconds.</p> <p>The wait_for() function returns a coroutine that is not executed until it is explicitly awaited or scheduled as a task.</p> <p>For example:</p> <pre><code>...\n# wait for a task to complete\nawait asyncio.wait_for(coro, timeout=10)\n</code></pre> <p>If a coroutine is provided, it will be converted to the task when the wait_for() coroutine is executed.</p> <p>If the timeout elapses before the task is completed, the task is canceled, and an asyncio.TimeoutError is raised, which may need to be handled.</p> <p>For example:</p> <pre><code>...\n# execute a task with a timeout\n\ntry:\n    # wait for a task to complete\n    await asyncio.wait_for(coro, timeout=1)\nexcept asyncio.TimeoutError:\n    # ...\n</code></pre> <p>If the waited-for task fails with an unhandled exception, the exception will be propagated back to the caller that is awaiting on the wait_for() coroutine, in which case it may need to be handled.</p> <p>For example</p> <pre><code>...\n# execute a task that may fail\ntry:\n    # wait for a task to complete\n    await asyncio.wait_for(coro, timeout=1)\nexcept asyncio.TimeoutError:\n    # ...\nexcept Exception:\n    # ...\n</code></pre> <p>Next, let\u2019s look at how we can call wait_for() with a timeout.</p>"},{"location":"asyncio/en/c13/#133-\u5e26\u6709\u8d85\u65f6\u7684-asyncio-wait_for-\u793a\u4f8b","title":"13.3 \u5e26\u6709\u8d85\u65f6\u7684 Asyncio wait_for() \u793a\u4f8b","text":"<p>13.3 Example of Asyncio wait_for() With a Timeout</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u63a2\u7d22\u5982\u4f55\u5728\u4efb\u52a1\u5b8c\u6210\u4e4b\u524d\u7b49\u5f85\u8d85\u65f6\u7684\u534f\u7a0b\u3002</p> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u50cf\u4e0a\u9762\u4e00\u6837\u6267\u884c\u4e00\u4e2a\u534f\u7a0b\uff0c\u9664\u4e86\u8c03\u7528\u8005\u7b49\u5f85 0.2 \u79d2\u6216 200 \u6beb\u79d2\u7684\u56fa\u5b9a\u8d85\u65f6\u3002</p> <p>\u56de\u60f3\u4e00\u4e0b\uff0c\u4e00\u79d2\u7b49\u4e8e 1,000 \u6beb\u79d2\u3002</p> <p>\u4efb\u52a1\u534f\u7a0b\u7ecf\u8fc7\u4fee\u6539\uff0c\u4f7f\u5176\u4f11\u7720\u65f6\u95f4\u8d85\u8fc7\u4e00\u79d2\uff0c\u786e\u4fdd\u8d85\u65f6\u59cb\u7ec8\u5728\u4efb\u52a1\u5b8c\u6210\u4e4b\u524d\u5230\u671f\u3002</p> <p>\u4e0b\u9762\u5217\u51fa\u4e86\u5b8c\u6574\u7684\u793a\u4f8b\u3002</p> <pre><code># SuperFastPython.com\n# \u7b49\u5f85\u8d85\u65f6\u534f\u7a0b\u7684\u793a\u4f8b\nfrom random import random\nimport asyncio\n\n# \u5728\u65b0\u4efb\u52a1\u4e2d\u6267\u884c\u7684\u534f\u7a0b\nasync def task_coro(arg):\n    # \u751f\u6210 0 \u5230 1 \u4e4b\u95f4\u7684\u968f\u673a\u503c\n    value = 1 + random()\n    # \u62a5\u544a\u6d88\u606f\n    print(f'&gt;task got {value}')\n    # \u963b\u585e\u7247\u523b\n    await asyncio.sleep(value)\n    # \u62a5\u544a\u6240\u6709\u5df2\u5b8c\u6210\n    print('&gt;task done')\n\n# \u4e3b\u534f\u7a0b\nasync def main():\n    # \u521b\u5efa\u4e00\u4e2a\u4efb\u52a1\n    task = task_coro(1)\n    # \u6267\u884c\u5e76\u7b49\u5f85\u4efb\u52a1\uff0c\u65e0\u8d85\u65f6\n    try:\n        await asyncio.wait_for(task, timeout=0.2)\n    except asyncio.TimeoutError:\n        print('Gave up waiting, task canceled')\n\n# \u5f00\u59cb\u5f02\u6b65\u7a0b\u5e8f\nasyncio.run(main())\n</code></pre> <p>\u8fd0\u884c\u8be5\u793a\u4f8b\u9996\u5148\u521b\u5efa main() \u534f\u7a0b\uff0c\u5e76\u5c06\u5176\u7528\u4f5c asyncio \u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u3002</p> <p>main() \u534f\u7a0b\u521b\u5efa\u4efb\u52a1\u534f\u7a0b\u3002 \u7136\u540e\uff0c\u5b83\u8c03\u7528 wait_for() \u5e76\u4f20\u9012\u4efb\u52a1\u534f\u7a0b\u5e76\u5c06\u8d85\u65f6\u8bbe\u7f6e\u4e3a 0.2 \u79d2\u3002</p> <p>main() \u534f\u7a0b\u88ab\u6302\u8d77\u5e76\u6267\u884c task_coro()\u3002 \u5b83\u62a5\u544a\u4e00\u6761\u6d88\u606f\u5e76\u4f11\u7720\u4e00\u4f1a\u513f\u3002</p> <p>main() \u534f\u7a0b\u5728\u8d85\u65f6\u540e\u6062\u590d\u3002 wait_for() \u534f\u7a0b\u53d6\u6d88 task_coro() \u534f\u7a0b\uff0c\u5e76\u4e14 main() \u534f\u7a0b\u88ab\u6302\u8d77\u3002</p> <p>task_coro() \u518d\u6b21\u8fd0\u884c\u5e76\u54cd\u5e94\u8981\u7ec8\u6b62\u7684\u8bf7\u6c42\u3002 \u5b83\u5f15\u53d1 TimeoutError \u5f02\u5e38\u5e76\u7ec8\u6b62\u3002</p> <p>main() \u534f\u7a0b\u6062\u590d\u5e76\u5904\u7406\u7531 task_coro() \u5f15\u53d1\u7684 TimeoutError\u3002</p> <p>\u8fd9\u5f3a\u8c03\u4e86\u6211\u4eec\u5982\u4f55\u8c03\u7528\u5e26\u6709\u8d85\u65f6\u7684 wait_for() \u51fd\u6570\uff0c\u5e76\u5728\u8d85\u65f6\u5185\u672a\u5b8c\u6210\u4efb\u52a1\u65f6\u53d6\u6d88\u4efb\u52a1\u3002</p> <p>\u7531\u4e8e\u4f7f\u7528\u968f\u673a\u6570\uff0c\u7a0b\u5e8f\u6bcf\u6b21\u8fd0\u884c\u65f6\u7684\u8f93\u51fa\u90fd\u4f1a\u6709\u6240\u4e0d\u540c\u3002</p> <pre><code>&gt;task got 0.685375224799321\nGave up waiting, task canceled\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173 wait_for() \u51fd\u6570\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>Asyncio wait_for() \u7b49\u5f85\u8d85\u65f6</li> </ul> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u63a2\u8ba8\u5982\u4f55\u4fdd\u62a4\u5f02\u6b65\u4efb\u52a1\u4e0d\u88ab\u53d6\u6d88\u3002</p> <p>We can explore how to wait for a coroutine with a timeout that elapses before the task is completed.</p> <p>In this example, we execute a coroutine as above, except the caller waits a fixed timeout of 0.2 seconds or 200 milliseconds.</p> <p>Recall that one second is equal to 1,000 milliseconds.</p> <p>The task coroutine is modified so that it sleeps for more than one second, ensuring that the timeout always expires before the task is complete.</p> <p>The complete example is listed below.</p> <pre><code># SuperFastPython.com\n# example of waiting for a coroutine with a timeout\nfrom random import random\nimport asyncio\n\n# coroutine to execute in a new task\nasync def task_coro(arg):\n    # generate a random value between 0 and 1\n    value = 1 + random()\n    # report message\n    print(f'&gt;task got {value}')\n    # block for a moment\n    await asyncio.sleep(value)\n    # report all done\n    print('&gt;task done')\n\n# main coroutine\nasync def main():\n    # create a task\n    task = task_coro(1)\n    # execute and wait for the task without a timeout\n    try:\n        await asyncio.wait_for(task, timeout=0.2)\n    except asyncio.TimeoutError:\n        print('Gave up waiting, task canceled')\n\n# start the asyncio program\nasyncio.run(main())\n</code></pre> <p>Running the example first creates the main() coroutine and uses it as the entry point into the asyncio program.</p> <p>The main() coroutine creates the task coroutine. It then calls wait_for() and passes the task coroutine and sets the timeout to 0.2 seconds.</p> <p>The main() coroutine is suspended and the task_coro() is executed. It reports a message and sleeps for a moment.</p> <p>The main() coroutine resumes after the timeout has elapsed. The wait_for() coroutine cancels the task_coro() coroutine and the main() coroutine is suspended.</p> <p>The task_coro() runs again and responds to the request to be terminated. It raises a TimeoutError exception and terminates.</p> <p>The main() coroutine resumes and handles the TimeoutError raised by the task_coro().</p> <p>This highlights how we can call the wait_for() function with a timeout and to cancel a task if it is not completed within a timeout.</p> <p>The output from the program will differ each time it is run given the use of random numbers.</p> <pre><code>&gt;task got 0.685375224799321\nGave up waiting, task canceled\n</code></pre> <p>You can learn more about the wait_for() function in the tutorial:</p> <ul> <li>Asyncio wait_for() to Wait With a Timeout</li> </ul> <p>Next, we will explore how we might protect an asyncio task from being canceled.</p>"},{"location":"asyncio/en/c14/","title":"14. \u9632\u6b62\u4efb\u52a1\u88ab\u53d6\u6d88","text":"<p>14. Shield Tasks from Cancellation</p> \u4e2d\u6587\u82f1\u6587 <p>\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u5f02\u6b65\u4efb\u52a1\u7684 cancel() \u65b9\u6cd5\u6765\u53d6\u6d88\u5f02\u6b65\u4efb\u52a1\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06\u4efb\u52a1\u5305\u88c5\u5728\u5bf9 asyncio.shield() \u7684\u8c03\u7528\u4e2d\u6765\u9632\u6b62\u4efb\u52a1\u88ab\u53d6\u6d88\u3002</p> <p>\u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b\u3002</p> <p>Asyncio tasks can be canceled by calling their cancel() method.</p> <p>We can protect a task from being canceled by wrapping it in a call to asyncio.shield().</p> <p>Let\u2019s take a closer look.</p>"},{"location":"asyncio/en/c14/#141-\u4ec0\u4e48\u662f-asyncio-shield","title":"14.1 \u4ec0\u4e48\u662f Asyncio shield()","text":"<p>14.1 What is Asyncio shield()</p> \u4e2d\u6587\u82f1\u6587 <p>asyncio.shield() \u51fd\u6570\u5728 Future \u4e2d\u5305\u88c5\u4e86\u4e00\u4e2a\u53ef\u7b49\u5f85\u7684\u5bf9\u8c61\uff0c\u5b83\u5c06\u5438\u6536\u8981\u53d6\u6d88\u7684\u8bf7\u6c42\u3002</p> <p>\u4fdd\u62a4\u53ef\u7b49\u5f85\u5bf9\u8c61\u4e0d\u88ab\u53d6\u6d88\u3002</p> <p>\u2014 COROUTINES AND TASKS</p> <p>\u8fd9\u610f\u5473\u7740\u53d7\u5c4f\u853d\u7684 future \u53ef\u4ee5\u4f20\u9012\u7ed9\u53ef\u80fd\u5c1d\u8bd5\u53d6\u6d88\u5b83\u7684\u4efb\u52a1\uff0c\u5e76\u4e14\u53d6\u6d88\u8bf7\u6c42\u770b\u8d77\u6765\u50cf\u662f\u6210\u529f\u7684\uff0c\u53ea\u4e0d\u8fc7\u88ab\u5c4f\u853d\u7684\u4efb\u52a1\u6216\u534f\u7a0b\u5c06\u7ee7\u7eed\u8fd0\u884c\u3002</p> <p>\u5b83\u5728\u5f02\u6b65\u7a0b\u5e8f\u4e2d\u53ef\u80fd\u5f88\u6709\u7528\uff0c\u5176\u4e2d\u67d0\u4e9b\u4efb\u52a1\u53ef\u4ee5\u53d6\u6d88\uff0c\u4f46\u5176\u4ed6\u4efb\u52a1\uff08\u53ef\u80fd\u5177\u6709\u66f4\u9ad8\u4f18\u5148\u7ea7\uff09\u5219\u4e0d\u80fd\u3002</p> <p>\u5b83\u5728\u67d0\u4e9b\u4efb\u52a1\u53ef\u4ee5\u5b89\u5168\u53d6\u6d88\u7684\u7a0b\u5e8f\u4e2d\u4e5f\u53ef\u80fd\u5f88\u6709\u7528\uff0c\u4f8b\u5982\u90a3\u4e9b\u8bbe\u8ba1\u65f6\u8003\u8651\u4e86 asyncio \u7684\u4efb\u52a1\uff0c\u800c\u5176\u4ed6\u4efb\u52a1\u5219\u65e0\u6cd5\u5b89\u5168\u7ec8\u6b62\uff0c\u56e0\u6b64\u5fc5\u987b\u9632\u6b62\u53d6\u6d88\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86 asyncio.shield() \u662f\u4ec0\u4e48\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528\u5b83\u3002</p> <p>The asyncio.shield() function wraps an awaitable in Future that will absorb requests to be canceled.</p> <p>Protect an awaitable object from being cancelled.</p> <p>\u2014 COROUTINES AND TASKS</p> <p>This means the shielded future can be passed around to tasks that may try to cancel it and the cancellation request will look like it was successful, except that the Task or coroutine that is being shielded will continue to run.</p> <p>It may be useful in asyncio programs where some tasks can be canceled, but others, perhaps with a higher priority cannot.</p> <p>It may also be useful in programs where some tasks can safely be canceled, such as those that were designed with asyncio in mind, whereas others cannot be safely terminated and therefore must be shielded from cancellation.</p> <p>Now that we know what asyncio.shield() is, let\u2019s look at how to use it.</p>"},{"location":"asyncio/en/c14/#142-\u5982\u4f55\u4f7f\u7528-asyncioshield","title":"14.2 \u5982\u4f55\u4f7f\u7528 Asyncioshield()","text":"<p>14.2 How to Use Asyncio shield()</p> \u4e2d\u6587\u82f1\u6587 <p>asyncio.shield() \u51fd\u6570\u5c06\u4fdd\u62a4\u53e6\u4e00\u4e2a Task \u6216\u534f\u7a0b\u4e0d\u88ab \u53d6\u6d88\u3002</p> <p>\u5b83\u63a5\u53d7\u4e00\u4e2a\u53ef\u7b49\u5f85\u4f5c\u4e3a\u53c2\u6570\u5e76\u8fd4\u56de\u4e00\u4e2a asyncio.Future \u5bf9\u8c61\u3002</p> <p>\u7136\u540e\u53ef\u4ee5\u76f4\u63a5\u7b49\u5f85 Future \u5bf9\u8c61\u6216\u5c06\u5176\u4f20\u9012\u7ed9\u53e6\u4e00\u4e2a\u4efb\u52a1\u6216\u534f\u7a0b\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u9632\u6b62\u4efb\u52a1\u88ab\u53d6\u6d88\nshielded = asyncio.shield(task)\n# \u7b49\u5f85\u5c4f\u853d\u4efb\u52a1\nawait shielded\n</code></pre> <p>\u8fd4\u56de\u7684 Future \u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 cancel() \u65b9\u6cd5\u53d6\u6d88\u3002</p> <p>\u5982\u679c\u5185\u90e8\u4efb\u52a1\u6b63\u5728\u8fd0\u884c\uff0c\u5219\u8bf7\u6c42\u5c06\u62a5\u544a\u4e3a\u6210\u529f\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u53d6\u6d88\u5c4f\u853d\u4efb\u52a1\nwas_canceld = shielded.cancel()\n</code></pre> <p>\u4efb\u4f55\u7b49\u5f85 Future \u5bf9\u8c61\u7684\u534f\u7a0b\u90fd\u4f1a\u5f15\u53d1 asyncio.CancelledError\uff0c\u8fd9\u53ef\u80fd\u9700\u8981\u5904\u7406\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\ntry:\n    # \u7b49\u5f85\u5c4f\u853d\u4efb\u52a1\n    await asyncio.shield(task)\nexcept asyncio.CancelledError:\n    # ...\n</code></pre> <p>\u91cd\u8981\u7684\u662f\uff0c\u5bf9 Future \u5bf9\u8c61\u53d1\u51fa\u7684\u53d6\u6d88\u8bf7\u6c42\u4e0d\u4f1a\u4f20\u64ad\u5230\u5185\u90e8\u4efb\u52a1\u3002</p> <p>\u8fd9\u610f\u5473\u7740\u53d6\u6d88\u8bf7\u6c42\u88ab\u5c4f\u853d\u5438\u6536\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u4efb\u52a1\ntask = asyncio.create_task(coro())\n# \u521b\u5efa\u4e00\u4e2a\u9632\u53d6\u6d88\nshield = asyncio.shield(task)\n# \u53d6\u6d88\u5c4f\u853d\uff08\u4e0d\u53d6\u6d88\u4efb\u52a1\uff09\nshield.cancel()\n</code></pre> <p>\u5982\u679c\u5411 asyncio.shield() \u51fd\u6570\u63d0\u4f9b\u534f\u7a0b\uff0c\u5b83\u5c06\u88ab\u5305\u88c5\u5728 asyncio.Task() \u4e2d\u5e76\u7acb\u5373\u8c03\u5ea6\u3002</p> <p>\u8fd9\u610f\u5473\u7740\u5c4f\u853d\u4e0d\u9700\u8981\u7b49\u5f85\u5185\u90e8\u534f\u7a0b\u8fd0\u884c\u3002</p> <p>\u5982\u679c aw \u662f\u534f\u7a0b\uff0c\u5b83\u4f1a\u81ea\u52a8\u5b89\u6392\u4e3a\u4efb\u52a1\u3002</p> <p>\u2014 COROUTINES AND TASKS</p> <p>\u5982\u679c\u6b63\u5728\u5c4f\u853d\u7684\u4efb\u52a1\u88ab\u53d6\u6d88\uff0c\u5219\u53d6\u6d88\u8bf7\u6c42\u5c06\u4f20\u64ad\u5230\u5c4f\u853d\uff0c\u5c4f\u853d\u4e5f\u5c06\u88ab\u53d6\u6d88\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u4efb\u52a1\ntask = asyncio.create_task(coro())\n# \u521b\u5efa\u4e00\u4e2a\u76fe\u724c\nshield = asyncio.shield(task)\n# \u53d6\u6d88\u4efb\u52a1\uff08\u540c\u65f6\u53d6\u6d88\u62a4\u76fe\uff09\ntask.cancel()\n</code></pre> <p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u5982\u4f55\u4f7f\u7528 asyncio.shield() \u51fd\u6570\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e9b\u6709\u6548\u7684\u793a\u4f8b\u3002</p> <p>The asyncio.shield() function will protect another Task or coroutine from being canceled.</p> <p>It takes an awaitable as an argument and returns an asyncio.Future object.</p> <p>The Future object can then be awaited directly or passed to another task or coroutine.</p> <p>For example:</p> <pre><code>...\n# shield a task from cancellation\nshielded = asyncio.shield(task)\n# await the shielded task\nawait shielded\n</code></pre> <p>The returned Future can be canceled by calling the cancel() method.</p> <p>If the inner task is running, the request will be reported as successful.</p> <p>For example:</p> <pre><code>...\n# cancel a shielded task\nwas_canceld = shielded.cancel()\n</code></pre> <p>Any coroutines awaiting the Future object will raise an asyncio.CancelledError, which may need to be handled.</p> <p>For example:</p> <pre><code>...\ntry:\n    # await the shielded task\n    await asyncio.shield(task)\nexcept asyncio.CancelledError:\n    # ...\n</code></pre> <p>Importantly, the request for cancellation made on the Future object is not propagated to the inner task.</p> <p>This means that the request for cancellation is absorbed by the shield.</p> <p>For example:</p> <pre><code>...\n# create a task\ntask = asyncio.create_task(coro())\n# create a shield\nshield = asyncio.shield(task)\n# cancel the shield (does not cancel the task)\nshield.cancel()\n</code></pre> <p>If a coroutine is provided to the asyncio.shield() function it is wrapped in an asyncio.Task() and scheduled immediately.</p> <p>This means that the shield does not need to be awaited for the inner coroutine to run.</p> <p>If aw is a coroutine it is automatically scheduled as a Task.</p> <p>\u2014 COROUTINES AND TASKS</p> <p>If the task that is being shielded is canceled, the cancellation request will be propagated up to the shield, which will also be canceled.</p> <p>For example:</p> <pre><code>...\n# create a task\ntask = asyncio.create_task(coro())\n# create a shield\nshield = asyncio.shield(task)\n# cancel the task (also cancels the shield)\ntask.cancel()\n</code></pre> <p>Now that we know how to use the asyncio.shield() function, let\u2019s look at some worked examples.</p>"},{"location":"asyncio/en/c14/#143-\u4efb\u52a1\u7684-asyncioshield-\u793a\u4f8b","title":"14.3 \u4efb\u52a1\u7684 Asyncioshield() \u793a\u4f8b","text":"<p>14.3 Example of Asyncio shield() for a Task</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u63a2\u7d22\u5982\u4f55\u4f7f\u7528 asyncio.shield() \u6765\u4fdd\u62a4\u4efb\u52a1\u4e0d\u88ab\u53d6\u6d88\u3002</p> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u534f\u7a0b\u4efb\u52a1\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u6574\u6570\u53c2\u6570\uff0c\u4f11\u7720\u4e00\u79d2\u949f\uff0c\u7136\u540e\u8fd4\u56de\u8be5\u53c2\u6570\u3002 \u7136\u540e\u53ef\u4ee5\u521b\u5efa\u534f\u7a0b\u5e76\u5c06\u5176\u5b89\u6392\u4e3a\u4efb\u52a1\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u7b2c\u4e8c\u4e2a\u534f\u7a0b\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u4efb\u52a1\uff0c\u4f11\u7720\u4e00\u5c0f\u4f1a\u513f\uff0c\u7136\u540e\u53d6\u6d88\u63d0\u4f9b\u7684\u4efb\u52a1\u3002</p> <p>\u5728\u4e3b\u534f\u7a0b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5c4f\u853d\u7b2c\u4e00\u4e2a\u4efb\u52a1\u5e76\u5c06\u5176\u4f20\u9012\u7ed9\u7b2c\u4e8c\u4e2a\u4efb\u52a1\uff0c\u7136\u540e\u7b49\u5f85\u5c4f\u853d\u7684\u4efb\u52a1\u3002</p> <p>\u9884\u8ba1\u62a4\u76fe\u5c06\u88ab\u53d6\u6d88\uff0c\u800c\u5185\u90e8\u4efb\u52a1\u5b8c\u597d\u65e0\u635f\u3002 \u53d6\u6d88\u5c06\u6270\u4e71\u4e3b\u534f\u7a0b\u3002 \u6211\u4eec\u53ef\u4ee5\u5728\u7a0b\u5e8f\u7ed3\u675f\u65f6\u68c0\u67e5\u5185\u90e8\u4efb\u52a1\u7684\u72b6\u6001\uff0c\u5e76\u4e14\u6211\u4eec\u5e0c\u671b\u5b83\u5df2\u6b63\u5e38\u5b8c\u6210\uff0c\u65e0\u8bba\u5c4f\u853d\u4e0a\u662f\u5426\u53d1\u51fa\u53d6\u6d88\u8bf7\u6c42\u3002</p> <p>\u4e0b\u9762\u5217\u51fa\u4e86\u5b8c\u6574\u7684\u793a\u4f8b\u3002</p> <pre><code># SuperFastPython.com\n# \u4f7f\u7528 asyncio shield \u4fdd\u62a4\u4efb\u52a1\u4e0d\u88ab\u53d6\u6d88\u7684\u793a\u4f8b\nimport asyncio\n\n# \u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u5f02\u6b65\nasync def simple_task(number):\n    # \u6682\u65f6\u963b\u585e\n    await asyncio.sleep(1)\n    # \u8fd4\u56de\u53c2\u6570\n    return number\n\n# cancel the given task after a moment\nasync def cancel_task(task):\n    # \u6682\u65f6\u963b\u585e\n    await asyncio.sleep(0.2)\n    # \u53d6\u6d88\u4efb\u52a1\n    was_cancelled = task.cancel()\n    print(f'cancelled: {was_cancelled}')\n\n# \u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u534f\u7a0b\nasync def main():\n    # \u521b\u5efa\u534f\u7a0b\n    coro = simple_task(1)\n    # \u521b\u5efa\u4efb\u52a1\n    task = asyncio.create_task(coro)\n    # \u521b\u5efa\u88ab\u4fdd\u62a4\u7684\u4efb\u52a1\n    shielded = asyncio.shield(task)\n    # \u521b\u5efa\u4efb\u52a1\u4ee5\u53d6\u6d88\u4e0a\u4e00\u4e2a\u4efb\u52a1\n    asyncio.create_task(cancel_task(shielded))\n    # \u5904\u7406\u53d6\u6d88\n    try:\n        # \u7b49\u5f85\u5c4f\u853d\u4efb\u52a1\n        result = await shielded\n        # \u62a5\u544a\u7ed3\u679c\n        print(f'&gt;got: {result}')\n    except asyncio.CancelledError:\n        print('shielded was cancelled')\n    # \u7a0d\u7b49\n    await asyncio.sleep(1)\n    # \u62a5\u544a\u4efb\u52a1\u7684\u8be6\u7ec6\u4fe1\u606f\n    print(f'shielded: {shielded}')\n    print(f'task: {task}')\n\n# \u5f00\u59cb\nasyncio.run(main())\n</code></pre> <p>\u8fd0\u884c\u8be5\u793a\u4f8b\u9996\u5148\u521b\u5efa main() \u534f\u7a0b\u5e76\u5c06\u5176\u7528\u4f5c\u5e94\u7528\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u3002</p> <p>\u521b\u5efa\u4efb\u52a1\u534f\u7a0b\uff0c\u7136\u540e\u5c06\u5176\u5305\u88c5\u5e76\u5b89\u6392\u5728 Task \u4e2d\u3002</p> <p>\u7136\u540e\u8be5\u4efb\u52a1\u5c31\u4e0d\u4f1a\u88ab\u53d6\u6d88\u3002</p> <p>\u7136\u540e\uff0c\u5c4f\u853d\u4efb\u52a1\u88ab\u4f20\u9012\u5230 cancel_task() \u534f\u7a0b\uff0c\u8be5\u534f\u7a0b\u88ab\u5305\u88c5\u5728\u4efb\u52a1\u4e2d\u5e76\u8fdb\u884c\u8c03\u5ea6\u3002</p> <p>\u7136\u540e\uff0c\u4e3b\u534f\u7a0b\u7b49\u5f85\u5c4f\u853d\u4efb\u52a1\uff0c\u8be5\u4efb\u52a1\u9700\u8981 CancelledError \u5f02\u5e38\u3002</p> <p>\u8be5\u4efb\u52a1\u8fd0\u884c\u4e00\u4f1a\u513f\u7136\u540e\u4f11\u7720\u3002 \u53d6\u6d88\u4efb\u52a1\u8fd0\u884c\u4e00\u4f1a\u513f\uff0c\u4f11\u7720\uff0c\u6062\u590d\uff0c\u7136\u540e\u53d6\u6d88\u5c4f\u853d\u4efb\u52a1\u3002 \u53d6\u6d88\u8bf7\u6c42\u62a5\u544a\u79f0\u5df2\u6210\u529f\u3002</p> <p>\u8fd9\u4f1a\u5728\u5c4f\u853d\u7684 Future \u4e2d\u5f15\u53d1 CancelledError \u5f02\u5e38\uff0c\u4f46\u4e0d\u4f1a\u5728\u5185\u90e8\u4efb\u52a1\u4e2d\u5f15\u53d1\u3002</p> <p>main() \u534f\u7a0b\u6062\u590d\u5e76\u54cd\u5e94 CancelledError \u5f02\u5e38\uff0c\u62a5\u544a\u4e00\u6761\u6d88\u606f\u3002 \u7136\u540e\u5b83\u4f1a\u518d\u7761\u4e00\u4f1a\u513f\u3002</p> <p>\u4efb\u52a1\u7ee7\u7eed\u3001\u5b8c\u6210\u5e76\u8fd4\u56de\u4e00\u4e2a\u503c\u3002</p> <p>\u6700\u540e\uff0cmain() \u534f\u7a0b\u6062\u590d\uff0c\u5e76\u62a5\u544a\u5c4f\u853d future \u548c\u5185\u90e8\u4efb\u52a1\u7684\u72b6\u6001\u3002 \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5c4f\u853d\u7684 future \u88ab\u6807\u8bb0\u4e3a\u5df2\u53d6\u6d88\uff0c\u800c\u5185\u90e8\u4efb\u52a1\u88ab\u6807\u8bb0\u4e3a\u6b63\u5e38\u5b8c\u6210\u5e76\u63d0\u4f9b\u8fd4\u56de\u503c\u3002</p> <p>\u6b64\u793a\u4f8b\u91cd\u70b9\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528\u9632\u62a4\u7f69\u6210\u529f\u4fdd\u62a4\u5185\u90e8\u4efb\u52a1\u514d\u906d\u53d6\u6d88\u3002</p> <pre><code>cancelled: True\nshielded was cancelled\nshielded: &lt;Future cancelled&gt;\ntask: &lt;Task finished name='Task-2' coro=&lt;simple_task() done, defined at ...&gt; result=1&gt;\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173shield()\u51fd\u6570\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>Asyncio \u9632\u6b62\u53d6\u6d88</li> </ul> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u63a2\u8ba8\u5982\u4f55\u4ece asyncio \u7a0b\u5e8f\u8fd0\u884c\u963b\u585e\u4efb\u52a1\u3002</p> <p>We can explore how to protect a task from cancellation using asyncio.shield().</p> <p>In this example, we define a simple coroutine task that takes an integer argument, sleeps for a second, then returns the argument. The coroutine can then be created and scheduled as a Task.</p> <p>We can define a second coroutine that takes a task, sleeps for a fraction of a second, then cancels the provided task.</p> <p>In the main coroutine, we can then shield the first task and pass it to the second task, then await the shielded task.</p> <p>The expectation is that the shield will be canceled and leave the inner task intact. The cancellation will disrupt the main coroutine. We can check the status of the inner task at the end of the program and we expect it to have been completed normally, regardless of the request to cancel made on the shield.</p> <p>The complete example is listed below.</p> <pre><code># SuperFastPython.com\n# example of using asyncio shield to protect a task from cancellation\nimport asyncio\n\n# define a simple asynchronous\nasync def simple_task(number):\n    # block for a moment\n    await asyncio.sleep(1)\n    # return the argument\n    return number\n\n# cancel the given task after a moment\nasync def cancel_task(task):\n    # block for a moment\n    await asyncio.sleep(0.2)\n    # cancel the task\n    was_cancelled = task.cancel()\n    print(f'cancelled: {was_cancelled}')\n\n# define a simple coroutine\nasync def main():\n    # create the coroutine\n    coro = simple_task(1)\n    # create a task\n    task = asyncio.create_task(coro)\n    # created the shielded task\n    shielded = asyncio.shield(task)\n    # create the task to cancel the previous task\n    asyncio.create_task(cancel_task(shielded))\n    # handle cancellation\n    try:\n        # await the shielded task\n        result = await shielded\n        # report the result\n        print(f'&gt;got: {result}')\n    except asyncio.CancelledError:\n        print('shielded was cancelled')\n    # wait a moment\n    await asyncio.sleep(1)\n    # report the details of the tasks\n    print(f'shielded: {shielded}')\n    print(f'task: {task}')\n\n# start\nasyncio.run(main())\n</code></pre> <p>Running the example first creates the main() coroutine and uses it as the entry point into the application.</p> <p>The task coroutine is created, then it is wrapped and scheduled in a Task.</p> <p>The task is then shielded from cancellation.</p> <p>The shielded task is then passed to the cancel_task() coroutine which is wrapped in a task and scheduled.</p> <p>The main coroutine then awaits the shielded task, which expects a CancelledError exception.</p> <p>The task runs for a moment then sleeps. The cancellation task runs for a moment, sleeps, resumes then cancels the shielded task. The request to cancel reports that it was successful.</p> <p>This raises a CancelledError exception in the shielded Future, although not in the inner task.</p> <p>The main() coroutine resumes and responds to the CancelledError exception, reporting a message. It then sleeps for a while longer.</p> <p>The task resumes, finishes, and returns a value.</p> <p>Finally, the main() coroutine resumes, and reports the status of the shielded future and the inner task. We can see that the shielded future is marked as canceled and yet the inner task is marked as finished normally and provides a return value.</p> <p>This example highlights how a shield can be used to successfully protect an inner task from cancellation.</p> <pre><code>cancelled: True\nshielded was cancelled\nshielded: &lt;Future cancelled&gt;\ntask: &lt;Task finished name='Task-2' coro=&lt;simple_task() done, defined at ...&gt; result=1&gt;\n</code></pre> <p>You can learn more about the shield() function in the tutorial:</p> <ul> <li>Asyncio Shield From Cancellation</li> </ul> <p>Next, we will explore how to run a blocking task from an asyncio program.</p>"},{"location":"asyncio/en/c15/","title":"15. \u5728 Asyncio \u4e2d\u8fd0\u884c\u963b\u585e\u4efb\u52a1","text":"<p>15. Run a Blocking Task in Asyncio</p> \u4e2d\u6587\u82f1\u6587 <p>\u963b\u585e\u4efb\u52a1\u662f\u963b\u6b62\u5f53\u524d\u7ebf\u7a0b\u7ee7\u7eed\u6267\u884c\u7684\u4efb\u52a1\u3002</p> <p>\u5982\u679c\u5728 asyncio \u7a0b\u5e8f\u4e2d\u6267\u884c\u963b\u585e\u4efb\u52a1\uff0c\u5b83\u5c06\u505c\u6b62\u6574\u4e2a\u4e8b\u4ef6\u5faa\u73af\uff0c\u4ece\u800c\u963b\u6b62\u4efb\u4f55\u5176\u4ed6\u534f\u7a0b\u8fdb\u884c\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 asyncio.to_thread() \u548c loop.run_in_executor() \u51fd\u6570\u5728 asyncio \u7a0b\u5e8f\u4e2d\u5f02\u6b65\u8fd0\u884c\u963b\u585e\u8c03\u7528\u3002</p> <p>A blocking task is a task that stops the current thread from progressing.</p> <p>If a blocking task is executed in an asyncio program it stops the entire event loop, preventing any other coroutines from progressing.</p> <p>We can run blocking calls asynchronously in an asyncio program via the asyncio.to_thread() and loop.run_in_executor() functions.</p>"},{"location":"asyncio/en/c15/#151-\u9700\u8981\u5728-asyncio-\u4e2d\u8fd0\u884c\u963b\u585e\u4efb\u52a1","title":"15.1 \u9700\u8981\u5728 Asyncio \u4e2d\u8fd0\u884c\u963b\u585e\u4efb\u52a1","text":"<p>15.1 Need to Run Blocking Tasks in Asyncio</p> \u4e2d\u6587\u82f1\u6587 <p>asyncio\u7684\u91cd\u70b9\u662f\u5f02\u6b65\u7f16\u7a0b\u548c\u975e\u963b\u585eIO\u3002</p> <p>\u7136\u800c\uff0c\u6211\u4eec\u7ecf\u5e38\u9700\u8981\u5728\u5f02\u6b65\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6267\u884c\u963b\u585e\u51fd\u6570\u8c03\u7528\u3002</p> <p>\u8fd9\u53ef\u80fd\u6709\u591a\u79cd\u539f\u56e0\uff0c\u4f8b\u5982\uff1a</p> <ul> <li>\u6267\u884c CPU \u5bc6\u96c6\u578b\u4efb\u52a1\uff0c\u4f8b\u5982\u8ba1\u7b97\u67d0\u4e9b\u5185\u5bb9\u3002</li> <li>\u6267\u884c\u963b\u585e IO \u5bc6\u96c6\u578b\u4efb\u52a1\uff0c\u4f8b\u5982\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6216\u5199\u5165\u3002</li> <li>\u8c03\u7528\u5c1a\u4e0d\u652f\u6301 asyncio \u7684\u7b2c\u4e09\u65b9\u5e93\u3002</li> </ul> <p>\u76f4\u63a5\u5728 asyncio \u7a0b\u5e8f\u4e2d\u8fdb\u884c\u963b\u585e\u8c03\u7528\u5c06\u5bfc\u81f4\u4e8b\u4ef6\u5faa\u73af\u5728\u963b\u585e\u8c03\u7528\u6267\u884c\u65f6\u505c\u6b62\u3002 \u5b83\u4e0d\u4f1a\u5141\u8bb8\u5176\u4ed6\u534f\u7a0b\u5728\u540e\u53f0\u8fd0\u884c\u3002</p> <p>\u6211\u4eec\u5982\u4f55\u5728 asyncio \u7a0b\u5e8f\u4e2d\u5f02\u6b65\u6267\u884c\u963b\u585e\u8c03\u7528\uff1f</p> <p>The focus of asyncio is asynchronous programming and non-blocking IO.</p> <p>Nevertheless, we often need to execute a blocking function call within an asyncio application.</p> <p>This could be for many reasons, such as:</p> <ul> <li>To execute a CPU-bound task like calculating something.</li> <li>To execute a blocking IO-bound task like reading or writing from a file.</li> <li>To call into a third-party library that does not support asyncio yet.</li> </ul> <p>Making a blocking call directly in an asyncio program will cause the event loop to stop while the blocking call is executing. It will not allow other coroutines to run in the background.</p> <p>How can we execute a blocking call in an asyncio program asynchronously?</p>"},{"location":"asyncio/en/c15/#152-\u5982\u4f55\u8fd0\u884c\u963b\u585e\u4efb\u52a1","title":"15.2 \u5982\u4f55\u8fd0\u884c\u963b\u585e\u4efb\u52a1","text":"<p>15.2 How to Run Blocking Tasks</p> \u4e2d\u6587\u82f1\u6587 <p>asyncio \u6a21\u5757\u63d0\u4f9b\u4e86\u4e24\u79cd\u5728 asyncio \u7a0b\u5e8f\u4e2d\u6267\u884c\u963b\u585e\u8c03\u7528\u7684\u65b9\u6cd5\u3002</p> <p>\u7b2c\u4e00\u79cd\u662f\u4f7f\u7528 asyncio.to_thread() \u51fd\u6570\u3002</p> <p>\u8fd9\u662f\u9ad8\u7ea7 API \u4e2d\u7684\u5185\u5bb9\uff0c\u9002\u7528\u4e8e\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\u3002</p> <p>asyncio.to_thread() \u51fd\u6570\u91c7\u7528\u8981\u6267\u884c\u7684\u51fd\u6570\u540d\u79f0\u548c\u4efb\u4f55\u53c2\u6570\u3002</p> <p>\u8be5\u51fd\u6570\u5728\u5355\u72ec\u7684\u7ebf\u7a0b\u4e2d\u6267\u884c\u3002 \u5b83\u8fd4\u56de\u4e00\u4e2a\u53ef\u4ee5\u4f5c\u4e3a\u72ec\u7acb\u4efb\u52a1\u7b49\u5f85\u6216\u8c03\u5ea6\u7684\u534f\u7a0b\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u5728\u5355\u72ec\u7684\u7ebf\u7a0b\u4e2d\u6267\u884c\u51fd\u6570\nawait asyncio.to_thread(task)\n</code></pre> <p>\u5728\u8fd4\u56de\u7684\u534f\u7a0b\u6709\u673a\u4f1a\u5728\u4e8b\u4ef6\u5faa\u73af\u4e2d\u8fd0\u884c\u4e4b\u524d\uff0c\u4efb\u52a1\u4e0d\u4f1a\u5f00\u59cb\u6267\u884c\u3002</p> <p>asyncio.to_thread() \u51fd\u6570\u5728\u540e\u53f0\u521b\u5efa\u4e00\u4e2a ThreadPoolExecutor \u6765\u6267\u884c\u963b\u585e\u8c03\u7528\u3002</p> <p>\u56e0\u6b64\uff0c asyncio.to_thread() \u51fd\u6570\u4ec5\u9002\u7528\u4e8e IO \u5bc6\u96c6\u578b\u4efb\u52a1\u3002</p> <p>\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 loop.run_in_executor() \u51fd\u6570\u3002</p> <p>\u8fd9\u662f\u5728\u4f4e\u7ea7 asyncio API \u4e2d\uff0c\u9996\u5148\u9700\u8981\u8bbf\u95ee\u4e8b\u4ef6\u5faa\u73af\uff0c\u4f8b\u5982\u901a\u8fc7 asyncio.get_running_loop() \u51fd\u6570\u3002</p> <p>loop.run_in_executor() \u51fd\u6570\u9700\u8981\u4e00\u4e2a\u6267\u884c\u5668\u548c\u4e00\u4e2a\u8981\u6267\u884c\u7684\u51fd\u6570\u3002</p> <p>\u5982\u679c\u4e3a\u6267\u884c\u5668\u63d0\u4f9b None\uff0c\u5219\u4f7f\u7528\u9ed8\u8ba4\u6267\u884c\u5668\uff0c\u5373 ThreadPoolExecutor\u3002</p> <p>loop.run_in_executor() \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u53ef\u7b49\u5f85\u7684\u5bf9\u8c61\uff0c\u5982\u679c\u9700\u8981\uff0c\u53ef\u4ee5\u7b49\u5f85\u3002 \u8be5\u4efb\u52a1\u5c06\u7acb\u5373\u5f00\u59cb\u6267\u884c\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u7b49\u5f85\u6216\u5b89\u6392\u8fd4\u56de\u7684\u53ef\u7b49\u5f85\u5bf9\u8c61\u6765\u5f00\u59cb\u6267\u884c\u963b\u585e\u8c03\u7528\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u83b7\u53d6\u4e8b\u4ef6\u5faa\u73af\nloop = asyncio.get_running_loop()\n# \u5728\u5355\u72ec\u7684\u7ebf\u7a0b\u4e2d\u6267\u884c\u51fd\u6570\nawait loop.run_in_executor(None, task)\n</code></pre> <p>\u6216\u8005\uff0c\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u6267\u884c\u5668\u5e76\u5c06\u5176\u4f20\u9012\u7ed9 loop.run_in_executor() \u51fd\u6570\uff0c\u8be5\u51fd\u6570\u5c06\u5728\u6267\u884c\u5668\u4e2d\u6267\u884c\u5f02\u6b65\u8c03\u7528\u3002</p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8c03\u7528\u8005\u5fc5\u987b\u7ba1\u7406\u6267\u884c\u5668\uff0c\u5728\u8c03\u7528\u8005\u5b8c\u6210\u540e\u5c06\u5176\u5173\u95ed\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u8fdb\u7a0b\u6c60\nwith ProcessPoolExecutor as exe:\n    # \u83b7\u53d6\u4e8b\u4ef6\u5faa\u73af\n    loop = asyncio.get_running_loop()\n    # \u5728\u5355\u72ec\u7684\u7ebf\u7a0b\u4e2d\u6267\u884c\u51fd\u6570\n    await loop.run_in_executor(exe, task)\n    # \u8fdb\u7a0b\u6c60\u81ea\u52a8\u5173\u95ed...\n</code></pre> <p>\u8fd9\u4e24\u79cd\u65b9\u6cd5\u5141\u8bb8\u963b\u585e\u8c03\u7528\u4f5c\u4e3a asyncio \u7a0b\u5e8f\u4e2d\u7684\u5f02\u6b65\u4efb\u52a1\u6267\u884c\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u5982\u4f55\u5728 asyncio \u7a0b\u5e8f\u4e2d\u6267\u884c\u963b\u585e\u8c03\u7528\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e9b\u6709\u6548\u7684\u793a\u4f8b\u3002</p> <p>The asyncio module provides two approaches for executing blocking calls in asyncio programs.</p> <p>The first is to use the asyncio.to_thread() function.</p> <p>This is in the high-level API and is intended for application developers.</p> <p>The asyncio.to_thread() function takes a function name to execute and any arguments.</p> <p>The function is executed in a separate thread. It returns a coroutine that can be awaited or scheduled as an independent task.</p> <p>For example:</p> <pre><code>...\n# execute a function in a separate thread\nawait asyncio.to_thread(task)\n</code></pre> <p>The task will not begin executing until the returned coroutine is given an opportunity to run in the event loop.</p> <p>The asyncio.to_thread() function creates a ThreadPoolExecutor behind the scenes to execute blocking calls.</p> <p>As such, the asyncio.to_thread() function is only appropriate for IO-bound tasks.</p> <p>An alternative approach is to use the loop.run_in_executor() function.</p> <p>This is in the low-level asyncio API and first requires access to the event loop, such as via the asyncio.get_running_loop() function.</p> <p>The loop.run_in_executor() function takes an executor and a function to execute.</p> <p>If None is provided for the executor, then the default executor is used, which is a ThreadPoolExecutor.</p> <p>The loop.run_in_executor() function returns an awaitable that can be awaited if needed. The task will begin executing immediately, so the returned awaitable does not need to be awaited or scheduled for the blocking call to start executing.</p> <p>For example:</p> <pre><code>...\n# get the event loop\nloop = asyncio.get_running_loop()\n# execute a function in a separate thread\nawait loop.run_in_executor(None, task)\n</code></pre> <p>Alternatively, an executor can be created and passed to the loop.run_in_executor() function, which will execute the asynchronous call in the executor.</p> <p>The caller must manage the executor in this case, shutting it down once the caller is finished with it.</p> <p>For example:</p> <pre><code>...\n# create a process pool\nwith ProcessPoolExecutor as exe:\n    # get the event loop\n    loop = asyncio.get_running_loop()\n    # execute a function in a separate thread\n    await loop.run_in_executor(exe, task)\n    # process pool is shutdown automatically...\n</code></pre> <p>These two approaches allow a blocking call to be executed as an asynchronous task in an asyncio program.</p> <p>Now that we know how to execute blocking calls in an asyncio program, let\u2019s look at some worked examples.</p>"},{"location":"asyncio/en/c15/#153-\u4f7f\u7528-to_thread-\u5728-asyncio-\u4e2d\u8fd0\u884c-io-\u5bc6\u96c6\u578b\u4efb\u52a1\u7684\u793a\u4f8b","title":"15.3 \u4f7f\u7528 to_thread() \u5728 Asyncio \u4e2d\u8fd0\u884c I/O \u5bc6\u96c6\u578b\u4efb\u52a1\u7684\u793a\u4f8b","text":"<p>15.3 Example of Running I/O-Bound Task in Asyncio with to_thread()</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u63a2\u7d22\u5982\u4f55\u4f7f\u7528 asyncio.to_thread() \u5728 asyncio \u7a0b\u5e8f\u4e2d\u6267\u884c\u963b\u585e IO \u7ed1\u5b9a\u8c03\u7528\u3002</p> <p>\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6765\u963b\u6b62\u8c03\u7528\u8005\u51e0\u79d2\u949f\u3002 \u7136\u540e\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 asyncio.to_thread() \u51fd\u6570\u5728 asyncio \u7684\u7ebf\u7a0b\u6c60\u4e2d\u5f02\u6b65\u6267\u884c\u6b64\u51fd\u6570\u3002</p> <p>\u8fd9\u5c06\u4f7f\u8c03\u7528\u8005\u80fd\u591f\u81ea\u7531\u5730\u7ee7\u7eed\u5176\u4ed6\u6d3b\u52a8\u3002</p> <p>\u4e0b\u9762\u5217\u51fa\u4e86\u5b8c\u6574\u7684\u793a\u4f8b\u3002</p> <pre><code># SuperFastPython.com\n# \u5728 asyncio \u4e2d\u8fd0\u884c\u963b\u585e io \u7ed1\u5b9a\u4efb\u52a1\u7684\u793a\u4f8b\nimport asyncio\nimport time\n\n# \u963b\u585e io \u7ed1\u5b9a\u4efb\u52a1\ndef blocking_task():\n    # \u62a5\u544a\u6d88\u606f\n    print('Task starting')\n    # \u963b\u585e\u6682\u505c2s\n    time.sleep(2)\n    # \u62a5\u544a\u6d88\u606f\n    print('Task done')\n\n# \u4e3b\u534f\u7a0b\nasync def main():\n    # \u62a5\u544a\u6d88\u606f\n    print('Main running the blocking task')\n    # \u4e3a\u963b\u585e\u4efb\u52a1\u521b\u5efa\u4e00\u4e2a\u534f\u7a0b\n    coro = asyncio.to_thread(blocking_task)\n    # \u5b89\u6392\u4efb\u52a1\n    task = asyncio.create_task(coro)\n    # \u62a5\u544a\u6d88\u606f\n    print('Main doing other things')\n    # \u5141\u8bb8\u8ba1\u5212\u4efb\u52a1\u542f\u52a8\n    await asyncio.sleep(0)\n    # \u7b49\u5f85\u4efb\u52a1\n    await task\n\n# \u8fd0\u884c\u5f02\u6b65\u7a0b\u5e8f\nasyncio.run(main())\n</code></pre> <p>\u8fd0\u884c\u8be5\u793a\u4f8b\u9996\u5148\u521b\u5efa main() \u534f\u7a0b\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a asyncio \u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u8fd0\u884c\u3002</p> <p>main() \u534f\u7a0b\u8fd0\u884c\u5e76\u62a5\u544a\u4e00\u6761\u6d88\u606f\u3002 \u7136\u540e\u5b83\u5411\u7ebf\u7a0b\u6c60\u53d1\u51fa\u5bf9\u963b\u585e\u51fd\u6570\u7684\u8c03\u7528\u3002 \u8fd9\u8fd4\u56de\u4e00\u4e2a\u534f\u7a0b\uff0c</p> <p>\u7136\u540e\u534f\u7a0b\u88ab\u5305\u88c5\u5728 Task \u4e2d\u5e76\u72ec\u7acb\u6267\u884c\u3002</p> <p>main() \u534f\u7a0b\u53ef\u4ee5\u81ea\u7531\u5730\u7ee7\u7eed\u5176\u4ed6\u6d3b\u52a8\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u4f1a\u4f11\u7720\u4e00\u4f1a\u513f\u4ee5\u5141\u8bb8\u8ba1\u5212\u4efb\u52a1\u5f00\u59cb\u6267\u884c\u3002 \u8fd9\u4f7f\u5f97\u76ee\u6807\u51fd\u6570\u53ef\u4ee5\u5728\u540e\u53f0\u53d1\u5e03\u5230ThreadPoolExecutor\u5e76\u5f00\u59cb\u8fd0\u884c\u3002</p> <p>\u7136\u540e main() \u534f\u7a0b\u6302\u8d77\u5e76\u7b49\u5f85\u4efb\u52a1\u5b8c\u6210\u3002</p> <p>\u963b\u585e\u51fd\u6570\u62a5\u544a\u4e00\u6761\u6d88\u606f\uff0c\u4f11\u77202\u79d2\uff0c\u7136\u540e\u62a5\u544a\u6700\u540e\u4e00\u6761\u6d88\u606f\u3002</p> <p>\u8fd9\u7a81\u51fa\u663e\u793a\u4e86\u6211\u4eec\u5982\u4f55\u5728\u5355\u72ec\u7684\u7ebf\u7a0b\u4e2d\u4ece asyncio \u7a0b\u5e8f\u5f02\u6b65\u6267\u884c\u963b\u585e IO \u7ed1\u5b9a\u4efb\u52a1\u3002</p> <pre><code>Main running the blocking task\nMain doing other things\nTask starting\nTask done\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173 to_thread() \u51fd\u6570\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>\u5982\u4f55\u4f7f\u7528 Asyncio to_thread()</li> </ul> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u63a2\u8ba8\u5982\u4f55\u5f00\u53d1\u548c\u4f7f\u7528\u5f02\u6b65\u8fed\u4ee3\u5668\u3002</p> <p>We can explore how to execute a blocking IO-bound call in an asyncio program using asyncio.to_thread().</p> <p>In this example, we will define a function that blocks the caller for a few seconds. We will then execute this function asynchronously in a thread pool from asyncio using the asyncio.to_thread() function.</p> <p>This will free the caller to continue with other activities.</p> <p>The complete example is listed below.</p> <pre><code># SuperFastPython.com\n# example of running a blocking io-bound task in asyncio\nimport asyncio\nimport time\n\n# a blocking io-bound task\ndef blocking_task():\n    # report a message\n    print('Task starting')\n    # block for a while\n    time.sleep(2)\n    # report a message\n    print('Task done')\n\n# main coroutine\nasync def main():\n    # report a message\n    print('Main running the blocking task')\n    # create a coroutine for  the blocking task\n    coro = asyncio.to_thread(blocking_task)\n    # schedule the task\n    task = asyncio.create_task(coro)\n    # report a message\n    print('Main doing other things')\n    # allow the scheduled task to start\n    await asyncio.sleep(0)\n    # await the task\n    await task\n\n# run the asyncio program\nasyncio.run(main())\n</code></pre> <p>Running the example first creates the main() coroutine and runs it as the entry point into the asyncio program.</p> <p>The main() coroutine runs and reports a message. It then issues a call to the blocking function call to the thread pool. This returns a coroutine,</p> <p>The coroutine is then wrapped in a Task and executed independently.</p> <p>The main() coroutine is free to continue with other activities. In this case, it sleeps for a moment to allow the scheduled task to start executing. This allows the target function to be issued to the ThreadPoolExecutor behind the scenes and start running.</p> <p>The main() coroutine then suspends and waits for the task to complete.</p> <p>The blocking function reports a message, sleeps for 2 seconds, then reports a final message.</p> <p>This highlights how we can execute a blocking IO-bound task in a separate thread asynchronously from an asyncio program.</p> <pre><code>Main running the blocking task\nMain doing other things\nTask starting\nTask done\n</code></pre> <p>You can learn more about the to_thread() function in the tutorial:</p> <ul> <li>How to Use Asyncio to_thread()</li> </ul> <p>Next, we will explore how to develop and use asynchronous iterators.</p>"},{"location":"asyncio/en/c16/","title":"16. \u5f02\u6b65\u8fed\u4ee3\u5668","text":"<p>16. Asynchronous Iterators</p> \u4e2d\u6587\u82f1\u6587 <p>\u8fed\u4ee3\u662fPython\u4e2d\u7684\u57fa\u672c\u64cd\u4f5c\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u8fed\u4ee3\u5217\u8868\u3001\u5b57\u7b26\u4e32\u548c\u5404\u79cd\u5176\u4ed6\u7ed3\u6784\u3002</p> <p>Asyncio \u5141\u8bb8\u6211\u4eec\u5f00\u53d1\u5f02\u6b65\u8fed\u4ee3\u5668\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49\u4e00\u4e2a\u5b9e\u73b0 __aiter__() \u548c __anext__() \u65b9\u6cd5\u7684\u5bf9\u8c61\u6765\u5728 asyncio \u7a0b\u5e8f\u4e2d\u521b\u5efa\u548c\u4f7f\u7528\u5f02\u6b65\u8fed\u4ee3\u5668\u3002</p> <p>\u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b\u3002</p> <p>Iteration is a basic operation in Python.</p> <p>We can iterate lists, strings, and all manner of other structures.</p> <p>Asyncio allows us to develop asynchronous iterators.</p> <p>We can create and use asynchronous iterators in asyncio programs by defining an object that implements the __aiter__() and __anext__() methods.</p> <p>Let\u2019s take a closer look.</p>"},{"location":"asyncio/en/c16/#161-\u4ec0\u4e48\u662f\u5f02\u6b65\u8fed\u4ee3\u5668","title":"16.1 \u4ec0\u4e48\u662f\u5f02\u6b65\u8fed\u4ee3\u5668","text":"<p>16.1 What Are Asynchronous Iterators</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f02\u6b65\u8fed\u4ee3\u5668\u662f\u4e00\u4e2a\u5b9e\u73b0 __aiter__() \u548c __anext__() \u65b9\u6cd5\u7684\u5bf9\u8c61\u3002</p> <p>\u5728\u6211\u4eec\u4ed4\u7ec6\u7814\u7a76\u5f02\u6b65\u8fed\u4ee3\u5668\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u56de\u987e\u4e00\u4e0b\u7ecf\u5178\u8fed\u4ee3\u5668\u3002</p> <p>An asynchronous iterator is an object that implements the __aiter__() and __anext__() methods.</p> <p>Before we take a close look at asynchronous iterators, let\u2019s review classical iterators.</p>"},{"location":"asyncio/en/c16/#1611-\u8fed\u4ee3\u5668","title":"16.1.1 \u8fed\u4ee3\u5668","text":"<p>16.1.1 Iterators</p> \u4e2d\u6587\u82f1\u6587 <p>\u8fed\u4ee3\u5668\u662f\u4e00\u4e2a\u5b9e\u73b0\u7279\u5b9a\u63a5\u53e3\u7684 Python \u5bf9\u8c61\u3002</p> <p>\u5177\u4f53\u6765\u8bf4\uff0c __iter__() \u65b9\u6cd5\u8fd4\u56de\u8fed\u4ee3\u5668\u7684\u5b9e\u4f8b\uff0c\u800c __next__() \u65b9\u6cd5\u6b65\u8fdb\u8fed\u4ee3\u5668\u4e00\u4e2a\u5468\u671f\u5e76\u8fd4\u56de \u4e00\u4e2a\u503c\u3002</p> <p>\u8fed\u4ee3\u5668\uff1a\u8868\u793a\u6570\u636e\u6d41\u7684\u5bf9\u8c61\u3002 \u91cd\u590d\u8c03\u7528\u8fed\u4ee3\u5668\u7684 __next__() \u65b9\u6cd5\uff08\u6216\u5c06\u5176\u4f20\u9012\u7ed9\u5185\u7f6e\u51fd\u6570 next()\uff09\u4f1a\u8fd4\u56de\u6d41\u4e2d\u7684\u8fde\u7eed\u9879\u3002 \u5f53\u6ca1\u6709\u66f4\u591a\u6570\u636e\u53ef\u7528\u65f6\uff0c\u4f1a\u5f15\u53d1 StopIteration \u5f02\u5e38\u3002</p> <p>\u2014 PYTHON GLOSSARY</p> <p>\u53ef\u4ee5\u4f7f\u7528 next() \u5185\u7f6e\u51fd\u6570\u6b65\u8fdb\u8fed\u4ee3\u5668\u6216\u4f7f\u7528 for \u5faa\u73af\u904d\u5386\u8fed\u4ee3\u5668\u3002</p> <p>\u8bb8\u591a Python \u5bf9\u8c61\u90fd\u662f\u53ef\u8fed\u4ee3\u7684\uff0c\u6700\u503c\u5f97\u6ce8\u610f\u7684\u662f\u5217\u8868\u7b49\u5bb9\u5668\u3002</p> <p>An iterator is a Python object that implements a specific interface.</p> <p>Specifically, the __iter__() method that returns an instance of the iterator and the __next__() method that steps the iterator one cycle and returns a value.</p> <p>iterator: An object representing a stream of data. Repeated calls to the iterator\u2019s __next__() method (or passing it to the built-in function next()) return successive items in the stream. When no more data are available a StopIteration exception is raised instead.</p> <p>\u2014 PYTHON GLOSSARY</p> <p>An iterator can be stepped using the next() built-in function or traversed using a for loop.</p> <p>Many Python objects are iterable, most notable are containers such as lists.</p>"},{"location":"asyncio/en/c16/#1612-\u5f02\u6b65\u8fed\u4ee3\u5668","title":"16.1.2 \u5f02\u6b65\u8fed\u4ee3\u5668","text":"<p>16.1.2 Asynchronous Iterators</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f02\u6b65\u8fed\u4ee3\u5668\u662f\u5b9e\u73b0\u7279\u5b9a\u63a5\u53e3\u7684 Python \u5bf9\u8c61\u3002</p> <p>\u5f02\u6b65\u8fed\u4ee3\u5668\uff1a\u5b9e\u73b0 __aiter__() \u548c __anext__() \u65b9\u6cd5\u7684\u5bf9\u8c61\u3002</p> <p>\u2014 PYTHON GLOSSARY</p> <p>\u5f02\u6b65\u8fed\u4ee3\u5668\u5fc5\u987b\u5b9e\u73b0 __aiter__() \u548c __anext__() \u65b9\u6cd5\u3002</p> <ul> <li>__aiter__() \u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de\u8fed\u4ee3\u5668\u7684\u5b9e\u4f8b\u3002</li> <li>__anext__() \u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u6b65\u8fdb\u8fed\u4ee3\u5668\u7684\u7b49\u5f85\u5bf9\u8c61\u3002</li> </ul> <p>\u5f02\u6b65\u8fed\u4ee3\u5668\u53ea\u80fd\u5728\u5f02\u6b65\u7a0b\u5e8f\u4e2d\u6b65\u8fdb\u6216\u904d\u5386\uff0c\u4f8b\u5982\u5728\u534f\u7a0b\u4e2d\u3002</p> <p>\u5f02\u6b65\u8fed\u4ee3\u5668\u5728 PEP 492 \u2013 \u5177\u6709\u5f02\u6b65\u548c\u7b49\u5f85\u8bed\u6cd5\u7684\u534f\u7a0b \u4e2d\u5f15\u5165\u3002</p> <p>\u5f02\u6b65\u8fed\u4ee3\u5668\u53ef\u4ee5\u4f7f\u7528 anext() \u5185\u7f6e\u51fd\u6570\u8fdb\u884c\u5355\u6b65\u6267\u884c\uff0c\u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6267\u884c\u8fed\u4ee3\u5668\u4e00\u6b65\u7684\u7b49\u5f85\u5bf9\u8c61\uff0c \u4f8b\u5982 \u5bf9 __anext__() \u65b9\u6cd5\u7684\u4e00\u6b21\u8c03\u7528\u3002</p> <p>\u53ef\u4ee5\u4f7f\u7528\u201casync for\u201d\u8868\u8fbe\u5f0f\u904d\u5386\u5f02\u6b65\u8fed\u4ee3\u5668\uff0c\u8be5\u8868\u8fbe\u5f0f\u5c06\u5728\u6bcf\u6b21\u8fed\u4ee3\u65f6\u81ea\u52a8\u8c03\u7528 anext() \u5e76\u7b49\u5f85\u8fd4\u56de\u7684\u53ef\u7b49\u5f85\u9879\u4ee5\u68c0\u7d22\u8fd4\u56de\u503c\u3002</p> <p>\u5f02\u6b65\u8fed\u4ee3\u5668\u53ef\u4ee5\u5728\u5176 iter \u5b9e\u73b0\u4e2d\u8c03\u7528\u5f02\u6b65\u4ee3\u7801\uff0c\u5f02\u6b65\u8fed\u4ee3\u5668\u53ef\u4ee5\u5728\u5176 anext \u65b9\u6cd5\u4e2d\u8c03\u7528\u5f02\u6b65\u4ee3\u7801\u3002</p> <p>\u2014 PEP 492 \u2013 COROUTINES WITH ASYNC AND AWAIT SYNTAX</p> <p>An asynchronous iterator is a Python object that implements a specific interface.</p> <p>asynchronous iterator: An object that implements the __aiter__() and __anext__() methods.</p> <p>\u2014 PYTHON GLOSSARY</p> <p>An asynchronous iterator must implement the __aiter__() and __anext__() methods.</p> <ul> <li>The __aiter__() method must return an instance of the iterator.</li> <li>The __anext__() method must return an awaitable that steps the iterator.</li> </ul> <p>An asynchronous iterator may only be stepped or traversed in an asyncio program, such as within a coroutine.</p> <p>Asynchronous iterators were introduced in PEP 492 \u2013 Coroutines with async and await syntax.</p> <p>An asynchronous iterator can be stepped using the anext() built-in function that returns an awaitable that executes one step of the iterator, e.g. one call to the __anext__() method.</p> <p>An asynchronous iterator can be traversed using the \u201casync for\u201d expression that will automatically call anext() each iteration and await the returned awaitable in order to retrieve the return value.</p> <p>An asynchronous iterable is able to call asynchronous code in its iter implementation, and asynchronous iterator can call asynchronous code in its next method.</p> <p>\u2014 PEP 492 \u2013 COROUTINES WITH ASYNC AND AWAIT SYNTAX</p>"},{"location":"asyncio/en/c16/#162-\u4ec0\u4e48\u662fasync-for\u5faa\u73af","title":"16.2 \u4ec0\u4e48\u662f\u201casync for\u201d\u5faa\u73af\uff1f","text":"<p>16.2 What is the \u201casync for\u201d loop?</p> \u4e2d\u6587\u82f1\u6587 <p>async for \u8868\u8fbe\u5f0f\u7528\u4e8e\u904d\u5386\u5f02\u6b65\u8fed\u4ee3\u5668\u3002</p> <p>\u5b83\u662f\u4e00\u4e2a\u5f02\u6b65for\u5faa\u73af\u8bed\u53e5\u3002</p> <p>\u5f02\u6b65\u8fed\u4ee3\u5668\u662f\u4ea7\u751f\u53ef\u7b49\u5f85\u5bf9\u8c61\u7684\u8fed\u4ee3\u5668\u3002</p> <p>\u60a8\u53ef\u80fd\u8fd8\u8bb0\u5f97\uff0cawaitable \u662f\u4e00\u4e2a\u53ef\u4ee5\u7b49\u5f85\u7684\u5bf9\u8c61\uff0c\u4f8b\u5982\u534f\u7a0b\u6216\u4efb\u52a1\u3002</p> <p>awaitable: \u53ef\u5728await \u8868\u8fbe\u5f0f\u4e2d\u4f7f\u7528\u7684\u5bf9\u8c61\u3002</p> <p>\u2014 PYTHON GLOSSARY</p> <p>\u5f02\u6b65\u751f\u6210\u5668\u5c06\u81ea\u52a8\u5b9e\u73b0\u5f02\u6b65\u8fed\u4ee3\u5668\u65b9\u6cd5\uff0c\u5141\u8bb8\u5b83\u50cf\u5f02\u6b65\u8fed\u4ee3\u5668\u4e00\u6837\u8fdb\u884c\u8fed\u4ee3\u3002</p> <p>wait for \u8868\u8fbe\u5f0f\u5141\u8bb8\u8c03\u7528\u8005\u904d\u5386\u53ef\u7b49\u5f85\u9879\u7684\u5f02\u6b65\u8fed\u4ee3\u5668\u5e76\u4ece\u6bcf\u4e2a\u8fed\u4ee3\u5668\u4e2d\u68c0\u7d22\u7ed3\u679c\u3002</p> <p>\u8fd9\u4e0e\u904d\u5386\u53ef\u7b49\u5f85\u5bf9\u8c61\u7684\u96c6\u5408\u6216\u5217\u8868\uff08\u4f8b\u5982\u534f\u7a0b\u5bf9\u8c61\uff09\u4e0d\u540c\uff0c\u76f8\u53cd\uff0c\u5fc5\u987b\u4f7f\u7528\u9884\u671f\u7684\u5f02\u6b65\u8fed\u4ee3\u5668\u65b9\u6cd5\u63d0\u4f9b\u8fd4\u56de\u7684\u53ef\u7b49\u5f85\u5bf9\u8c61\u3002</p> <p>\u5728\u5185\u90e8\uff0casync for \u5faa\u73af\u5c06\u81ea\u52a8\u89e3\u6790\u6216\u7b49\u5f85\u6bcf\u4e2a\u53ef\u7b49\u5f85\u7684\u3001\u6839\u636e\u9700\u8981\u8c03\u5ea6\u534f\u7a0b\u3002</p> <p>\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a for \u5faa\u73af\uff0c\u6240\u4ee5\u5b83\u5047\u8bbe\uff08\u5c3d\u7ba1\u4e0d\u8981\u6c42\uff09\u6bcf\u4e2a\u88ab\u904d\u5386\u7684\u53ef\u7b49\u5f85\u5bf9\u8c61\u90fd\u4f1a\u4ea7\u751f\u4e00\u4e2a\u8fd4\u56de\u503c\u3002</p> <p>async for \u5faa\u73af\u5fc5\u987b\u5728\u534f\u7a0b\u5185\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83\u5728\u5185\u90e8\u5c06\u4f7f\u7528\u53ea\u80fd\u5728\u534f\u7a0b\u5185\u4f7f\u7528\u7684await \u8868\u8fbe\u5f0f\u3002</p> <p>async for \u8868\u8fbe\u5f0f\u53ef\u7528\u4e8e\u904d\u5386\u534f\u7a0b\u5185\u7684\u5f02\u6b65\u8fed\u4ee3\u5668\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u904d\u5386\u5f02\u6b65\u8fed\u4ee3\u5668\nasync for item in async_iterator:\n    print(item)\n</code></pre> <p>\u8fd9\u4e0d\u4f1a\u5e76\u884c\u6267\u884c for \u5faa\u73af\u3002 asyncio \u65e0\u6cd5\u5728 Python \u7ebf\u7a0b\u4e2d\u540c\u65f6\u6267\u884c\u591a\u4e2a\u534f\u7a0b\u3002</p> <p>\u76f8\u53cd\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f02\u6b65 for \u5faa\u73af\u3002</p> <p>\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u6267\u884c for \u5faa\u73af\u7684\u534f\u7a0b\u5c06\u6302\u8d77\u5e76\u5728\u5185\u90e8\u7b49\u5f85\u6bcf\u4e2a\u53ef\u7b49\u5f85\u9879\u3002</p> <p>\u5728\u5e55\u540e\uff0c\u8fd9\u53ef\u80fd\u9700\u8981\u5b89\u6392\u548c\u7b49\u5f85\u534f\u7a0b\uff0c\u6216\u8005\u7b49\u5f85\u4efb\u52a1\u3002</p> <p>\u6211\u4eec\u8fd8\u53ef\u4ee5\u5728\u5217\u8868\u7406\u89e3\u4e2d\u4f7f\u7528 async for \u8868\u8fbe\u5f0f\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u5efa\u7acb\u7ed3\u679c\u5217\u8868\nresults = [item async for item async_iterator]\n</code></pre> <p>\u8fd9\u5c06\u4ece\u5f02\u6b65\u8fed\u4ee3\u5668\u6784\u9020\u8fd4\u56de\u503c\u5217\u8868\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u770b\u770b\u5982\u4f55\u5b9a\u4e49\u3001\u521b\u5efa\u548c\u4f7f\u7528\u5f02\u6b65\u8fed\u4ee3\u5668\u3002</p> <p>The async for expression is used to traverse an asynchronous iterator.</p> <p>It is an asynchronous for-loop statement.</p> <p>An asynchronous iterator is an iterator that yields awaitables.</p> <p>You may recall that an awaitable is an object that can be waited for, such as a coroutine or a task.</p> <p>awaitable: An object that can be used in an await expression.</p> <p>\u2014 PYTHON GLOSSARY</p> <p>An asynchronous generator will automatically implement the asynchronous iterator methods, allowing it to be iterated like an asynchronous iterator.</p> <p>The await for expression allows the caller to traverse an asynchronous iterator of awaitables and retrieve the result from each.</p> <p>This is not the same as traversing a collection or list of awaitables (e.g. coroutine objects), instead, the awaitables returned must be provided using the expected asynchronous iterator methods.</p> <p>Internally, the async for loop will automatically resolve or await each awaitable, scheduling coroutines as needed.</p> <p>Because it is a for-loop, it assumes, although does not require, that each awaitable being traversed yields a return value.</p> <p>The async for loop must be used within a coroutine because internally it will use the await expression, which can only be used within coroutines.</p> <p>The async for expression can be used to traverse an asynchronous iterator within a coroutine.</p> <p>For example:</p> <pre><code>...\n# traverse an asynchronous iterator\nasync for item in async_iterator:\n    print(item)\n</code></pre> <p>This does not execute the for-loop in parallel. The asyncio is unable to execute more than one coroutine at a time within a Python thread.</p> <p>Instead, this is an asynchronous for-loop.</p> <p>The difference is that the coroutine that executes the for loop will suspend and internally await for each awaitable.</p> <p>Behind the scenes, this may require coroutines to be scheduled and awaited, or tasks to be awaited.</p> <p>We may also use the async for expression in a list comprehension.</p> <p>For example:</p> <pre><code>...\n# build a list of results\nresults = [item async for item async_iterator]\n</code></pre> <p>This would construct a list of return values from the asynchronous iterator.</p> <p>Next, let\u2019s look at how to define, create and use asynchronous iterators.</p>"},{"location":"asyncio/en/c16/#163-\u5982\u4f55\u4f7f\u7528\u5f02\u6b65\u8fed\u4ee3\u5668","title":"16.3 \u5982\u4f55\u4f7f\u7528\u5f02\u6b65\u8fed\u4ee3\u5668","text":"<p>16.3 How to Use Asynchronous Iterators</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u4ed4\u7ec6\u7814\u7a76\u5982\u4f55\u5728 asyncio \u7a0b\u5e8f\u4e2d\u5b9a\u4e49\u3001\u521b\u5efa\u3001\u5355\u6b65\u6267\u884c\u548c\u904d\u5386\u5f02\u6b65\u8fed\u4ee3\u5668\u3002</p> <p>\u8ba9\u6211\u4eec\u4ece\u5982\u4f55\u5b9a\u4e49\u5f02\u6b65\u8fed\u4ee3\u5668\u5f00\u59cb\u3002</p> <p>In this section, we will take a close look at how to define, create, step, and traverse an asynchronous iterator in asyncio programs.</p> <p>Let\u2019s start with how to define an asynchronous iterator.</p>"},{"location":"asyncio/en/c16/#1631-\u5b9a\u4e49\u5f02\u6b65\u8fed\u4ee3\u5668","title":"16.3.1 \u5b9a\u4e49\u5f02\u6b65\u8fed\u4ee3\u5668","text":"<p>16.3.1 Define an Asynchronous Iterator</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49\u4e00\u4e2a\u5b9e\u73b0 __aiter__() \u548c __anext__() \u65b9\u6cd5\u7684\u7c7b\u6765\u5b9a\u4e49\u5f02\u6b65\u8fed\u4ee3\u5668\u3002</p> <p>\u8fd9\u4e9b\u65b9\u6cd5\u6309\u7167\u6b63\u5e38\u65b9\u5f0f\u5728 Python \u5bf9\u8c61\u4e0a\u5b9a\u4e49\u3002</p> <p>\u91cd\u8981\u7684\u662f\uff0c\u7531\u4e8e __anext__() \u51fd\u6570\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u7b49\u5f85\u5bf9\u8c61\uff0c\u56e0\u6b64\u5fc5\u987b\u4f7f\u7528 \u201casync def\u201d \u8868\u8fbe\u5f0f\u6765\u5b9a\u4e49\u5b83\u3002</p> <p>object.__anext__(self)\uff1a\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u53ef\u7b49\u5f85\u7684\u7ed3\u679c\uff0c\u4ece\u800c\u4ea7\u751f\u8fed\u4ee3\u5668\u7684\u4e0b\u4e00\u4e2a\u503c\u3002 \u8fed\u4ee3\u7ed3\u675f\u65f6\u5e94\u5f15\u53d1 StopAsyncIteration \u9519\u8bef\u3002</p> <p>\u2014 ASYNCHRONOUS ITERATORS</p> <p>\u8fed\u4ee3\u5b8c\u6210\u540e\uff0c __anext__() \u65b9\u6cd5\u5fc5\u987b\u5f15\u53d1 StopAsyncIteration \u5f02\u5e38\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code># \u5b9a\u4e49\u4e00\u4e2a\u5f02\u6b65\u8fed\u4ee3\u5668\nclass AsyncIterator():\n    # \u6784\u9020\u51fd\u6570\uff0c\u5b9a\u4e49\u4e00\u4e9b\u72b6\u6001\n    def __init__(self):\n        self.counter = 0\n\n    # \u521b\u5efa\u8fed\u4ee3\u5668\u7684\u5b9e\u4f8b\n    def __aiter__(self):\n        return self\n\n    # \u8fd4\u56de\u4e0b\u4e00\u4e2a\u7b49\u5f85\u7684\n    async def __anext__(self):\n        # \u68c0\u67e5\u6ca1\u6709\u5176\u4ed6\u9879\u76ee\n        if self.counter &gt;= 10:\n            raise StopAsyncIteration\n        # \u589e\u52a0\u8ba1\u6570\u5668\n        self.counter += 1\n        # \u8fd4\u56de\u8ba1\u6570\u5668\u503c\n        return self.counter\n</code></pre> <p>\u56e0\u4e3a\u5f02\u6b65\u8fed\u4ee3\u5668\u662f\u4e00\u4e2a\u534f\u7a0b\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8fed\u4ee3\u5668\u90fd\u8fd4\u56de\u4e00\u4e2a\u5728 asyncio \u4e8b\u4ef6\u5faa\u73af\u4e2d\u8c03\u5ea6\u548c\u6267\u884c\u7684\u7b49\u5f85\u5bf9\u8c61\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u8fed\u4ee3\u5668\u4f53\u5185\u6267\u884c\u548c\u7b49\u5f85\u7b49\u5f85\u5bf9\u8c61\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u8fd4\u56de\u4e0b\u4e00\u4e2a\u7b49\u5f85\u7684\nasync def __anext__(self):\n    # \u68c0\u67e5\u6ca1\u6709\u5176\u4ed6\u9879\u76ee\n    if self.counter &gt;= 10:\n        raise StopAsyncIteration\n    # \u589e\u52a0\u8ba1\u6570\u5668\n    self.counter += 1\n    # \u6a21\u62df\u5de5\u4f5c\n    await asyncio.sleep(1)\n    # \u8fd4\u56de\u8ba1\u6570\u5668\u503c\n    return self.counter\n</code></pre> <p>\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528\u5f02\u6b65\u8fed\u4ee3\u5668\u3002</p> <p>We can define an asynchronous iterator by defining a class that implements the __aiter__() and __anext__() methods.</p> <p>These methods are defined on a Python object as per normal.</p> <p>Importantly, because the __anext__() function must return an awaitable, it must be defined using the \u201casync def\u201d expression.</p> <p>object.__anext__(self): Must return an awaitable resulting in a next value of the iterator. Should raise a StopAsyncIteration error when the iteration is over.</p> <p>\u2014 ASYNCHRONOUS ITERATORS</p> <p>When the iteration is complete, the __anext__() method must raise a StopAsyncIteration exception.</p> <p>For example:</p> <pre><code># define an asynchronous iterator\nclass AsyncIterator():\n    # constructor, define some state\n    def __init__(self):\n        self.counter = 0\n\n    # create an instance of the iterator\n    def __aiter__(self):\n        return self\n\n    # return the next awaitable\n    async def __anext__(self):\n        # check for no further items\n        if self.counter &gt;= 10:\n            raise StopAsyncIteration\n        # increment the counter\n        self.counter += 1\n        # return the counter value\n        return self.counter\n</code></pre> <p>Because the asynchronous iterator is a coroutine and each iterator returns an awaitable that is scheduled and executed in the asyncio event loop, we can execute and await awaitables within the body of the iterator.</p> <p>For example:</p> <pre><code>...\n# return the next awaitable\nasync def __anext__(self):\n    # check for no further items\n    if self.counter &gt;= 10:\n        raise StopAsyncIteration\n    # increment the counter\n    self.counter += 1\n    # simulate work\n    await asyncio.sleep(1)\n    # return the counter value\n    return self.counter\n</code></pre> <p>Next, let\u2019s look at how we might use an asynchronous iterator.</p>"},{"location":"asyncio/en/c16/#1632-\u521b\u5efa\u5f02\u6b65\u8fed\u4ee3\u5668","title":"16.3.2 \u521b\u5efa\u5f02\u6b65\u8fed\u4ee3\u5668","text":"<p>16.3.2 Create Asynchronous Iterator</p> \u4e2d\u6587\u82f1\u6587 <p>\u8981\u4f7f\u7528\u5f02\u6b65\u8fed\u4ee3\u5668\uff0c\u6211\u4eec\u5fc5\u987b\u521b\u5efa\u8fed\u4ee3\u5668\u3002</p> <p>\u8fd9\u6d89\u53ca\u5230\u6309\u7167\u6b63\u5e38\u65b9\u5f0f\u521b\u5efa Python \u5bf9\u8c61\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u8fed\u4ee3\u5668\nit = AsyncIterator()\n</code></pre> <p>\u8fd9\u5c06\u8fd4\u56de\u4e00\u4e2a\u201c\u5f02\u6b65\u8fed\u4ee3\u5668\u201d\uff0c\u5b83\u662f\u201c\u5f02\u6b65\u8fed\u4ee3\u5668\u201d\u7684\u5b9e\u4f8b\u3002</p> <p>To use an asynchronous iterator we must create the iterator.</p> <p>This involves creating the Python object as per normal.</p> <p>For example:</p> <pre><code>...\n# create the iterator\nit = AsyncIterator()\n</code></pre> <p>This returns an \u201casynchronous iterable\u201c, which is an instance of an \u201casynchronous iterator\u201c.</p>"},{"location":"asyncio/en/c16/#1633-\u5355\u6b65\u6267\u884c\u5f02\u6b65\u8fed\u4ee3\u5668","title":"16.3.3 \u5355\u6b65\u6267\u884c\u5f02\u6b65\u8fed\u4ee3\u5668","text":"<p>Step an Asynchronous Iterator</p> \u4e2d\u6587\u82f1\u6587 <p>\u53ef\u4ee5\u4f7f\u7528 anext() \u5185\u7f6e\u51fd\u6570\u904d\u5386\u8fed\u4ee3\u5668\u7684\u4e00\u6b65\uff0c\u5c31\u50cf\u4f7f\u7528 next() \u51fd\u6570\u7684\u7ecf\u5178\u8fed\u4ee3\u5668\u4e00\u6837\u3002</p> <p>\u7ed3\u679c\u662f\u4e00\u4e2a\u53ef\u7b49\u5f85\u5bf9\u8c61\u7684\u7ed3\u679c\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u83b7\u53d6\u8fed\u4ee3\u5668\u4e00\u6b65\u7684\u7b49\u5f85\nawaitable = anext(it)\n# \u6267\u884c\u8fed\u4ee3\u5668\u7684\u4e00\u6b65\u5e76\u5f97\u5230\u7ed3\u679c\nresult = await awaitable\n</code></pre> <p>\u8fd9\u53ef\u4ee5\u4e00\u6b65\u5b9e\u73b0\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u5355\u6b65\u6267\u884c\u5f02\u6b65\u8fed\u4ee3\u5668\nresult = await anext(it)\n</code></pre> <p>One step of the iterator can be traversed using the anext() built-in function, just like a classical iterator using the next() function.</p> <p>The result is an awaitable that is awaited.</p> <p>For example:</p> <pre><code>...\n# get an awaitable for one step of the iterator\nawaitable = anext(it)\n# execute the one step of the iterator and get the result\nresult = await awaitable\n</code></pre> <p>This can be achieved in one step.</p> <p>For example:</p> <pre><code>...\n# step the async iterator\nresult = await anext(it)\n</code></pre>"},{"location":"asyncio/en/c16/#1634-\u904d\u5386\u5f02\u6b65\u8fed\u4ee3\u5668","title":"16.3.4 \u904d\u5386\u5f02\u6b65\u8fed\u4ee3\u5668","text":"<p>Traverse an Asynchronous Iterator</p> \u4e2d\u6587\u82f1\u6587 <p>\u8fd8\u53ef\u4ee5\u4f7f\u7528\u201casync for\u201d\u8868\u8fbe\u5f0f\u5728\u5faa\u73af\u4e2d\u904d\u5386\u5f02\u6b65\u8fed\u4ee3\u5668\uff0c\u8be5\u8868\u8fbe\u5f0f\u5c06\u81ea\u52a8\u7b49\u5f85\u5faa\u73af\u7684\u6bcf\u6b21\u8fed\u4ee3\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u904d\u5386\u5f02\u6b65\u8fed\u4ee3\u5668\nasync for result in AsyncIterator():\n    print(result)\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173\u201casync for\u201d\u8868\u8fbe\u5f0f\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>Asyncio \u5f02\u6b65 for \u5faa\u73af</li> </ul> <p>\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5f02\u6b65\u5217\u8868\u7406\u89e3\u548c\u201casync for\u201d\u8868\u8fbe\u5f0f\u6765\u6536\u96c6\u8fed\u4ee3\u5668\u7684\u7ed3\u679c\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u4f7f\u7528\u5f02\u6b65\u8fed\u4ee3\u5668\u7684\u5f02\u6b65\u5217\u8868\u63a8\u5bfc\u5f0f\nresults = [item async for item in AsyncIterator()]\n</code></pre> <p>The asynchronous iterator can also be traversed in a loop using the \u201casync for\u201d expression that will await each iteration of the loop automatically.</p> <p>For example:</p> <pre><code>...\n# traverse an asynchronous iterator\nasync for result in AsyncIterator():\n    print(result)\n</code></pre> <p>You can learn more about the \u201casync for\u201d expression in the tutorial:</p> <ul> <li>Asyncio async for loop</li> </ul> <p>We may also use an asynchronous list comprehension with the \u201casync for\u201d expression to collect the results of the iterator.</p> <p>For example:</p> <pre><code>...\n# async list comprehension with async iterator\nresults = [item async for item in AsyncIterator()]\n</code></pre>"},{"location":"asyncio/en/c16/#164-\u5f02\u6b65\u8fed\u4ee3\u5668\u7684\u793a\u4f8b","title":"16.4 \u5f02\u6b65\u8fed\u4ee3\u5668\u7684\u793a\u4f8b","text":"<p>16.4 Example of an Asynchronous Iterator</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u63a2\u7d22\u5982\u4f55\u4f7f\u7528\u201casync for\u201d\u8868\u8fbe\u5f0f\u6765\u904d\u5386\u5f02\u6b65\u8fed\u4ee3\u5668\u3002</p> <p>\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u66f4\u65b0\u524d\u9762\u7684\u793a\u4f8b\uff0c\u4ee5\u4f7f\u7528 \u201casync for\u201d \u5faa\u73af\u904d\u5386\u8fed\u4ee3\u5668\u76f4\u81f3\u5b8c\u6210\u3002</p> <p>\u6b64\u5faa\u73af\u5c06\u81ea\u52a8\u7b49\u5f85\u4ece\u8fed\u4ee3\u5668\u8fd4\u56de\u7684\u6bcf\u4e2a\u7b49\u5f85\uff0c\u68c0\u7d22\u8fd4\u56de\u7684\u503c\uff0c\u5e76\u4f7f\u5176\u5728\u5faa\u73af\u4f53\u5185\u53ef\u7528\uff0c\u4ee5\u4fbf\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u53ef\u4ee5\u62a5\u544a\u5b83\u3002</p> <p>\u8fd9\u53ef\u80fd\u662f\u5f02\u6b65\u8fed\u4ee3\u5668\u6700\u5e38\u89c1\u7684\u4f7f\u7528\u6a21\u5f0f\u3002</p> <p>\u4e0b\u9762\u5217\u51fa\u4e86\u5b8c\u6574\u7684\u793a\u4f8b\u3002</p> <pre><code># SuperFastPython.com\n# \u5177\u6709\u5f02\u6b65 for \u5faa\u73af\u7684\u5f02\u6b65\u8fed\u4ee3\u5668\u7684\u793a\u4f8b\nimport asyncio\n\n# \u5b9a\u4e49\u4e00\u4e2a\u5f02\u6b65\u8fed\u4ee3\u5668\nclass AsyncIterator():\n    # \u6784\u9020\u51fd\u6570\uff0c\u5b9a\u4e49\u4e00\u4e9b\u72b6\u6001\n    def __init__(self):\n        self.counter = 0\n\n    # \u521b\u5efa\u8fed\u4ee3\u5668\u7684\u5b9e\u4f8b\n    def __aiter__(self):\n        return self\n\n    # \u8fd4\u56de\u4e0b\u4e00\u4e2a\u53ef\u7b49\u5f85\u5bf9\u8c61\n    async def __anext__(self):\n        # \u68c0\u67e5\u6ca1\u6709\u5176\u4ed6\u9879\u76ee\n        if self.counter &gt;= 10:\n            raise StopAsyncIteration\n        # \u589e\u52a0\u8ba1\u6570\u5668\n        self.counter += 1\n        # \u6a21\u62df\u5de5\u4f5c\n        await asyncio.sleep(1)\n        # \u8fd4\u56de\u8ba1\u6570\u5668\u503c\n        return self.counter\n\n# \u4e3b\u534f\u7a0b\nasync def main():\n    # \u4f7f\u7528 async for \u5faa\u73af\u904d\u5386\u5f02\u6b65\u8fed\u4ee3\u5668\n    async for item in AsyncIterator():\n        print(item)\n\n# \u6267\u884c\u5f02\u6b65\u7a0b\u5e8f\nasyncio.run(main())\n</code></pre> <p>\u8fd0\u884c\u8be5\u793a\u4f8b\u9996\u5148\u521b\u5efa main() \u534f\u7a0b\uff0c\u5e76\u5c06\u5176\u7528\u4f5c asyncio \u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u3002</p> <p>main() \u534f\u7a0b\u8fd0\u884c\u5e76\u542f\u52a8 for \u5faa\u73af\u3002</p> <p>\u521b\u5efa\u5f02\u6b65\u8fed\u4ee3\u5668\u7684\u5b9e\u4f8b\uff0c\u5faa\u73af\u4f7f\u7528 anext() \u51fd\u6570\u81ea\u52a8\u6b65\u8fdb\u5b83\u4ee5\u8fd4\u56de\u53ef\u7b49\u5f85\u7684\u5bf9\u8c61\u3002 \u7136\u540e\uff0c\u5faa\u73af\u7b49\u5f85\u53ef\u7b49\u5f85\u5bf9\u8c61\u5e76\u68c0\u7d22\u4e00\u4e2a\u503c\uff0c\u8be5\u503c\u53ef\u4f9b\u62a5\u544a\u8be5\u503c\u7684\u5faa\u73af\u4f53\u4f7f\u7528\u3002</p> <p>\u7136\u540e\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u6302\u8d77 main() \u534f\u7a0b\uff0c\u6267\u884c\u8fed\u4ee3\u5668\u7684\u4e00\u4e2a\u6b65\u9aa4\u5e76\u6302\u8d77\uff0c\u7136\u540e\u6062\u590d main() \u534f\u7a0b\uff0c\u76f4\u5230\u8fed\u4ee3\u5668\u8017\u5c3d\u3002</p> <p>\u4e00\u65e6\u8fed\u4ee3\u5668\u7684\u5185\u90e8\u8ba1\u6570\u5668\u8fbe\u5230 10\uff0c\u5c31\u4f1a\u5f15\u53d1 StopAsyncIteration\u3002 \u8fd9\u4e0d\u4f1a\u7ec8\u6b62\u7a0b\u5e8f\u3002 \u76f8\u53cd\uff0c\u5b83\u662f\u7531 \u201casync for\u201d \u8868\u8fbe\u5f0f\u671f\u671b\u548c\u5904\u7406\u7684\uff0c\u5e76\u6253\u7834\u5faa\u73af\u3002</p> <p>\u8fd9\u7a81\u51fa\u663e\u793a\u4e86\u5982\u4f55\u4f7f\u7528 async for \u8868\u8fbe\u5f0f\u904d\u5386\u5f02\u6b65\u8fed\u4ee3\u5668\u3002</p> <pre><code>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173\u5f02\u6b65\u8fed\u4ee3\u5668\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>Python \u4e2d\u7684\u5f02\u6b65\u8fed\u4ee3\u5668</li> </ul> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u63a2\u7d22\u5f02\u6b65\u751f\u6210\u5668\u3002</p> <p>We can explore how to traverse an asynchronous iterator using the \u201casync for\u201d expression.</p> <p>In this example, we will update the previous example to traverse the iterator to completion using an \u201casync for\u201d loop.</p> <p>This loop will automatically await each awaitable returned from the iterator, retrieve the returned value, and make it available within the loop body so that in this case it can be reported.</p> <p>This is perhaps the most common usage pattern for asynchronous iterators.</p> <p>The complete example is listed below.</p> <pre><code># SuperFastPython.com\n# example of an asynchronous iterator with async for loop\nimport asyncio\n\n# define an asynchronous iterator\nclass AsyncIterator():\n    # constructor, define some state\n    def __init__(self):\n        self.counter = 0\n\n    # create an instance of the iterator\n    def __aiter__(self):\n        return self\n\n    # return the next awaitable\n    async def __anext__(self):\n        # check for no further items\n        if self.counter &gt;= 10:\n            raise StopAsyncIteration\n        # increment the counter\n        self.counter += 1\n        # simulate work\n        await asyncio.sleep(1)\n        # return the counter value\n        return self.counter\n\n# main coroutine\nasync def main():\n    # loop over async iterator with async for loop\n    async for item in AsyncIterator():\n        print(item)\n\n# execute the asyncio program\nasyncio.run(main())\n</code></pre> <p>Running the example first creates the main() coroutine and uses it as the entry point into the asyncio program.</p> <p>The main() coroutine runs and starts the for loop.</p> <p>An instance of the asynchronous iterator is created and the loop automatically steps it using the anext() function to return an awaitable. The loop then awaits the awaitable and retrieves a value which is made available to the body of the loop where it is reported.</p> <p>This process is then repeated, suspending the main() coroutine, executing a step of the iterator and suspending, and resuming the main() coroutine until the iterator is exhausted.</p> <p>Once the internal counter of the iterator reaches 10, a StopAsyncIteration is raised. This does not terminate the program. Instead, it is expected and handled by the \u201casync for\u201d expression and breaks the loop.</p> <p>This highlights how an asynchronous iterator can be traversed using an async for expression.</p> <pre><code>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</code></pre> <p>You can learn more about async iterators in the tutorial:</p> <ul> <li>Asynchronous Iterators in Python</li> </ul> <p>Next, we will explore asynchronous generators.</p>"},{"location":"asyncio/en/c17/","title":"17. \u5f02\u6b65\u751f\u6210\u5668","text":"<p>17. Asynchronous Generators</p> \u4e2d\u6587\u82f1\u6587 <p>\u751f\u6210\u5668\u662f Python \u7684\u57fa\u672c\u7ec4\u6210\u90e8\u5206\u3002</p> <p>\u751f\u6210\u5668\u662f\u4e00\u79cd\u81f3\u5c11\u5177\u6709\u4e00\u4e2a\u201cyield\u201d\u8868\u8fbe\u5f0f\u7684\u51fd\u6570\u3002 \u5b83\u4eec\u662f\u53ef\u4ee5\u6682\u505c\u548c\u6062\u590d\u7684\u51fd\u6570\uff0c\u5c31\u50cf\u534f\u7a0b\u4e00\u6837\u3002</p> <p>\u4e8b\u5b9e\u4e0a\uff0cPython \u534f\u7a0b\u662f Python \u751f\u6210\u5668\u7684\u6269\u5c55\u3002</p> <p>Asyncio \u5141\u8bb8\u6211\u4eec\u5f00\u53d1\u5f02\u6b65\u751f\u6210\u5668\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49\u4f7f\u7528\u201cyield\u201d\u8868\u8fbe\u5f0f\u7684\u534f\u7a0b\u6765\u521b\u5efa\u5f02\u6b65\u751f\u6210\u5668\u3002</p> <p>\u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b\u3002</p> <p>Generators are a fundamental part of Python.</p> <p>A generator is a function that has at least one \u201cyield\u201d expression. They are functions that can be suspended and resumed, just like coroutines.</p> <p>In fact, Python coroutines are an extension of Python generators.</p> <p>Asyncio allows us to develop asynchronous generators.</p> <p>We can create an asynchronous generator by defining a coroutine that makes use of the \u201cyield\u201d expression.</p> <p>Let\u2019s take a closer look.</p>"},{"location":"asyncio/en/c17/#171-\u4ec0\u4e48\u662f\u5f02\u6b65\u751f\u6210\u5668","title":"17.1 \u4ec0\u4e48\u662f\u5f02\u6b65\u751f\u6210\u5668","text":"<p>17.1 What Are Asynchronous Generators</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f02\u6b65\u751f\u6210\u5668\u662f\u4f7f\u7528yield \u8868\u8fbe\u5f0f\u7684\u534f\u7a0b\u3002</p> <p>\u5728\u6211\u4eec\u6df1\u5165\u4e86\u89e3\u5f02\u6b65\u751f\u6210\u5668\u7684\u7ec6\u8282\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u9996\u5148\u56de\u987e\u4e00\u4e0b\u7ecf\u5178\u7684 Python \u751f\u6210\u5668\u3002</p> <p>An asynchronous generator is a coroutine that uses the yield expression.</p> <p>Before we dive into the details of asynchronous generators, let\u2019s first review classical Python generators.</p>"},{"location":"asyncio/en/c17/#1711-\u751f\u6210\u5668","title":"17.1.1 \u751f\u6210\u5668","text":"<p>17.1.1 Generators</p> \u4e2d\u6587\u82f1\u6587 <p>\u751f\u6210\u5668\u662f\u4e00\u4e2aPython\u51fd\u6570\uff0c\u5b83\u901a\u8fc7yield\u8868\u8fbe\u5f0f\u8fd4\u56de\u4e00\u4e2a\u503c\u3002</p> <p>\u4f8b\u5982:</p> <pre><code># \u5b9a\u4e49\u751f\u6210\u5668\ndef generator():\n    for i in range(10):\n        yield i\n</code></pre> <p>\u751f\u6210\u5668\u6267\u884c\u5230yield\u8868\u8fbe\u5f0f\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a\u503c\u3002 \u8fd9\u4f1a\u5728\u6b64\u65f6\u6682\u505c\u751f\u6210\u5668\u3002 \u4e0b\u6b21\u6267\u884c\u751f\u6210\u5668\u65f6\uff0c\u5b83\u5c06\u4ece\u6062\u590d\u70b9\u6062\u590d\u5e76\u8fd0\u884c\u5230\u4e0b\u4e00\u4e2a yield \u8868\u8fbe\u5f0f\u3002</p> <p>\u751f\u6210\u5668: \u8fd4\u56de\u751f\u6210\u5668\u8fed\u4ee3\u5668\u7684\u51fd\u6570\u3002 \u5b83\u770b\u8d77\u6765\u50cf\u4e00\u4e2a\u666e\u901a\u51fd\u6570\uff0c\u53ea\u4e0d\u8fc7\u5b83\u5305\u542b\u7528\u4e8e\u751f\u6210\u4e00\u7cfb\u5217\u53ef\u5728 for \u5faa\u73af\u4e2d\u4f7f\u7528\u7684\u503c\u7684yield \u8868\u8fbe\u5f0f\uff0c\u6216\u8005\u53ef\u4ee5\u4f7f\u7528 next() \u51fd\u6570\u4e00\u6b21\u68c0\u7d22\u4e00\u4e2a\u503c\u3002</p> <p>\u2014 PYTHON GLOSSARY</p> <p>\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u751f\u6210\u5668\u51fd\u6570\u521b\u5efa\u5e76\u8fd4\u56de\u751f\u6210\u5668\u8fed\u4ee3\u5668\u3002 \u751f\u6210\u5668\u8fed\u4ee3\u5668\u6267\u884c\u751f\u6210\u5668\u51fd\u6570\u7684\u5185\u5bb9\uff0c\u6839\u636e\u9700\u8981\u4ea7\u751f\u5e76\u6062\u590d\u3002</p> <p>\u751f\u6210\u8fed\u4ee3\u5668: \u7531\u751f\u6210\u5668\u51fd\u6570\u521b\u5efa\u7684\u5bf9\u8c61\u3002 \u6bcf\u4e2ayield\u90fd\u4f1a\u6682\u65f6\u6302\u8d77\u5904\u7406\uff0c\u8bb0\u4f4f\u4f4d\u7f6e\u6267\u884c\u72b6\u6001[...]\u5f53\u751f\u6210\u5668\u8fed\u4ee3\u5668\u6062\u590d\u65f6\uff0c\u5b83\u4f1a\u4ece\u4e0a\u6b21\u505c\u6b62\u7684\u5730\u65b9\u7ee7\u7eed...</p> <p>\u2014 PYTHON GLOSSARY</p> <p>\u53ef\u4ee5\u4f7f\u7528 next() \u5185\u7f6e\u51fd\u6570\u9010\u6b65\u6267\u884c\u751f\u6210\u5668\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u521b\u5efa\u751f\u6210\u5668\ngen = generator()\n# \u751f\u6210\u5668\u7684\u4e0b\u4e00\u6b65\nresult = next(gen)\n</code></pre> <p>\u5c3d\u7ba1\u5982\u6b64\uff0c\u66f4\u5e38\u89c1\u7684\u662f\u8fed\u4ee3\u751f\u6210\u5668\u4ee5\u5b8c\u6210\uff0c\u4f8b\u5982\u4f7f\u7528 for \u5faa\u73af\u6216\u5217\u8868\u7406\u89e3\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u904d\u5386\u751f\u6210\u5668\u5e76\u6536\u96c6\u7ed3\u679c\nresults = [item for item in generator()]\n</code></pre> <p>\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b\u5f02\u6b65\u751f\u6210\u5668\u3002</p> <p>A generator is a Python function that returns a value via a yield expression.</p> <p>For example:</p> <pre><code># define a generator\ndef generator():\n    for i in range(10):\n        yield i\n</code></pre> <p>The generator is executed to the yield expression, after which a value is returned. This suspends the generator at that point. The next time the generator is executed it is resumed from the point it was resumed and runs until the next yield expression.</p> <p>generator: A function which returns a generator iterator. It looks like a normal function except that it contains yield expressions for producing a series of values usable in a for-loop or that can be retrieved one at a time with the next() function.</p> <p>\u2014 PYTHON GLOSSARY</p> <p>Technically, a generator function creates and returns a generator iterator. The generator iterator executes the content of the generator function, yielding and resuming as needed.</p> <p>generator iterator: An object created by a generator function. Each yield temporarily suspends processing, remembering the location execution state [\u2026] When the generator iterator resumes, it picks up where it left off \u2026</p> <p>\u2014 PYTHON GLOSSARY</p> <p>A generator can be executed in steps by using the next() built-in function.</p> <p>For example:</p> <pre><code>...\n# create the generator\ngen = generator()\n# step the generator\nresult = next(gen)\n</code></pre> <p>Although, it is more common to iterate the generator to completion, such as using a for-loop or a list comprehension.</p> <p>For example:</p> <pre><code>...\n# traverse the generator and collect results\nresults = [item for item in generator()]\n</code></pre> <p>Next, let\u2019s take a closer look at asynchronous generators.</p>"},{"location":"asyncio/en/c17/#1712-\u5f02\u6b65\u751f\u6210\u5668","title":"17.1.2 \u5f02\u6b65\u751f\u6210\u5668","text":"<p>17.1.2 Asynchronous Generators</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f02\u6b65\u751f\u6210\u5668\u662f\u4f7f\u7528yield \u8868\u8fbe\u5f0f\u7684\u534f\u7a0b\u3002</p> <p>\u4e0e\u51fd\u6570\u751f\u6210\u5668\u4e0d\u540c\uff0c\u534f\u7a0b\u53ef\u4ee5\u8c03\u5ea6\u548c\u7b49\u5f85\u5176\u4ed6\u534f\u7a0b\u548c\u4efb\u52a1\u3002</p> <p>\u5f02\u6b65\u751f\u6210\u5668: \u8fd4\u56de\u5f02\u6b65\u751f\u6210\u5668\u8fed\u4ee3\u5668\u7684\u51fd\u6570\u3002 \u5b83\u770b\u8d77\u6765\u50cf\u4e00\u4e2a\u4f7f\u7528 async def \u5b9a\u4e49\u7684\u534f\u7a0b\u51fd\u6570\uff0c\u53ea\u4e0d\u8fc7\u5b83\u5305\u542b\u7528\u4e8e\u751f\u6210\u4e00\u7cfb\u5217\u53ef\u5728 async for \u5faa\u73af\u4e2d\u4f7f\u7528\u7684\u503c\u7684 yield \u8868\u8fbe\u5f0f\u3002</p> <p>\u2014 PYTHON GLOSSARY</p> <p>\u4e0e\u7ecf\u5178\u751f\u6210\u5668\u4e00\u6837\uff0c\u5f02\u6b65\u751f\u6210\u5668\u51fd\u6570\u53ef\u7528\u4e8e\u521b\u5efa\u5f02\u6b65\u751f\u6210\u5668\u8fed\u4ee3\u5668\uff0c\u8be5\u8fed\u4ee3\u5668\u53ef\u4ee5\u4f7f\u7528\u5185\u7f6e anext() \u51fd\u6570\uff08\u800c\u4e0d\u662f next() \u51fd\u6570\uff09\u8fdb\u884c\u904d\u5386\u3002</p> <p>\u57fa\u4e8e\u5f02\u6b65\u751f\u6210\u5668\u7684\u8fed\u4ee3\u5668\uff1a\u7531\u5f02\u6b65\u751f\u6210\u5668\u51fd\u6570\u521b\u5efa\u7684\u5bf9\u8c61\u3002 \u8fd9\u662f\u4e00\u4e2a\u5f02\u6b65\u8fed\u4ee3\u5668\uff0c\u5f53\u4f7f\u7528 __anext__() \u65b9\u6cd5\u8c03\u7528\u65f6\uff0c\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u53ef\u7b49\u5f85\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u5c06\u6267\u884c\u5f02\u6b65\u751f\u6210\u5668\u51fd\u6570\u7684\u4e3b\u4f53\uff0c\u76f4\u5230\u4e0b\u4e00\u4e2a yield \u8868\u8fbe\u5f0f\u3002</p> <p>\u2014 PYTHON GLOSSARY</p> <p>\u8fd9\u610f\u5473\u7740\u5f02\u6b65\u751f\u6210\u5668\u8fed\u4ee3\u5668\u5b9e\u73b0\u4e86 __anext__() \u65b9\u6cd5\uff0c\u5e76\u4e14\u53ef\u4ee5\u4e0e async for \u8868\u8fbe\u5f0f\u4e00\u8d77\u4f7f\u7528\u3002</p> <p>\u8fd9\u610f\u5473\u7740\u751f\u6210\u5668\u7684\u6bcf\u6b21\u8fed\u4ee3\u90fd\u88ab\u8c03\u5ea6\u5e76\u4f5c\u4e3a\u53ef\u7b49\u5f85\u6267\u884c\u3002 \u201casync for\u201d\u8868\u8fbe\u5f0f\u5c06\u8c03\u5ea6\u5e76\u6267\u884c\u751f\u6210\u5668\u7684\u6bcf\u6b21\u8fed\u4ee3\uff0c\u6302\u8d77\u8c03\u7528\u534f\u7a0b\u5e76\u7b49\u5f85\u7ed3\u679c\u3002</p> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173\u201casync for\u201d\u8868\u8fbe\u5f0f\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>Asyncio \u7684\u5f02\u6b65 for \u5faa\u73af</li> </ul> <p>An asynchronous generator is a coroutine that uses the yield expression.</p> <p>Unlike a function generator, the coroutine can schedule and await other coroutines and tasks.</p> <p>asynchronous generator: A function which returns an asynchronous generator iterator. It looks like a coroutine function defined with async def except that it contains yield expressions for producing a series of values usable in an async for loop.</p> <p>\u2014 PYTHON GLOSSARY</p> <p>Like a classical generator, an asynchronous generator function can be used to create an asynchronous generator iterator that can be traversed using the built-in anext() function, instead of the next() function.</p> <p>asynchronous generator iterator: An object created by a asynchronous generator function. This is an asynchronous iterator which when called using the __anext__() method returns an awaitable object which will execute the body of the asynchronous generator function until the next yield expression.</p> <p>\u2014 PYTHON GLOSSARY</p> <p>This means that the asynchronous generator iterator implements the __anext__() method and can be used with the async for expression.</p> <p>This means that each iteration of the generator is scheduled and executed as awaitable. The \u201casync for\u201d expression will schedule and execute each iteration of the generator, suspending the calling coroutine and awaiting the result.</p> <p>You can learn more about the \u201casync for\u201d expression in the tutorial:</p> <ul> <li>Asyncio async for loop</li> </ul>"},{"location":"asyncio/en/c17/#172-\u5982\u4f55\u4f7f\u7528\u5f02\u6b65\u751f\u6210\u5668","title":"17.2 \u5982\u4f55\u4f7f\u7528\u5f02\u6b65\u751f\u6210\u5668","text":"<p>17.2 How to Use an Asynchronous Generator</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u4ed4\u7ec6\u7814\u7a76\u5982\u4f55\u5728 asyncio \u7a0b\u5e8f\u4e2d\u5b9a\u4e49\u3001\u521b\u5efa\u3001\u5355\u6b65\u6267\u884c\u548c\u904d\u5386\u5f02\u6b65\u751f\u6210\u5668\u3002</p> <p>\u8ba9\u6211\u4eec\u4ece\u5982\u4f55\u5b9a\u4e49\u5f02\u6b65\u751f\u6210\u5668\u5f00\u59cb\u3002</p> <p>In this section, we will take a close look at how to define, create, step, and traverse an asynchronous generator in asyncio programs.</p> <p>Let\u2019s start with how to define an asynchronous generator.</p>"},{"location":"asyncio/en/c17/#1721-\u5b9a\u4e49\u5f02\u6b65\u751f\u6210\u5668","title":"17.2.1 \u5b9a\u4e49\u5f02\u6b65\u751f\u6210\u5668","text":"<p>17.2.1 Define an Asynchronous Generator</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49\u4e00\u4e2a\u81f3\u5c11\u5177\u6709\u4e00\u4e2ayield \u8868\u8fbe\u5f0f\u7684\u534f\u7a0b\u6765\u5b9a\u4e49\u5f02\u6b65\u751f\u6210\u5668\u3002</p> <p>\u8fd9\u610f\u5473\u7740\u8be5\u51fd\u6570\u662f\u4f7f\u7528\u201casync def\u201d\u8868\u8fbe\u5f0f\u5b9a\u4e49\u7684\u3002</p> <p>\u4f8b\u5982:</p> <pre><code># \u5b9a\u4e49\u4e00\u4e2a\u5f02\u6b65\u751f\u6210\u5668\nasync def async_generator():\n    for i in range(10)\n        yield i\n</code></pre> <p>\u56e0\u4e3a\u5f02\u6b65\u751f\u6210\u5668\u662f\u4e00\u4e2a\u534f\u7a0b\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8fed\u4ee3\u5668\u8fd4\u56de\u4e00\u4e2a\u5728 asyncio \u4e8b\u4ef6\u5faa\u73af\u4e2d\u8c03\u5ea6\u548c\u6267\u884c\u7684\u7b49\u5f85\u5bf9\u8c61\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u751f\u6210\u5668\u7684\u4e3b\u4f53\u5185\u6267\u884c\u548c\u7b49\u5f85\u7b49\u5f85\u5bf9\u8c61\u3002</p> <p>\u4f8b\u5982:</p> <pre><code># \u5b9a\u4e49\u4e00\u4e2a\u7b49\u5f85\u7684\u5f02\u6b65\u751f\u6210\u5668\nasync def async_generator():\n    for i in range(10)\n        # \u6682\u505c\u5e76\u7761\u7720\u4e00\u4f1a\u513f\n        await asyncio.sleep(1)\n        # \u5411\u8c03\u7528\u8005\u4ea7\u751f\u4e00\u4e2a\u503c\n        yield i\n</code></pre> <p>\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528\u5f02\u6b65\u751f\u6210\u5668\u3002</p> <p>We can define an asynchronous generator by defining a coroutine that has at least one yield expression.</p> <p>This means that the function is defined using the \u201casync def\u201d expression.</p> <p>For example:</p> <pre><code># define an asynchronous generator\nasync def async_generator():\n    for i in range(10)\n        yield i\n</code></pre> <p>Because the asynchronous generator is a coroutine and each iterator returns an awaitable that is scheduled and executed in the asyncio event loop, we can execute and await awaitables within the body of the generator.</p> <p>For example:</p> <pre><code># define an asynchronous generator that awaits\nasync def async_generator():\n    for i in range(10)\n        # suspend and sleep a moment\n        await asyncio.sleep(1)\n        # yield a value to the caller\n        yield i\n</code></pre> <p>Next, let\u2019s look at how we might use an asynchronous generator.</p>"},{"location":"asyncio/en/c17/#1722-\u521b\u5efa\u5f02\u6b65\u751f\u6210\u5668","title":"17.2.2 \u521b\u5efa\u5f02\u6b65\u751f\u6210\u5668","text":"<p>17.2.2 Create Asynchronous Generator</p> \u4e2d\u6587\u82f1\u6587 <p>\u8981\u4f7f\u7528\u5f02\u6b65\u751f\u6210\u5668\uff0c\u6211\u4eec\u5fc5\u987b\u521b\u5efa\u751f\u6210\u5668\u3002</p> <p>\u8fd9\u770b\u8d77\u6765\u50cf\u662f\u8c03\u7528\u5b83\uff0c\u4f46\u5b9e\u9645\u4e0a\u662f\u521b\u5efa\u5e76\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u8fed\u4ee3\u5668\nit = async_generator()\n</code></pre> <p>\u8fd9\u4f1a\u8fd4\u56de\u4e00\u79cd\u79f0\u4e3a\u5f02\u6b65\u751f\u6210\u5668\u7684\u53ef\u8fed\u4ee3\u7684\u5f02\u6b65\u8fed\u4ee3\u5668\u3002</p> <p>To use an asynchronous generator we must create the generator.</p> <p>This looks like calling it, but instead creates and returns an iterator object.</p> <p>For example:</p> <pre><code>...\n# create the iterator\nit = async_generator()\n</code></pre> <p>This returns a type of asynchronous iterator called an asynchronous generator iterator.</p>"},{"location":"asyncio/en/c17/#1723-\u4f7f\u7528\u5f02\u6b65\u751f\u6210\u5668","title":"17.2.3 \u4f7f\u7528\u5f02\u6b65\u751f\u6210\u5668","text":"<p>17.2.3 Step an Asynchronous Generator</p> \u4e2d\u6587\u82f1\u6587 <p>\u53ef\u4ee5\u4f7f\u7528 anext() \u5185\u7f6e\u51fd\u6570\u904d\u5386\u751f\u6210\u5668\u7684\u4e00\u6b65\uff0c\u5c31\u50cf\u4f7f\u7528 next() \u51fd\u6570\u7684\u7ecf\u5178\u751f\u6210\u5668\u4e00\u6837 \u3002</p> <p>\u7ed3\u679c\u662f\u4e00\u4e2a\u503c\u5f97\u671f\u5f85\u7684\u7ed3\u679c\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u83b7\u53d6\u751f\u6210\u5668\u4e00\u6b65\u7684\u7b49\u5f85\u503c\nawaitable = anext(gen)\n# \u6267\u884c\u751f\u6210\u5668\u7684\u4e00\u6b65\u5e76\u5f97\u5230\u7ed3\u679c\nresult = await awaitable\n</code></pre> <p>\u8fd9\u53ef\u4ee5\u4e00\u6b65\u5b9e\u73b0\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u542f\u52a8\u5f02\u6b65\u751f\u6210\u5668\nresult = await anext(gen)\n</code></pre> <p>One step of the generator can be traversed using the anext() built-in function, just like a classical generator using the next() function.</p> <p>The result is an awaitable that is awaited.</p> <p>For example:</p> <pre><code>...\n# get an awaitable for one step of the generator\nawaitable = anext(gen)\n# execute the one step of the generator and get the result\nresult = await awaitable\n</code></pre> <p>This can be achieved in one step.</p> <p>For example:</p> <pre><code>...\n# step the async generator\nresult = await anext(gen)\n</code></pre>"},{"location":"asyncio/en/c17/#1724-\u904d\u5386\u5f02\u6b65\u751f\u6210\u5668","title":"17.2.4 \u904d\u5386\u5f02\u6b65\u751f\u6210\u5668","text":"<p>17.2.4 Traverse an Asynchronous Generator</p> \u4e2d\u6587\u82f1\u6587 <p>\u8fd8\u53ef\u4ee5\u4f7f\u7528\u201casync for\u201d\u8868\u8fbe\u5f0f\u5728\u5faa\u73af\u4e2d\u904d\u5386\u5f02\u6b65\u751f\u6210\u5668\uff0c\u8be5\u8868\u8fbe\u5f0f\u5c06\u81ea\u52a8\u7b49\u5f85\u5faa\u73af\u7684\u6bcf\u6b21\u8fed\u4ee3\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u904d\u5386\u5f02\u6b65\u751f\u6210\u5668\nasync for result in async_generator():\n    print(result)\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173\u201casync for\u201d\u8868\u8fbe\u5f0f\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <p>\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5f02\u6b65\u5217\u8868\u7406\u89e3\u548c\u201casync for\u201d\u8868\u8fbe\u5f0f\u6765\u6536\u96c6\u751f\u6210\u5668\u7684\u7ed3\u679c\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u4f7f\u7528\u5f02\u6b65\u751f\u6210\u5668\u7684\u5f02\u6b65\u5217\u8868\u63a8\u5bfc\u5f0f\nresults = [item async for item in async_generator()]\n</code></pre> <p>The asynchronous generator can also be traversed in a loop using the \u201casync for\u201d expression that will await each iteration of the loop automatically.</p> <p>For example:</p> <pre><code>...\n# traverse an asynchronous generator\nasync for result in async_generator():\n    print(result)\n</code></pre> <p>You can learn more about the \u201casync for\u201d expression in the tutorial:</p> <p>We may also use an asynchronous list comprehension with the \u201casync for\u201d expression to collect the results of the generator.</p> <p>For example:</p> <pre><code>...\n# async list comprehension with async generator\nresults = [item async for item in async_generator()]\n</code></pre>"},{"location":"asyncio/en/c17/#173-\u5f02\u6b65\u751f\u6210\u5668\u793a\u4f8b","title":"17.3 \u5f02\u6b65\u751f\u6210\u5668\u793a\u4f8b","text":"<p>17.3 Example of an Asynchronous Generator</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u63a2\u7d22\u5982\u4f55\u4f7f\u7528\u201casync for\u201d\u8868\u8fbe\u5f0f\u904d\u5386\u5f02\u6b65\u751f\u6210\u5668\u3002</p> <p>\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u66f4\u65b0\u524d\u9762\u7684\u793a\u4f8b\uff0c\u4ee5\u4f7f\u7528\u201casync for\u201d\u5faa\u73af\u904d\u5386\u751f\u6210\u5668\u76f4\u81f3\u5b8c\u6210\u3002</p> <p>\u8be5\u5faa\u73af\u5c06\u81ea\u52a8\u7b49\u5f85\u4ece\u751f\u6210\u5668\u8fd4\u56de\u7684\u6bcf\u4e2a\u7b49\u5f85\uff0c\u68c0\u7d22\u751f\u6210\u7684\u503c\uff0c\u5e76\u4f7f\u5176\u5728\u5faa\u73af\u4f53\u5185\u53ef\u7528\uff0c\u4ee5\u4fbf\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u53ef\u4ee5\u62a5\u544a\u5b83\u3002</p> <p>\u8fd9\u53ef\u80fd\u662f\u5f02\u6b65\u751f\u6210\u5668\u6700\u5e38\u89c1\u7684\u4f7f\u7528\u6a21\u5f0f\u3002</p> <p>\u4e0b\u9762\u5217\u51fa\u4e86\u5b8c\u6574\u7684\u793a\u4f8b\u3002</p> <pre><code># SuperFastPython.com\n# \u5e26\u6709 async for \u5faa\u73af\u7684\u5f02\u6b65\u751f\u6210\u5668\u793a\u4f8b\nimport asyncio\n\n# define an asynchronous generator\nasync def async_generator():\n    # \u6b63\u5e38\u5faa\u73af\n    for i in range(10):\n        # \u5757\u6765\u6a21\u62df\u505a\u5de5\u4f5c\n        await asyncio.sleep(1)\n        # \u4ea7\u751f\u7ed3\u679c\n        yield i\n\n# \u4e3b\u534f\u7a0b\nasync def main():\n    # \u4f7f\u7528 async for \u5faa\u73af\u904d\u5386\u5f02\u6b65\u751f\u6210\u5668\n    async for item in async_generator():\n        print(item)\n\n# \u6267\u884c\u5f02\u6b65\u7a0b\u5e8f\nasyncio.run(main())\n</code></pre> <p>\u8fd0\u884c\u8be5\u793a\u4f8b\u9996\u5148\u521b\u5efa main() \u534f\u7a0b\uff0c\u5e76\u5c06\u5176\u7528\u4f5c asyncio \u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u3002</p> <p>main() \u534f\u7a0b\u8fd0\u884c\u5e76\u542f\u52a8 for \u5faa\u73af\u3002</p> <p>\u521b\u5efa\u5f02\u6b65\u751f\u6210\u5668\u7684\u5b9e\u4f8b\uff0c\u5faa\u73af\u4f7f\u7528 anext() \u51fd\u6570\u81ea\u52a8\u6b65\u8fdb\u5b83\u4ee5\u8fd4\u56de\u53ef\u7b49\u5f85\u7684\u5bf9\u8c61\u3002 \u7136\u540e\uff0c\u5faa\u73af\u7b49\u5f85\u53ef\u7b49\u5f85\u5bf9\u8c61\u5e76\u68c0\u7d22\u4e00\u4e2a\u503c\uff0c\u8be5\u503c\u53ef\u4f9b\u62a5\u544a\u8be5\u503c\u7684\u5faa\u73af\u4f53\u4f7f\u7528\u3002</p> <p>\u7136\u540e\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u6302\u8d77 main() \u534f\u7a0b\uff0c\u6267\u884c\u751f\u6210\u5668\u7684\u8fed\u4ee3\uff0c\u6302\u8d77\u5e76\u6062\u590d main() \u534f\u7a0b\uff0c\u76f4\u5230\u751f\u6210\u5668\u8017\u5c3d\u3002</p> <p>\u8fd9\u7a81\u51fa\u663e\u793a\u4e86\u5982\u4f55\u4f7f\u7528 async for \u8868\u8fbe\u5f0f\u904d\u5386\u5f02\u6b65\u751f\u6210\u5668\u3002</p> <pre><code>0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173\u5f02\u6b65\u751f\u6210\u5668\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>Python \u4e2d\u7684\u5f02\u6b65\u751f\u6210\u5668</li> </ul> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u63a2\u8ba8\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002</p> <p>We can explore how to traverse an asynchronous generator using the \u201casync for\u201d expression.</p> <p>In this example, we will update the previous example to traverse the generator to completion using an \u201casync for\u201d loop.</p> <p>This loop will automatically await each awaitable returned from the generator, retrieve the yielded value, and make it available within the loop body so that in this case it can be reported.</p> <p>This is perhaps the most common usage pattern for asynchronous generators.</p> <p>The complete example is listed below.</p> <pre><code># SuperFastPython.com\n# example of asynchronous generator with async for loop\nimport asyncio\n\n# define an asynchronous generator\nasync def async_generator():\n    # normal loop\n    for i in range(10):\n        # block to simulate doing work\n        await asyncio.sleep(1)\n        # yield the result\n        yield i\n\n# main coroutine\nasync def main():\n    # loop over async generator with async for loop\n    async for item in async_generator():\n        print(item)\n\n# execute the asyncio program\nasyncio.run(main())\n</code></pre> <p>Running the example first creates the main() coroutine and uses it as the entry point into the asyncio program.</p> <p>The main() coroutine runs and starts the for loop.</p> <p>An instance of the asynchronous generator is created and the loop automatically steps it using the anext() function to return an awaitable. The loop then awaits the awaitable and retrieves a value which is made available to the body of the loop where it is reported.</p> <p>This process is then repeated, suspending the main() coroutine, executing an iteration of the generator, and suspending, and resuming the main() coroutine until the generator is exhausted.</p> <p>This highlights how an asynchronous generator can be traversed using an async for expression.</p> <pre><code>0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n</code></pre> <p>You can learn more about async generators in the tutorial:</p> <ul> <li>Asynchronous Generators in Python</li> </ul> <p>Next, we will explore asynchronous context managers.</p>"},{"location":"asyncio/en/c18/","title":"18. \u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","text":"<p>18. Asynchronous Context Managers</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u662f\u4e00\u4e2a Python \u7ed3\u6784\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7c7b\u4f3c try-finally \u7684\u73af\u5883\uff0c\u5177\u6709\u4e00\u81f4\u7684\u63a5\u53e3\u548c\u65b9\u4fbf\u7684\u8bed\u6cd5\uff0c\u4f8b\u5982 \u901a\u8fc7\u201cwith\u201d\u8868\u8fbe\u3002</p> <p>\u5b83\u901a\u5e38\u4e0e\u8d44\u6e90\u4e00\u8d77\u4f7f\u7528\uff0c\u786e\u4fdd\u8d44\u6e90\u5728\u4f7f\u7528\u5b8c\u6bd5\u540e\u59cb\u7ec8\u5173\u95ed\u6216\u91ca\u653e\uff0c\u65e0\u8bba\u8d44\u6e90\u7684\u4f7f\u7528\u662f\u5426\u6210\u529f\u6216\u56e0\u5f02\u5e38\u800c\u5931\u8d25\u3002</p> <p>Asyncio \u5141\u8bb8\u6211\u4eec\u5f00\u53d1\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49\u4e00\u4e2a\u5b9e\u73b0 __aenter__() \u548c __aexit__() \u65b9\u6cd5\u7684\u5bf9\u8c61\u4f5c\u4e3a\u534f\u7a0b\u6765\u5728 asyncio \u7a0b\u5e8f\u4e2d\u521b\u5efa\u548c\u4f7f\u7528\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002</p> <p>\u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b\u3002</p> <p>A context manager is a Python construct that provides a try-finally like environment with a consistent interface and handy syntax, e.g. via the \u201cwith\u201d expression.</p> <p>It is commonly used with resources, ensuring the resource is always closed or released after we are finished with it, regardless of whether the usage of the resources was successful or failed with an exception.</p> <p>Asyncio allows us to develop asynchronous context managers.</p> <p>We can create and use asynchronous context managers in asyncio programs by defining an object that implements the __aenter__() and __aexit__() methods as coroutines.</p> <p>Let\u2019s take a closer look.</p>"},{"location":"asyncio/en/c18/#181-\u4ec0\u4e48\u662f\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","title":"18.1 \u4ec0\u4e48\u662f\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","text":"<p>18.1 What is an Asynchronous Context Manager</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u662f\u4e00\u4e2a\u5b9e\u73b0 __aenter__() \u548c __aexit__() \u65b9\u6cd5\u7684 Python \u5bf9\u8c61\u3002</p> <p>\u5728\u6211\u4eec\u6df1\u5165\u4e86\u89e3\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u7ec6\u8282\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u56de\u987e\u4e00\u4e0b\u7ecf\u5178\u7684\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002</p> <p>An asynchronous context manager is a Python object that implements the __aenter__() and __aexit_ _() methods.</p> <p>Before we dive into the details of asynchronous context managers, let\u2019s review classical context managers.</p>"},{"location":"asyncio/en/c18/#1811--\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","title":"18.1.1  \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","text":"<p>18.1.1  Context Manager</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u662f\u4e00\u4e2a\u5b9e\u73b0 __enter__() \u548c __exit__() \u65b9\u6cd5\u7684 Python \u5bf9\u8c61\u3002</p> <p>\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5b83\u5b9a\u4e49\u6267\u884c with \u8bed\u53e5\u65f6\u8981\u5efa\u7acb\u7684\u8fd0\u884c\u65f6\u4e0a\u4e0b\u6587\u3002 \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5904\u7406\u6267\u884c\u4ee3\u7801\u5757\u6240\u9700\u7684\u8fd0\u884c\u65f6\u4e0a\u4e0b\u6587\u7684\u8fdb\u5165\u548c\u9000\u51fa\u3002</p> <p>\u2014 WITH STATEMENT CONTEXT MANAGERS</p> <ul> <li>__enter__() \u65b9\u6cd5\u5b9a\u4e49\u5728\u5757\u5f00\u59cb\u65f6\u53d1\u751f\u7684\u60c5\u51b5\uff0c\u4f8b\u5982\u6253\u5f00\u6216\u51c6\u5907\u8d44\u6e90\uff0c\u5982\u6587\u4ef6\u3001\u5957\u63a5\u5b57\u6216\u7ebf\u7a0b\u6c60\u3002</li> <li>__exit__() \u65b9\u6cd5\u5b9a\u4e49\u9000\u51fa\u5757\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u4f8b\u5982\u5173\u95ed\u51c6\u5907\u597d\u7684\u8d44\u6e90\u3002</li> </ul> <p>\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u5178\u578b\u7528\u9014\u5305\u62ec\u4fdd\u5b58\u548c\u6062\u590d\u5404\u79cd\u5168\u5c40\u72b6\u6001\u3001\u9501\u5b9a\u548c\u89e3\u9501\u8d44\u6e90\u3001\u5173\u95ed\u6253\u5f00\u7684\u6587\u4ef6\u7b49\u3002</p> <p>\u2014 WITH STATEMENT CONTEXT MANAGERS</p> <p>\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u901a\u8fc7\u201cwith\u201d\u8868\u8fbe\u5f0f\u4f7f\u7528\u3002</p> <p>\u901a\u5e38\uff0c\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5bf9\u8c61\u662f\u5728\u201cwith\u201d\u8868\u8fbe\u5f0f\u7684\u5f00\u5934\u521b\u5efa\u7684\uff0c\u5e76\u4e14\u81ea\u52a8\u8c03\u7528 __enter__() \u65b9\u6cd5\u3002 \u5185\u5bb9\u7684\u4e3b\u4f53\u901a\u8fc7\u6307\u5b9a\u7684\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5bf9\u8c61\u4f7f\u7528\u8d44\u6e90\uff0c\u7136\u540e\u5f53\u5757\u6b63\u5e38\u6216\u901a\u8fc7\u5f02\u5e38\u9000\u51fa\u65f6\uff0c\u81ea\u52a8\u8c03\u7528 __aexit__() \u65b9\u6cd5\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u6253\u5f00\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\nwith ContextManager() as manager:\n    # ...\n# \u81ea\u52a8\u5173\u95ed\nThis mirrors a try-finally expression.\n</code></pre> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u521b\u5efa\u5bf9\u8c61\nmanager = ContextManager()\ntry:\n    manager.__enter__()\n    # ...\nfinally:\n    manager.__exit__()\n</code></pre> <p>\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002</p> <p>A context manager is a Python object that implements the __enter__() and __exit__() methods.</p> <p>A context manager is an object that defines the runtime context to be established when executing a with statement. The context manager handles the entry into, and the exit from, the desired runtime context for the execution of the block of code.</p> <p>\u2014 WITH STATEMENT CONTEXT MANAGERS</p> <ul> <li>The __enter__() method defines what happens at the beginning of a block, such as opening or preparing resources, like a file, socket or thread pool.</li> <li>The __exit__() method defines what happens when the block is exited, such as closing a prepared resource.</li> </ul> <p>Typical uses of context managers include saving and restoring various kinds of global state, locking and unlocking resources, closing opened files, etc.</p> <p>\u2014 WITH STATEMENT CONTEXT MANAGERS</p> <p>A context manager is used via the \u201cwith\u201d expression.</p> <p>Typically the context manager object is created in the beginning of the \u201cwith\u201d expression and the __enter__() method is called automatically. The body of the content makes use of the resource via the named context manager object, then the __aexit__() method is called automatically when the block is exited, normally or via an exception.</p> <p>For example:</p> <pre><code>...\n# open a context manager\nwith ContextManager() as manager:\n    # ...\n# closed automatically\nThis mirrors a try-finally expression.\n</code></pre> <p>For example:</p> <pre><code>...\n# create the object\nmanager = ContextManager()\ntry:\n    manager.__enter__()\n    # ...\nfinally:\n    manager.__exit__()\n</code></pre> <p>Next, let\u2019s take a look at asynchronous context managers.</p>"},{"location":"asyncio/en/c18/#1812-\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","title":"18.1.2 \u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","text":"<p>18.1.2  Asynchronous Context Manager</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5728\u201cPEP 492 \u2013 \u5177\u6709\u5f02\u6b65\u548c\u7b49\u5f85\u8bed\u6cd5\u7684\u534f\u7a0b\u201d\u4e2d\u5f15\u5165\u3002</p> <p>\u5b83\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c\u53ef\u4ee5\u5728\u8fdb\u5165\u548c\u9000\u51fa\u65f6\u6682\u505c\u3002</p> <p>\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u662f\u80fd\u591f\u5728\u5176 __aenter__ \u548c __aexit__ \u65b9\u6cd5\u4e2d\u6682\u505c\u6267\u884c\u7684\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002</p> <p>\u2014 ASYNCHRONOUS CONTEXT MANAGERS</p> <p>__aenter__ \u548c __aexit__ \u65b9\u6cd5\u88ab\u5b9a\u4e49\u4e3a\u534f\u7a0b\u5e76\u7531\u8c03\u7528\u8005\u7b49\u5f85\u3002</p> <p>\u8fd9\u662f\u4f7f\u7528\u201casync with\u201d\u8868\u8fbe\u5f0f\u6765\u5b9e\u73b0\u7684\u3002</p> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173\u201casync with\u201d\u8868\u8fbe\u5f0f\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>Asyncio \u5f02\u6b65\u662f\u4ec0\u4e48</li> </ul> <p>\u56e0\u6b64\uff0c\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u53ea\u80fd\u5728 asyncio \u7a0b\u5e8f\u4e2d\u4f7f\u7528\uff0c\u4f8b\u5982\u5728\u8c03\u7528\u534f\u7a0b\u4e2d\u3002</p> <p>\u4ec0\u4e48\u662f\u201c\u5f02\u6b65\u201d</p> <p>\u201casync with\u201d\u8868\u8fbe\u5f0f\u7528\u4e8e\u521b\u5efa\u548c\u4f7f\u7528\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002</p> <p>\u5b83\u662f\u201cwith\u201d\u8868\u8fbe\u5f0f\u7684\u6269\u5c55\uff0c\u7528\u4e8e asyncio \u7a0b\u5e8f\u4e2d\u7684\u534f\u7a0b\u3002</p> <p>\u201casync with\u201d\u8868\u8fbe\u5f0f\u5c31\u50cf\u7528\u4e8e\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u201cwith\u201d\u8868\u8fbe\u5f0f\u4e00\u6837\uff0c\u53ea\u4e0d\u8fc7\u5b83\u5141\u8bb8\u5728\u534f\u7a0b\u4e2d\u4f7f\u7528\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002</p> <p>\u4e3a\u4e86\u66f4\u597d\u5730\u7406\u89e3\u201casync with\u201d\uff0c\u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002</p> <p>async with \u8868\u8fbe\u5f0f\u5141\u8bb8\u534f\u7a0b\u521b\u5efa\u548c\u4f7f\u7528\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u5f02\u6b65\u7248\u672c\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u521b\u5efa\u5e76\u4f7f\u7528\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\nasync with AsyncContextManager() as manager:\n    # ...\n</code></pre> <p>\u8fd9\u76f8\u5f53\u4e8e\uff1a</p> <pre><code>...\n# \u521b\u5efa\u6216\u8fdb\u5165\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\nmanager = await AsyncContextManager()\ntry:\n    # ...\nfinally:\n    # \u5173\u95ed\u6216\u9000\u51fa\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\n    await manager.close()\n</code></pre> <p>\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u5b9e\u73b0\u7684\u6a21\u5f0f\u4e0e\u4f20\u7edf\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u51e0\u4e4e\u76f8\u540c\uff0c\u53ea\u662f\u521b\u5efa\u548c\u5173\u95ed\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u6d89\u53ca\u7b49\u5f85\u534f\u7a0b\u3002</p> <p>\u8fd9\u4f1a\u6682\u505c\u5f53\u524d\u534f\u7a0b\u7684\u6267\u884c\uff0c\u5b89\u6392\u4e00\u4e2a\u65b0\u7684\u534f\u7a0b\u5e76\u7b49\u5f85\u5176\u5b8c\u6210\u3002</p> <p>\u56e0\u6b64\uff0c\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5fc5\u987b\u5b9e\u73b0 __aenter__() \u548c __aexit__() \u65b9\u6cd5\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u5fc5\u987b\u901a\u8fc7 async def \u8868\u8fbe\u5f0f\u5b9a\u4e49\u3002 \u8fd9\u4f7f\u5f97\u5b83\u4eec\u672c\u8eab\u6210\u4e3a\u534f\u7a0b\uff0c\u4e5f\u53ef\u80fd\u7b49\u5f85\u3002</p> <p>Asynchronous context managers were introduced in \u201cPEP 492 \u2013 Coroutines with async and await syntax\u201c.</p> <p>They provide a context manager that can be suspended when entering and exiting.</p> <p>An asynchronous context manager is a context manager that is able to suspend execution in its __aenter__ and __aexit__ methods.</p> <p>\u2014 ASYNCHRONOUS CONTEXT MANAGERS</p> <p>The __aenter__ and __aexit__ methods are defined as coroutines and are awaited by the caller.</p> <p>This is achieved using the \u201casync with\u201d expression.</p> <p>You can learn more about the \u201casync with\u201d expression in the tutorial:</p> <ul> <li>What is Asyncio async with</li> </ul> <p>As such, asynchronous context managers can only be used within asyncio programs, such as within calling coroutines.</p> <p>What is \u201casync with\u201d</p> <p>The \u201casync with\u201d expression is for creating and using asynchronous context managers.</p> <p>It is an extension of the \u201cwith\u201d expression for use in coroutines within asyncio programs.</p> <p>The \u201casync with\u201d expression is just like the \u201cwith\u201d expression used for context managers, except it allows asynchronous context managers to be used within coroutines.</p> <p>In order to better understand \u201casync with\u201c, let\u2019s take a closer look at asynchronous context managers.</p> <p>The async with expression allows a coroutine to create and use an asynchronous version of a context manager.</p> <p>For example:</p> <pre><code>...\n# create and use an asynchronous context manager\nasync with AsyncContextManager() as manager:\n    # ...\n</code></pre> <p>This is equivalent to something like:</p> <pre><code>...\n# create or enter the async context manager\nmanager = await AsyncContextManager()\ntry:\n    # ...\nfinally:\n    # close or exit the context manager\n    await manager.close()\n</code></pre> <p>Notice that we are implementing much the same pattern as a traditional context manager, except that creating and closing the context manager involve awaiting coroutines.</p> <p>This suspends the execution of the current coroutine, schedules a new coroutine and waits for it to complete.</p> <p>As such an asynchronous context manager must implement the __aenter__() and __aexit__() methods that must be defined via the async def expression. This makes them coroutines themselves which may also await.</p>"},{"location":"asyncio/en/c18/#182-\u5982\u4f55\u4f7f\u7528\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","title":"18.2 \u5982\u4f55\u4f7f\u7528\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","text":"<p>18.2 How to Use Asynchronous Context Managers</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u63a2\u8ba8\u5982\u4f55\u5728 asyncio \u7a0b\u5e8f\u4e2d\u5b9a\u4e49\u3001\u521b\u5efa\u548c\u4f7f\u7528\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002</p> <p>In this section, we will explore how we can define, create, and use asynchronous context managers in our asyncio programs.</p>"},{"location":"asyncio/en/c18/#1821-\u5b9a\u4e49\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","title":"18.2.1 \u5b9a\u4e49\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","text":"<p>18.2.1 Define an Asynchronous Context Manager</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u5c06\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5b9a\u4e49\u4e3a\u5b9e\u73b0 __aenter__() \u548c __aexit__() \u65b9\u6cd5\u7684 Python \u5bf9\u8c61\u3002</p> <p>\u91cd\u8981\u7684\u662f\uff0c\u8fd9\u4e24\u79cd\u65b9\u6cd5\u90fd\u5fc5\u987b\u4f7f\u7528\u201casync def\u201d\u5b9a\u4e49\u4e3a\u534f\u7a0b\uff0c\u56e0\u6b64\u5fc5\u987b\u8fd4\u56de\u53ef\u7b49\u5f85\u5bf9\u8c61\u3002</p> <p>\u4f8b\u5982:</p> <pre><code># \u5b9a\u4e49\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\nclass AsyncContextManager:\n    # \u8fdb\u5165\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\n    async def __aenter__(self):\n        # \u62a5\u544a\u6d88\u606f\n        print('&gt;entering the context manager')\n\n    # \u9000\u51fa\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\n    async def __aexit__(self, exc_type, exc, tb):\n        # \u62a5\u544a\u6d88\u606f\n        print('&gt;exiting the context manager')\n</code></pre> <p>\u56e0\u4e3a\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u662f\u534f\u7a0b\uff0c\u6240\u4ee5\u5b83\u4eec\u672c\u8eab\u53ef\u80fd\u7b49\u5f85\u534f\u7a0b\u6216\u4efb\u52a1\u3002</p> <p>\u4f8b\u5982:</p> <pre><code># \u5b9a\u4e49\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\nclass AsyncContextManager:\n    # \u8fdb\u5165\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\n    async def __aenter__(self):\n        # \u62a5\u544a\u6d88\u606f\n        print('&gt;entering the context manager')\n        # \u6682\u65f6\u963b\u585e\n        await asyncio.sleep(0.5)\n\n    # \u9000\u51fa\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\n    async def __aexit__(self, exc_type, exc, tb):\n        # \u62a5\u544a\u6d88\u606f\n        print('&gt;exiting the context manager')\n        # \u6682\u65f6\u963b\u585e\n        await asyncio.sleep(0.5)\n</code></pre> <p>We can define an asynchronous context manager as a Python object that implements the __aenter__() and __aexit__() methods.</p> <p>Importantly, both methods must be defined as coroutines using the \u201casync def\u201d and therefore must return awaitables.</p> <p>For example:</p> <pre><code># define an asynchronous context manager\nclass AsyncContextManager:\n    # enter the async context manager\n    async def __aenter__(self):\n        # report a message\n        print('&gt;entering the context manager')\n\n    # exit the async context manager\n    async def __aexit__(self, exc_type, exc, tb):\n        # report a message\n        print('&gt;exiting the context manager')\n</code></pre> <p>Because each of the methods are coroutines, they may themselves await coroutines or tasks.</p> <p>For example:</p> <pre><code># define an asynchronous context manager\nclass AsyncContextManager:\n    # enter the async context manager\n    async def __aenter__(self):\n        # report a message\n        print('&gt;entering the context manager')\n        # block for a moment\n        await asyncio.sleep(0.5)\n\n    # exit the async context manager\n    async def __aexit__(self, exc_type, exc, tb):\n        # report a message\n        print('&gt;exiting the context manager')\n        # block for a moment\n        await asyncio.sleep(0.5)\n</code></pre>"},{"location":"asyncio/en/c18/#1822-\u4f7f\u7528\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","title":"18.2.2 \u4f7f\u7528\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","text":"<p>18.2.2 Use an Asynchronous Context Manager</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u901a\u8fc7\u201casync with\u201d\u8868\u8fbe\u5f0f\u4f7f\u7528\u3002</p> <p>\u8fd9\u5c06\u81ea\u52a8\u7b49\u5f85\u8fdb\u5165\u548c\u9000\u51fa\u534f\u7a0b\uff0c\u5e76\u6839\u636e\u9700\u8981\u6682\u505c\u8c03\u7528\u534f\u7a0b\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u4f7f\u7528\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\nasync with AsyncContextManager() as manager:\n    # ...\n</code></pre> <p>\u56e0\u6b64\uff0c\u201casync with\u201d\u8868\u8fbe\u5f0f\u548c\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u66f4\u4e00\u822c\u5730\u53ea\u80fd\u5728 asyncio \u7a0b\u5e8f\u4e2d\u4f7f\u7528\uff0c\u4f8b\u5982\u5728\u534f\u7a0b\u4e2d\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u5982\u4f55\u4f7f\u7528\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u6709\u6548\u7684\u793a\u4f8b\u3002</p> <p>An asynchronous context manager is used via the \u201casync with\u201d expression.</p> <p>This will automatically await the enter and exit coroutines, suspending the calling coroutine as needed.</p> <p>For example:</p> <pre><code>...\n# use an asynchronous context manager\nasync with AsyncContextManager() as manager:\n    # ...\n</code></pre> <p>As such, the \u201casync with\u201d expression and asynchronous context managers more generally can only be used within asyncio programs, such as within coroutines.</p> <p>Now that we know how to use asynchronous context managers, let\u2019s look at a worked example.</p>"},{"location":"asyncio/en/c18/#183-\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u548casync-with\u7684\u793a\u4f8b","title":"18.3 \u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u548c\u201casync with\u201d\u7684\u793a\u4f8b","text":"<p>18.3 Example of an Asynchronous Context Manager and \u201casync with\u201d</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u201casync with\u201d\u8868\u8fbe\u5f0f\u63a2\u7d22\u5982\u4f55\u4f7f\u7528\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002</p> <p>\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u66f4\u65b0\u4e0a\u9762\u7684\u793a\u4f8b\u4ee5\u6b63\u5e38\u65b9\u5f0f\u4f7f\u7528\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002</p> <p>\u6211\u4eec\u5c06\u4f7f\u7528\u201casync with\u201d\u8868\u8fbe\u5f0f\uff0c\u5e76\u5728\u4e00\u884c\u4e2d\u521b\u5efa\u5e76\u8f93\u5165\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002 \u8fd9\u5c06\u81ea\u52a8\u7b49\u5f85\u8f93\u5165\u65b9\u6cd5\u3002</p> <p>\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5728\u5185\u90e8\u5757\u4e2d\u4f7f\u7528\u7ba1\u7406\u5668\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ea\u4f1a\u62a5\u544a\u4e00\u6761\u6d88\u606f\u3002</p> <p>\u9000\u51fa\u5185\u90e8\u5757\u5c06\u81ea\u52a8\u7b49\u5f85\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u9000\u51fa\u65b9\u6cd5\u3002</p> <p>\u5c06\u6b64\u793a\u4f8b\u4e0e\u524d\u9762\u7684\u793a\u4f8b\u8fdb\u884c\u5bf9\u6bd4\uff0c\u53ef\u4ee5\u770b\u51fa\u201casync with\u201d\u8868\u8fbe\u5f0f\u5728 asyncio \u7a0b\u5e8f\u4e2d\u4e3a\u6211\u4eec\u5e26\u6765\u4e86\u591a\u5927\u7684\u8d1f\u62c5\u3002</p> <p>\u4e0b\u9762\u5217\u51fa\u4e86\u5b8c\u6574\u7684\u793a\u4f8b\u3002</p> <pre><code># SuperFastPython.com\n# \u901a\u8fc7 async with \u5b9e\u73b0\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u793a\u4f8b\nimport asyncio\n\n# \u5b9a\u4e49\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\nclass AsyncContextManager:\n    # \u8fdb\u5165\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\n    async def __aenter__(self):\n        # \u62a5\u544a\u6d88\u606f\n        print('&gt;entering the context manager')\n        # \u6682\u65f6\u963b\u585e\n        await asyncio.sleep(0.5)\n\n    # \u9000\u51fa\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\n    async def __aexit__(self, exc_type, exc, tb):\n        # \u62a5\u544a\u6d88\u606f\n        print('&gt;exiting the context manager')\n        # \u6682\u65f6\u963b\u585e\n        await asyncio.sleep(0.5)\n\n# \u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u534f\u7a0b\nasync def custom_coroutine():\n    # \u521b\u5efa\u5e76\u4f7f\u7528\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\n    async with AsyncContextManager() as manager:\n        # \u62a5\u544a\u7ed3\u679c\n        print(f'within the manager')\n\n# \u542f\u52a8\u5f02\u6b65\u7a0b\u5e8f\nasyncio.run(custom_coroutine())\n</code></pre> <p>\u8fd0\u884c\u8be5\u793a\u4f8b\u9996\u5148\u521b\u5efa main() \u534f\u7a0b\uff0c\u5e76\u5c06\u5176\u7528\u4f5c asyncio \u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u3002</p> <p>main() \u534f\u7a0b\u8fd0\u884c\u5e76\u5728\u201casync with\u201d\u8868\u8fbe\u5f0f\u4e2d\u521b\u5efa AsyncContextManager \u7c7b\u7684\u5b9e\u4f8b\u3002</p> <p>\u8be5\u8868\u8fbe\u5f0f\u81ea\u52a8\u8c03\u7528 Enter \u65b9\u6cd5\u5e76\u7b49\u5f85\u534f\u7a0b\u3002 \u62a5\u544a\u4e00\u6761\u6d88\u606f\uff0c\u534f\u7a0b\u963b\u585e\u7247\u523b\u3002</p> <p>main() \u534f\u7a0b\u6062\u590d\u5e76\u6267\u884c\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u4e3b\u4f53\uff0c\u6253\u5370\u4e00\u6761\u6d88\u606f\u3002</p> <p>\u8be5\u5757\u9000\u51fa\u5e76\u81ea\u52a8\u7b49\u5f85\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u9000\u51fa\u65b9\u6cd5\uff0c\u62a5\u544a\u6d88\u606f\u5e76\u4f11\u7720\u4e00\u4f1a\u513f\u3002</p> <p>\u8fd9\u7a81\u51fa\u663e\u793a\u4e86 asyncio \u7a0b\u5e8f\u4e2d\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u6b63\u5e38\u4f7f\u7528\u6a21\u5f0f\u3002</p> <pre><code>&gt;entering the context manager\nwithin the manager\n&gt;exiting the context manager\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>Asynchronous Context Managers in Python</li> </ul> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u63a2\u7d22\u5f02\u6b65\u63a8\u5bfc\u5f0f\u3002</p> <p>We can explore how to use an asynchronous context manager via the \u201casync with\u201d expression.</p> <p>In this example, we will update the above example to use the context manager in a normal manner.</p> <p>We will use an \u201casync with\u201d expression and on one line, create and enter the context manager. This will automatically await the enter method.</p> <p>We can then make use of the manager within the inner block. In this case, we will just report a message.</p> <p>Exiting the inner block will automatically await the exit method of the context manager.</p> <p>Contrasting this example with the previous example shows how much heavy lifting the \u201casync with\u201d expression does for us in an asyncio program.</p> <p>The complete example is listed below.</p> <pre><code># SuperFastPython.com\n# example of an asynchronous context manager via async with\nimport asyncio\n\n# define an asynchronous context manager\nclass AsyncContextManager:\n    # enter the async context manager\n    async def __aenter__(self):\n        # report a message\n        print('&gt;entering the context manager')\n        # block for a moment\n        await asyncio.sleep(0.5)\n\n    # exit the async context manager\n    async def __aexit__(self, exc_type, exc, tb):\n        # report a message\n        print('&gt;exiting the context manager')\n        # block for a moment\n        await asyncio.sleep(0.5)\n\n# define a simple coroutine\nasync def custom_coroutine():\n    # create and use the asynchronous context manager\n    async with AsyncContextManager() as manager:\n        # report the result\n        print(f'within the manager')\n\n# start the asyncio program\nasyncio.run(custom_coroutine())\n</code></pre> <p>Running the example first creates the main() coroutine and uses it as the entry point into the asyncio program.</p> <p>The main() coroutine runs and creates an instance of our AsyncContextManager class in an \u201casync with\u201d expression.</p> <p>This expression automatically calls the enter method and awaits the coroutine. A message is reported and the coroutine blocks for a moment.</p> <p>The main() coroutine resumes and executes the body of the context manager, printing a message.</p> <p>The block is exited and the exit method of the context manager is awaited automatically, reporting a message and sleeping a moment.</p> <p>This highlights the normal usage pattern for an asynchronous context manager in an asyncio program.</p> <pre><code>&gt;entering the context manager\nwithin the manager\n&gt;exiting the context manager\n</code></pre> <p>You can learn more about async context managers in the tutorial:</p> <ul> <li>Asynchronous Context Managers in Python</li> </ul> <p>Next, we will explore asynchronous comprehensions.</p>"},{"location":"asyncio/en/c19/","title":"19. \u5f02\u6b65\u63a8\u5bfc\u5f0f","text":"<p>19. Asynchronous Comprehensions</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f53\u6211\u4eec\u60f3\u5230\u201cPythonic\u201d\u65f6\uff0c\u63a8\u5bfc\u5f0f\uff08\u4f8b\u5982\u5217\u8868\u63a8\u5bfc\u5f0f\u548c\u5b57\u5178\u63a8\u5bfc\u5f0f\uff09\u662f Python \u7684\u7279\u5f81\u4e4b\u4e00\u3002</p> <p>\u8fd9\u662f\u6211\u4eec\u6267\u884c\u5faa\u73af\u7684\u4e00\u79cd\u4e0e\u8bb8\u591a\u5176\u4ed6\u8bed\u8a00\u4e0d\u540c\u7684\u65b9\u5f0f\u3002</p> <p>Asyncio \u5141\u8bb8\u6211\u4eec\u4f7f\u7528\u5f02\u6b65\u63a8\u5bfc\u5f0f\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u201casync for\u201d\u8868\u8fbe\u5f0f\u4f7f\u7528\u5f02\u6b65\u63a8\u5bfc\u5f0f\u6765\u904d\u5386\u5f02\u6b65\u751f\u6210\u5668\u548c\u5f02\u6b65\u8fed\u4ee3\u5668\u3002</p> <p>\u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b\u3002</p> <p>Comprehensions, like list and dict comprehensions are one feature of Python when we think of \u201cpythonic\u201c.</p> <p>It is a way we do loops that is different to many other languages.</p> <p>Asyncio allows us to use asynchronous comprehensions.</p> <p>We can traverse an asynchronous generators and asynchronous iterators using an asynchronous comprehension via the \u201casync for\u201d expression.</p> <p>Let\u2019s take a closer look.</p>"},{"location":"asyncio/en/c19/#191-\u4ec0\u4e48\u662f\u5f02\u6b65\u63a8\u5bfc\u5f0f","title":"19.1 \u4ec0\u4e48\u662f\u5f02\u6b65\u63a8\u5bfc\u5f0f","text":"<p>19.1 What are Asynchronous Comprehensions</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f02\u6b65\u63a8\u5bfc\u5f0f\u662f\u7ecf\u5178\u63a8\u5bfc\u5f0f\u7684\u5f02\u6b65\u7248\u672c\u3002</p> <p>Asyncio \u652f\u6301\u4e24\u79cd\u7c7b\u578b\u7684\u5f02\u6b65\u63a8\u5bfc\u5f0f\uff0c\u5b83\u4eec\u662f\u201casync for\u201d\u63a8\u5bfc\u548c\u201cawait\u201d\u63a8\u5bfc\u3002</p> <p>PEP 530 \u6dfb\u52a0\u4e86\u5bf9\u5728 \u5217\u8868\u3001\u96c6\u5408\u3001\u5b57\u5178\u63a8\u5bfc\u548c\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u4f7f\u7528\u5f02\u6b65\u7684\u652f\u6301</p> <p>\u2014 PEP 530: ASYNCHRONOUS COMPREHENSIONS, WHAT\u2019S NEW IN PYTHON 3.6.</p> <p>\u5728\u6211\u4eec\u8ba8\u8bba\u6bcf\u4e00\u4e2a\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u9996\u5148\u56de\u987e\u4e00\u4e0b\u7ecf\u5178\u7684\u63a8\u5bfc\u5f0f\u3002</p> <p>An async comprehension is an asynchronous version of a classical comprehension.</p> <p>Asyncio supports two types of asynchronous comprehensions, they are the \u201casync for\u201d comprehension and the \u201cawait\u201d comprehension.</p> <p>PEP 530 adds support for using async for in list, set, dict comprehensions and generator expressions</p> <p>\u2014 PEP 530: ASYNCHRONOUS COMPREHENSIONS, WHAT\u2019S NEW IN PYTHON 3.6.</p> <p>Before we look at each, let\u2019s first recall classical comprehensions.</p>"},{"location":"asyncio/en/c19/#192-\u63a8\u5bfc\u5f0f","title":"19.2 \u63a8\u5bfc\u5f0f","text":"<p>19.2 Comprehensions</p> \u4e2d\u6587\u82f1\u6587 <p>\u63a8\u5bfc\u5f0f\u5141\u8bb8\u4ee5\u7b80\u6d01\u7684\u65b9\u5f0f\u521b\u5efa\u5217\u8868\u3001\u5b57\u5178\u548c\u96c6\u5408\u7b49\u6570\u636e\u96c6\u5408\u3002</p> <p>\u5217\u8868\u63a8\u5bfc\u5f0f\u63d0\u4f9b\u4e86\u4e00\u79cd\u521b\u5efa\u5217\u8868\u7684\u7b80\u6d01\u65b9\u6cd5\u3002</p> <p>\u2014 LIST COMPREHENSIONS</p> <p>\u5217\u8868\u63a8\u5bfc\u5f0f\u5141\u8bb8\u4ece\u65b0\u5217\u8868\u8868\u8fbe\u5f0f\u4e2d\u7684 for \u8868\u8fbe\u5f0f\u521b\u5efa\u5217\u8868\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u4f7f\u7528\u5217\u8868\u7406\u89e3\u521b\u5efa\u5217\u8868\nresult = [a*2 for a in range(100)]\n</code></pre> <p>\u8fd8\u652f\u6301\u521b\u5efa\u5b57\u5178\u548c\u96c6\u5408\u7684\u63a8\u5bfc\u5f0f\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u4f7f\u7528\u7406\u89e3\u521b\u5efa\u4e00\u4e2a\u5b57\u5178\nresult = {a:i for a,i in zip(['a','b','c'],range(3))}\n# \u4f7f\u7528\u63a8\u5bfc\u5f0f\u521b\u5efa\u4e00\u4e2a\u96c6\u5408\nresult = {a for a in [1, 2, 3, 2, 3, 1, 5, 4]}\n</code></pre> <p>Comprehensions allow data collections like lists, dicts, and sets to be created in a concise way.</p> <p>List comprehensions provide a concise way to create lists.</p> <p>\u2014 LIST COMPREHENSIONS</p> <p>A list comprehension allows a list to be created from a for expression within the new list expression.</p> <p>For example:</p> <pre><code>...\n# create a list using a list comprehension\nresult = [a*2 for a in range(100)]\n</code></pre> <p>Comprehensions are also supported for creating dicts and sets.</p> <p>For example:</p> <pre><code>...\n# create a dict using a comprehension\nresult = {a:i for a,i in zip(['a','b','c'],range(3))}\n# create a set using a comprehension\nresult = {a for a in [1, 2, 3, 2, 3, 1, 5, 4]}\n</code></pre>"},{"location":"asyncio/en/c19/#193-\u5f02\u6b65\u63a8\u5bfc\u5f0f","title":"19.3 \u5f02\u6b65\u63a8\u5bfc\u5f0f","text":"<p>19.3 Asynchronous Comprehensions</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f02\u6b65\u7406\u89e3\u5141\u8bb8\u4f7f\u7528\u5e26\u6709\u5f02\u6b65\u8fed\u4ee3\u7684\u201casync for\u201d\u8868\u8fbe\u5f0f\u6765\u521b\u5efa\u5217\u8868\u3001\u96c6\u5408\u6216\u5b57\u5178\u3002</p> <p>\u6211\u4eec\u5efa\u8bae\u5141\u8bb8\u5bf9\u5185\u90e8\u5217\u8868\u3001\u96c6\u5408\u548c\u5b57\u5178\u63a8\u5bfc\u4e2d\u4f7f\u7528\u5f02\u6b65\u3002</p> <p>\u2014 PEP 530 \u2013 ASYNCHRONOUS COMPREHENSIONS</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u4f7f\u7528\u5f02\u6b65\u8fed\u4ee3\u5668\u7684\u5f02\u6b65\u5217\u8868\u7406\u89e3\nresult = [a async for a in aiterable]\n</code></pre> <p>\u8fd9\u5c06\u6839\u636e\u9700\u8981\u521b\u5efa\u548c\u8c03\u5ea6\u534f\u7a0b\u6216\u4efb\u52a1\uff0c\u5e76\u5c06\u5176\u7ed3\u679c\u751f\u6210\u5230\u5217\u8868\u4e2d\u3002</p> <p>\u56de\u60f3\u4e00\u4e0b\uff0c\u201casync for\u201d\u8868\u8fbe\u5f0f\u53ea\u80fd\u5728\u534f\u7a0b\u548c\u4efb\u52a1\u4e2d\u4f7f\u7528\u3002</p> <p>\u53e6\u5916\uff0c\u8bf7\u8bb0\u4f4f\uff0c\u5f02\u6b65\u8fed\u4ee3\u5668\u662f\u4ea7\u751f\u53ef\u7b49\u5f85\u9879\u7684\u8fed\u4ee3\u5668\u3002</p> <p>\u201casync for\u201d\u8868\u8fbe\u5f0f\u5141\u8bb8\u8c03\u7528\u8005\u904d\u5386\u53ef\u7b49\u5f85\u9879\u7684\u5f02\u6b65\u8fed\u4ee3\u5668\u5e76\u4ece\u6bcf\u4e2a\u8fed\u4ee3\u5668\u4e2d\u68c0\u7d22\u7ed3\u679c\u3002</p> <p>\u5728\u5185\u90e8\uff0casync for \u5faa\u73af\u5c06\u81ea\u52a8\u89e3\u6790\u6216\u7b49\u5f85\u6bcf\u4e2a\u53ef\u7b49\u5f85\u7684\u3001\u6839\u636e\u9700\u8981\u8c03\u5ea6\u534f\u7a0b\u3002</p> <p>\u5f02\u6b65\u751f\u6210\u5668\u81ea\u52a8\u5b9e\u73b0\u5f02\u6b65\u8fed\u4ee3\u5668\u7684\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u5728\u5f02\u6b65\u63a8\u5bfc\u5f0f\u4e2d\u4f7f\u7528\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u4f7f\u7528\u5f02\u6b65\u751f\u6210\u5668\u7684\u5f02\u6b65\u5217\u8868\u63a8\u5bfc\u5f0f\nresult = [a async for a in agenerator]\n</code></pre> <p>An asynchronous comprehension allows a list, set, or dict to be created using the \u201casync for\u201d expression with an asynchronous iterable.</p> <p>We propose to allow using async for inside list, set and dict comprehensions.</p> <p>\u2014 PEP 530 \u2013 ASYNCHRONOUS COMPREHENSIONS</p> <p>For example:</p> <pre><code>...\n# async list comprehension with an async iterator\nresult = [a async for a in aiterable]\n</code></pre> <p>This will create and schedule coroutines or tasks as needed and yield their results into a list.</p> <p>Recall that the \u201casync for\u201d expression may only be used within coroutines and tasks.</p> <p>Also, recall that an asynchronous iterator is an iterator that yields awaitables.</p> <p>The \u201casync for\u201d expression allows the caller to traverse an asynchronous iterator of awaitables and retrieve the result from each.</p> <p>Internally, the async for loop will automatically resolve or await each awaitable, scheduling coroutines as needed.</p> <p>An async generator automatically implements the methods for the async iterator and may also be used in an asynchronous comprehension.</p> <p>For example:</p> <pre><code>...\n# async list comprehension with an async generator\nresult = [a async for a in agenerator]\n</code></pre>"},{"location":"asyncio/en/c19/#194-await-\u63a8\u5bfc\u5f0f","title":"19.4 Await \u63a8\u5bfc\u5f0f","text":"<p>19.4 Await Comprehensions</p> \u4e2d\u6587\u82f1\u6587 <p>\u201cawait\u201d \u8868\u8fbe\u5f0f\u4e5f\u53ef\u4ee5\u5728\u5217\u8868\u3001\u96c6\u5408\u6216\u5b57\u5178\u63a8\u5bfc\u4e2d\u4f7f\u7528\uff0c\u79f0\u4e3aawait \u63a8\u5bfc\u3002</p> <p>\u6211\u4eec\u5efa\u8bae\u5728\u5f02\u6b65\u548c\u540c\u6b65\u4e2d\u90fd\u4f7f\u7528await\u63a8\u5bfc\u6216\u5217\u8868\u63a8\u5bfc</p> <p>\u2014 PEP 530 \u2013 ASYNCHRONOUS COMPREHENSIONS</p> <p>\u4e0e\u5f02\u6b65\u7406\u89e3\u4e00\u6837\uff0c\u5b83\u53ea\u80fd\u5728\u5f02\u6b65\u534f\u7a0b\u6216\u4efb\u52a1\u4e2d\u4f7f\u7528\u3002</p> <p>\u8fd9\u5141\u8bb8\u901a\u8fc7\u6302\u8d77\u548c\u7b49\u5f85\u4e00\u7cfb\u5217\u53ef\u7b49\u5f85\u9879\u6765\u521b\u5efa\u6570\u636e\u7ed3\u6784\uff0c\u4f8b\u5982\u5217\u8868\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u5728\u53ef\u7b49\u5f85\u5bf9\u8c61\u5408\u96c6\u4e2d\u4f7f\u7528await\u5217\u8868\u63a8\u5bfc\nresults = [await a for a in awaitables]\n</code></pre> <p>\u8fd9\u5c06\u901a\u8fc7\u4f9d\u6b21\u7b49\u5f85\u6bcf\u4e2a\u53ef\u7b49\u5f85\u9879\u6765\u521b\u5efa\u7ed3\u679c\u5217\u8868\u3002</p> <p>\u5f53\u524d\u534f\u7a0b\u5c06\u88ab\u6302\u8d77\u4ee5\u987a\u5e8f\u6267\u884c\u53ef\u7b49\u5f85\u9879\uff0c\u8fd9\u4e0e\u4f7f\u7528 asyncio.gather() \u5e76\u53d1\u6267\u884c\u5b83\u4eec\u4e0d\u540c\uff0c\u5e76\u4e14\u53ef\u80fd\u66f4\u6162\u3002</p> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173\u5f02\u6b65\u63a8\u5bfc\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>Python \u4e2d\u7684\u5f02\u6b65\u63a8\u5bfc\u5f0f</li> </ul> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u63a2\u7d22\u5982\u4f55\u4f7f\u7528 asyncio \u4e2d\u7684\u5b50\u8fdb\u7a0b\u6765\u8fd0\u884c\u547d\u4ee4\u3002</p> <p>The \u201cawait\u201d expression may also be used within a list, set, or dict comprehension, referred to as an await comprehension.</p> <p>We propose to allow the use of await expressions in both asynchronous and synchronous comprehensions</p> <p>\u2014 PEP 530 \u2013 ASYNCHRONOUS COMPREHENSIONS</p> <p>Like an async comprehension, it may only be used within an asyncio coroutine or task.</p> <p>This allows a data structure, like a list, to be created by suspending and awaiting a series of awaitables.</p> <p>For example:</p> <pre><code>...\n# await list compression with a collection of awaitables\nresults = [await a for a in awaitables]\n</code></pre> <p>This will create a list of results by awaiting each awaitable in turn.</p> <p>The current coroutine will be suspended to execute awaitables sequentially, which is different and perhaps slower than executing them concurrently using asyncio.gather().</p> <p>You can learn more about async comprehensions in the tutorial:</p> <ul> <li>Asynchronous Comprehensions in Python</li> </ul> <p>Next, we will explore how to run commands using subprocesses from asyncio.</p>"},{"location":"asyncio/en/c2/","title":"2. Asyncio \u662f\u4ec0\u4e48","text":"<p>2. What is Asyncio</p> \u4e2d\u6587\u82f1\u6587 <p>\u5e7f\u4e49\u4e0a\uff0casyncio \u662f\u6307\u5728 Python \u4e2d\u4f7f\u7528\u534f\u7a0b\u5b9e\u73b0\u5f02\u6b65\u7f16\u7a0b\u7684\u80fd\u529b\u3002</p> <p>\u5177\u4f53\u6765\u8bf4\uff0c\u5b83\u6307\u7684\u662f\u4e24\u4e2a\u8981\u7d20\uff1a</p> <ol> <li>Python 3.4 \u4e2d\u5411 Python \u6807\u51c6\u5e93\u6dfb\u52a0\u4e86 \u201casyncio\u201d \u6a21\u5757\u3002</li> <li>Python 3.5 \u4e2d\u5411 Python \u8bed\u8a00\u6dfb\u52a0\u4e86 async/await \u8868\u8fbe\u5f0f\u3002</li> </ol> <p>\u8be5\u6a21\u5757\u7684\u589e\u52a0\u4ee5\u53ca\u5bf9\u8bed\u8a00\u7684\u66f4\u6539\u5171\u540c\u4fc3\u8fdb\u4e86\u652f\u6301\u57fa\u4e8e\u534f\u7a0b\u7684\u5e76\u53d1\u3001\u975e\u963b\u585e I/O \u548c\u5f02\u6b65\u7f16\u7a0b\u7684 Python \u7a0b\u5e8f\u7684\u5f00\u53d1\u3002</p> <p>Python 3.4 \u5f15\u5165\u4e86 asyncio \u5e93\uff0cPython 3.5 \u751f\u6210\u4e86 async \u548cawait \u5173\u952e\u5b57\u4ee5\u65b9\u4fbf\u5730\u4f7f\u7528\u5b83\u3002 \u8fd9\u4e9b\u65b0\u589e\u529f\u80fd\u5141\u8bb8\u6240\u8c13\u7684\u5f02\u6b65\u7f16\u7a0b\u3002</p> <p>\u2014 PAGE VII, USING ASYNCIO IN PYTHON, 2020.</p> <p>\u8ba9\u6211\u4eec\u4ece\u8bed\u8a00\u7684\u53d8\u5316\u5f00\u59cb\uff0c\u4ed4\u7ec6\u770b\u770b asyncio \u7684\u8fd9\u4e24\u4e2a\u65b9\u9762\u3002</p> <p>Broadly, asyncio refers to the ability to implement asynchronous programming in Python using coroutines.</p> <p>Specifically, it refers to two elements:</p> <ol> <li>The addition of the \u201casyncio\u201d module to the Python standard library in Python 3.4.</li> <li>The addition of async/await expressions to the Python language in Python 3.5.</li> </ol> <p>Together, the module and changes to the language facilitate the development of Python programs that support coroutine-based concurrency, non-blocking I/O, and asynchronous programming.</p> <p>Python 3.4 introduced the asyncio library, and Python 3.5 produced the async and await keywords to use it palatably. These new additions allow so-called asynchronous programming.</p> <p>\u2014 PAGE VII, USING ASYNCIO IN PYTHON, 2020.</p> <p>Let\u2019s take a closer look at these two aspects of asyncio, starting with the changes to the language.</p>"},{"location":"asyncio/en/c2/#21-\u5bf9-python-\u8fdb\u884c\u66f4\u6539\u4ee5\u6dfb\u52a0\u5bf9\u534f\u7a0b\u7684\u652f\u6301","title":"2.1 \u5bf9 Python \u8fdb\u884c\u66f4\u6539\u4ee5\u6dfb\u52a0\u5bf9\u534f\u7a0b\u7684\u652f\u6301","text":"<p>2.1 Changes to Python to add Support for Coroutines</p> \u4e2d\u6587\u82f1\u6587 <p>Python \u8bed\u8a00\u5df2\u8fdb\u884c\u66f4\u6539\uff0c\u4ee5\u901a\u8fc7\u6dfb\u52a0\u8868\u8fbe\u5f0f\u548c\u7c7b\u578b\u6765\u9002\u5e94 asyncio\u3002</p> <p>\u66f4\u5177\u4f53\u5730\u8bf4\uff0c\u5b83\u88ab\u66f4\u6539\u4e3a\u652f\u6301\u534f\u7a0b\u4f5c\u4e3a\u4e00\u6d41\u6982\u5ff5\u3002 \u53cd\u8fc7\u6765\uff0c\u534f\u7a0b\u662f\u5f02\u6b65\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u7684\u5e76\u53d1\u5355\u4f4d\u3002</p> <p>\u534f\u7a0b\u662f\u4e00\u4e2a\u53ef\u4ee5\u6682\u505c\u548c\u6062\u590d\u7684\u51fd\u6570\u3002</p> <p>\u534f\u7a0b(coroutine): \u534f\u7a0b\u662f\u66f4\u901a\u7528\u7684\u5b50\u4f8b\u7a0b\u5f62\u5f0f\u3002 \u5b50\u7a0b\u5e8f\u5728\u67d0\u4e00\u70b9\u8fdb\u5165\u5e76\u5728\u53e6\u4e00\u70b9\u9000\u51fa\u3002 \u534f\u7a0b\u53ef\u4ee5\u5728\u8bb8\u591a\u4e0d\u540c\u7684\u70b9\u8fdb\u5165\u3001\u9000\u51fa\u548c\u6062\u590d\u3002</p> <p>\u2014 PYTHON GLOSSARY</p> <p>\u534f\u7a0b\u53ef\u4ee5\u901a\u8fc7 \u201casync def\u201d \u8868\u8fbe\u5f0f\u6765\u5b9a\u4e49\u3002 \u5b83\u53ef\u4ee5\u63a5\u53d7\u53c2\u6570\u5e76\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u5c31\u50cf\u51fd\u6570\u4e00\u6837\u3002</p> <p>\u4f8b\u5982:</p> <pre><code># \u5b9a\u4e49\u4e00\u4e2a\u534f\u7a0b\nasync def custom_coro():\n    # ...\n</code></pre> <p>\u8c03\u7528\u534f\u7a0b\u51fd\u6570\u4f1a\u521b\u5efa\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61\uff0c\u8fd9\u662f\u4e00\u4e2a\u65b0\u7c7b\u3002 \u5b83\u4e0d\u6267\u884c\u534f\u7a0b\u51fd\u6570\u3002</p> <pre><code>...\n# \u521b\u5efa\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61\ncoro = custom_coro()\n</code></pre> <p>\u4e00\u4e2a\u534f\u7a0b\u53ef\u4ee5\u901a\u8fc7 await \u8868\u8fbe\u5f0f\u6267\u884c\u53e6\u4e00\u4e2a\u534f\u7a0b\u3002</p> <p>\u8fd9\u4f1a\u6302\u8d77\u8c03\u7528\u8005\u5e76\u5b89\u6392\u76ee\u6807\u6267\u884c\u3002</p> <pre><code>...\n# \u6682\u505c\u5e76\u5b89\u6392\u76ee\u6807\nawait custom_coro()\n</code></pre> <p>\u5f02\u6b65\u8fed\u4ee3\u5668\u662f\u4ea7\u751f\u53ef\u7b49\u5f85\u5bf9\u8c61\u7684\u8fed\u4ee3\u5668\u3002</p> <p>\u5f02\u6b65\u8fed\u4ee3\u5668\uff08asynchronous iterator\uff09: \u5b9e\u73b0 __aiter__() \u548c __anext__() \u65b9\u6cd5\u7684\u5bf9\u8c61\u3002 __anext__ \u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u53ef\u7b49\u5f85\u7684\u5bf9\u8c61\u3002 async for \u89e3\u6790\u5f02\u6b65\u8fed\u4ee3\u5668\u7684 __anext__() \u65b9\u6cd5\u8fd4\u56de\u7684\u7b49\u5f85\u5bf9\u8c61\uff0c\u76f4\u5230\u5f15\u53d1 StopAsyncIteration \u5f02\u5e38\u3002</p> <p>\u2014 PYTHON GLOSSARY</p> <p>\u53ef\u4ee5\u4f7f\u7528 \u201casync for\u201d \u8868\u8fbe\u5f0f\u904d\u5386\u5f02\u6b65\u8fed\u4ee3\u5668\u3002</p> <pre><code>...\n# \u904d\u5386\u5f02\u6b65\u8fed\u4ee3\u5668\nasync for item in async_iterator:\n    print(item)\n</code></pre> <p>\u8fd9\u4e0d\u4f1a\u5e76\u884c\u6267\u884c for \u5faa\u73af\u3002</p> <p>\u76f8\u53cd\uff0c\u6267\u884c for \u5faa\u73af\u7684\u8c03\u7528\u534f\u7a0b\u5c06\u6302\u8d77\u5e76\u5728\u5185\u90e8\u7b49\u5f85\u8fed\u4ee3\u5668\u751f\u6210\u7684\u6bcf\u4e2a\u53ef\u7b49\u5f85\u9879\u3002</p> <p>\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u662f\u53ef\u4ee5\u7b49\u5f85\u8fdb\u5165\u548c\u9000\u51fa\u65b9\u6cd5\u7684\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002</p> <p>\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u662f\u80fd\u591f\u5728\u5176\u8fdb\u5165\u548c\u9000\u51fa\u65b9\u6cd5\u4e2d\u6682\u505c\u6267\u884c\u7684\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002</p> <p>\u2014 ASYNCHRONOUS CONTEXT MANAGERS AND \u201cASYNC WITH\u201d</p> <p>\u201casync with\u201d \u8868\u8fbe\u5f0f\u7528\u4e8e\u521b\u5efa\u548c\u4f7f\u7528\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002</p> <p>\u5728\u8fdb\u5165\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5757\u4e4b\u524d\uff0c\u8c03\u7528\u534f\u7a0b\u5c06\u6302\u8d77\u5e76\u7b49\u5f85\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c\u5728\u79bb\u5f00\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5757\u65f6\u4e5f\u662f\u5982\u6b64\u3002</p> <p>\u8fd9\u4e9b\u662f Python \u8bed\u8a00\u4e3a\u652f\u6301\u534f\u7a0b\u800c\u8fdb\u884c\u7684\u4e3b\u8981\u66f4\u6539\u7684\u603b\u548c\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u770b\u770b asyncio \u6a21\u5757\u3002</p> <p>The Python language was changed to accommodate asyncio with the addition of expressions and types.</p> <p>More specifically, it was changed to support coroutines as first-class concepts. In turn, coroutines are the unit of concurrency used in asyncio programs.</p> <p>A coroutine is a function that can be suspended and resumed.</p> <p>coroutine: Coroutines are a more generalized form of subroutines. Subroutines are entered at one point and exited at another point. Coroutines can be entered, exited, and resumed at many different points.</p> <p>\u2014 PYTHON GLOSSARY</p> <p>A coroutine can be defined via the \u201casync def\u201d expression. It can take arguments and return a value, just like a function.</p> <p>For example:</p> <pre><code># define a coroutine\nasync def custom_coro():\n    # ...\n</code></pre> <p>Calling a coroutine function will create a coroutine object, this is a new class. It does not execute the coroutine function.</p> <pre><code>...\n# create a coroutine object\ncoro = custom_coro()\n</code></pre> <p>A coroutine can execute another coroutine via the await expression.</p> <p>This suspends the caller and schedules the target for execution.</p> <pre><code>...\n# suspend and schedule the target\nawait custom_coro()\n</code></pre> <p>An asynchronous iterator is an iterator that yields awaitables.</p> <p>asynchronous iterator: An object that implements the __aiter__() and __anext__() methods. __anext__ must return an awaitable object. async for resolves the awaitables returned by an asynchronous iterator\u2019s __anext__() method until it raises a StopAsyncIteration exception.</p> <p>\u2014 PYTHON GLOSSARY</p> <p>An asynchronous iterator can be traversed using the \u201casync for\u201d expression.</p> <pre><code>...\n# traverse an asynchronous iterator\nasync for item in async_iterator:\n    print(item)\n</code></pre> <p>This does not execute the for-loop in parallel.</p> <p>Instead, the calling coroutine that executes the for loop will suspend and internally await each awaitable yielded from the iterator.</p> <p>An asynchronous context manager is a context manager that can await the enter and exit methods.</p> <p>An asynchronous context manager is a context manager that is able to suspend execution in its enter and exit methods.</p> <p>\u2014 ASYNCHRONOUS CONTEXT MANAGERS AND \u201cASYNC WITH\u201d</p> <p>The \u201casync with\u201d expression is for creating and using asynchronous context managers.</p> <p>The calling coroutine will suspend and await the context manager before entering the block for the context manager, and similarly when leaving the context manager block.</p> <p>These are the sum of the major changes to Python language to support coroutines.</p> <p>Next, let\u2019s look at the asyncio module.</p>"},{"location":"asyncio/en/c2/#22-asyncio-\u6a21\u5757","title":"2.2 asyncio \u6a21\u5757","text":"<p>2.2 The asyncio Module</p> \u4e2d\u6587\u82f1\u6587 <p>\u201casyncio\u201d\u6a21\u5757\u63d0\u4f9b\u4e86\u4f7f\u7528\u5f02\u6b65\u7f16\u7a0b\u8303\u4f8b\u5f00\u53d1\u57fa\u4e8e\u534f\u7a0b\u7684\u7a0b\u5e8f\u7684\u51fd\u6570\u548c\u5bf9\u8c61\u3002</p> <p>\u5177\u4f53\u6765\u8bf4\uff0c\u5b83\u652f\u6301\u5e26\u6709\u5b50\u8fdb\u7a0b\uff08\u7528\u4e8e\u6267\u884c\u547d\u4ee4\uff09\u548c\u6d41\uff08\u7528\u4e8e TCP \u5957\u63a5\u5b57\u7f16\u7a0b\uff09\u7684\u975e\u963b\u585e I/O\u3002</p> <p>asyncio \u662f\u4e00\u4e2a\u4f7f\u7528 async/await \u8bed\u6cd5\u7f16\u5199\u5e76\u53d1\u4ee3\u7801\u7684\u5e93\u3002</p> <p>\u2014 ASYNCIO \u2014 ASYNCHRONOUS I/O</p> <p>asyncio \u6a21\u5757\u7684\u6838\u5fc3\u662f\u4e8b\u4ef6\u5faa\u73af\u3002</p> <p>\u8fd9\u662f\u8fd0\u884c\u57fa\u4e8e\u534f\u7a0b\u7684\u7a0b\u5e8f\u5e76\u5b9e\u73b0\u534f\u7a0b\u4e4b\u95f4\u534f\u4f5c\u591a\u4efb\u52a1\u7684\u673a\u5236\u3002</p> <p>\u4e8b\u4ef6\u5faa\u73af\u662f\u6bcf\u4e2a\u5f02\u6b65\u5e94\u7528\u7a0b\u5e8f\u7684\u6838\u5fc3\u3002 \u4e8b\u4ef6\u5faa\u73af\u8fd0\u884c\u5f02\u6b65\u4efb\u52a1\u548c\u56de\u8c03\u3001\u6267\u884c\u7f51\u7edc IO \u64cd\u4f5c\u5e76\u8fd0\u884c\u5b50\u8fdb\u7a0b\u3002</p> <p>\u2014 ASYNCIO EVENT LOOP</p> <p>\u8be5\u6a21\u5757\u63d0\u4f9b\u9ad8\u7ea7\u548c\u4f4e\u7ea7 API\u3002</p> <p>\u9ad8\u7ea7 API \u9002\u5408\u6211\u4eec Python \u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\u3002 \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4f4e\u7ea7 API \u662f\u4e3a\u6846\u67b6\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u7684\uff0c\u800c\u4e0d\u662f\u6211\u4eec\u3002</p> <p>\u5927\u591a\u6570\u7528\u4f8b\u90fd\u53ef\u4ee5\u4f7f\u7528\u9ad8\u7ea7 API \u6765\u6ee1\u8db3\uff0c\u8be5 API \u63d0\u4f9b\u4e86\u7528\u4e8e\u5904\u7406\u534f\u7a0b\u3001\u6d41\u3001\u540c\u6b65\u57fa\u5143\u3001\u5b50\u8fdb\u7a0b\u548c\u961f\u5217\u4ee5\u5728\u534f\u7a0b\u4e4b\u95f4\u5171\u4eab\u6570\u636e\u7684\u5b9e\u7528\u7a0b\u5e8f\u3002</p> <p>\u8f83\u4f4e\u7ea7\u522b\u7684 API \u4e3a\u9ad8\u7ea7 API \u63d0\u4f9b\u57fa\u7840\uff0c\u5305\u62ec\u4e8b\u4ef6\u5faa\u73af\u3001\u4f20\u8f93\u534f\u8bae\u3001\u7b56\u7565\u7b49\u7684\u5185\u90e8\u7ed3\u6784\u3002</p> <p>\u2026 \u6709\u4f9b\u5e93\u548c\u6846\u67b6\u5f00\u53d1\u4eba\u5458\u4f7f\u7528\u7684\u4f4e\u7ea7 API</p> <p>\u2014 ASYNCIO \u2014 ASYNCHRONOUS I/O</p> <p>\u73b0\u5728\u6211\u4eec\u5927\u81f4\u4e86\u89e3\u4e86 asyncio \u662f\u4ec0\u4e48\uff0c\u5e76\u4e14\u5b83\u7528\u4e8e\u5f02\u6b65\u7f16\u7a0b\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u63a2\u8ba8\u4e00\u4e0b\u4f55\u65f6\u5e94\u8be5\u8003\u8651\u5728 Python \u7a0b\u5e8f\u4e2d\u4f7f\u7528 asyncio\u3002</p> <p>\u5bf9 asyncio \u6a21\u5757 API \u611f\u5230\u56f0\u60d1\u5417\uff1f</p> <p>\u4e0b\u8f7d\u6211\u7684\u514d\u8d39 PDF \u5907\u5fd8\u5355</p> <p>The \u201casyncio\u201d module provides functions and objects for developing coroutine-based programs using the asynchronous programming paradigm.</p> <p>Specifically, it supports non-blocking I/O with subprocesses (for executing commands) and with streams (for TCP socket programming).</p> <p>asyncio is a library to write concurrent code using the async/await syntax.</p> <p>\u2014 ASYNCIO \u2014 ASYNCHRONOUS I/O</p> <p>Central to the asyncio module is the event loop.</p> <p>This is the mechanism that runs a coroutine-based program and implements cooperative multitasking between coroutines.</p> <p>The event loop is the core of every asyncio application. Event loops run asynchronous tasks and callbacks, perform network IO operations, and run subprocesses.</p> <p>\u2014 ASYNCIO EVENT LOOP</p> <p>The module provides both a high-level and low-level API.</p> <p>The high-level API is for us Python application developers. The low-level API is for framework developers, not us, in most cases.</p> <p>Most use cases are satisfied using the high-level API that provides utilities for working with coroutines, streams, synchronization primitives, subprocesses, and queues for sharing data between coroutines.</p> <p>The lower-level API provides the foundation for the high-level API and includes the internals of the event loop, transport protocols, policies, and more.</p> <p>\u2026 there are low-level APIs for library and framework developers</p> <p>\u2014 ASYNCIO \u2014 ASYNCHRONOUS I/O</p> <p>Now that we know what asyncio is, broadly, and that it is for Asynchronous programming.</p> <p>Next, let\u2019s explore when we should consider using asyncio in our Python programs.</p> <p>Confused by the asyncio module API?</p> <p>Download my FREE PDF cheat sheet</p>"},{"location":"asyncio/en/c20/","title":"20. \u5728\u975e\u963b\u585e\u5b50\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u547d\u4ee4","text":"<p>20. Run Commands in Non-Blocking Subprocesses</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u4ece<code>asyncio</code>\u6267\u884c\u547d\u4ee4\u3002</p> <p>\u547d\u4ee4\u5c06\u5728\u5b50\u8fdb\u7a0b\u4e2d\u8fd0\u884c\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u975e\u963b\u585eI/O\u5bf9\u5176\u8fdb\u884c\u8bfb\u5199\u3002</p> <p>\u8ba9\u6211\u4eec\u66f4\u4ed4\u7ec6\u5730\u770b\u770b\u3002</p> <p>We can execute commands from asyncio.</p> <p>The command will run in a subprocess that we can write to and read from using non-blocking I/O.</p> <p>Let\u2019s take a closer look.</p>"},{"location":"asyncio/en/c20/#201-\u4ec0\u4e48\u662f-asynciosubprocessprocess","title":"20.1 \u4ec0\u4e48\u662f asyncio.subprocess.Process","text":"<p>20.1 What is asyncio.subprocess.Process</p> \u4e2d\u6587\u82f1\u6587 <p>asyncio\u901a\u8fc7asyncio.subprocess.Process \u7c7b\u63d0\u4f9b\u4e86\u5bf9\u4e8e\u8fd0\u884c\u5b50\u8fdb\u7a0b\u7684\u652f\u6301\u548c\u8868\u793a\u3002</p> <p>\u5b83\u63d0\u4f9b\u4e86 asyncio \u7a0b\u5e8f\u4e2d\u5b50\u8fdb\u7a0b\u7684\u53e5\u67c4\uff0c\u5141\u8bb8\u5bf9\u5176\u6267\u884c\u64cd\u4f5c\uff0c\u4f8b\u5982\u7b49\u5f85\u548c\u7ec8\u6b62\u5b83\u3002</p> <p>Process\u662f\u4e00\u4e2a\u9ad8\u7ea7\u5305\u88c5\u8fc7\u540e\u7684\u7c7b\uff0c\u5141\u8bb8\u4e0e\u5b50\u8fdb\u7a0b\u901a\u4fe1\u5e76\u76d1\u89c6\u5176\u5b8c\u6210\u60c5\u51b5\u3002</p> <p>\u2014 INTERACTING WITH SUBPROCESSES</p> <p>\u8be5 API \u4e0e multiprocessing.Process \u7c7b\u975e\u5e38\u76f8\u4f3c\uff0c\u4e5f\u8bb8\u4e0e subprocess.Popen \u7c7b\u66f4\u65b0\u76f8\u4f3c\u3002</p> <p>\u5177\u4f53\u6765\u8bf4\uff0c\u5b83\u4e0e subprocess.Popen \u5171\u4eab wait()\u3001communicate() \u548c send_signal() \u7b49\u65b9\u6cd5\u4ee5\u53ca <code>stdin</code>\u3001<code>stdout</code> \u548c <code>stderr</code> \u7b49\u5c5e\u6027\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86 asyncio.subprocess.Process \u7c7b\u662f\u4ec0\u4e48\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u5728 asyncio \u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5b83\u3002</p> <p>\u6211\u4eec\u4e0d\u76f4\u63a5\u521b\u5efa asyncio.subprocess.Process\u3002</p> <p>\u76f8\u53cd\uff0c\u5f53\u5728 asyncio \u7a0b\u5e8f\u4e2d\u6267\u884c\u5b50\u8fdb\u7a0b\u65f6\uff0c\u4f1a\u4e3a\u6211\u4eec\u521b\u5efa\u8be5\u7c7b\u7684\u5b9e\u4f8b\u3002</p> <p>\u5305\u88c5\u7531 create_subprocess_exec() \u548c create_subprocess_shell() \u51fd\u6570\u521b\u5efa\u7684\u64cd\u4f5c\u7cfb\u7edf\u8fdb\u7a0b\u7684\u5bf9\u8c61\u3002</p> <p>\u2014 INTERACTING WITH SUBPROCESSES</p> <p>\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5c06\u5916\u90e8\u7a0b\u5e8f\u4f5c\u4e3a\u5b50\u8fdb\u7a0b\u6267\u884c\u5e76\u83b7\u53d6 Process \u5b9e\u4f8b\uff0c\u5b83\u4eec\u662f\uff1a</p> <ul> <li>asyncio.create_subprocess_exec() \u7528\u4e8e\u76f4\u63a5\u8fd0\u884c\u547d\u4ee4\u3002</li> <li>asyncio.create_subprocess_shell() \u7528\u4e8e\u901a\u8fc7 shell \u8fd0\u884c\u547d\u4ee4\u3002</li> </ul> <p>\u8ba9\u6211\u4eec\u4f9d\u6b21\u770b\u4e00\u4e0b\u6bcf\u4e2a\u4f8b\u5b50\u3002</p> <p>The asyncio.subprocess.Process class provides a representation of a subprocess run by asyncio.</p> <p>It provides a handle on a subprocess in asyncio programs, allowing actions to be performed on it, such as waiting and terminating it.</p> <p>Process is a high-level wrapper that allows communicating with subprocesses and watching for their completion.</p> <p>\u2014 INTERACTING WITH SUBPROCESSES</p> <p>The API is very similar to the multiprocessing.Process class and perhaps more so with the subprocess.Popen class.</p> <p>Specifically, it shares methods such as wait(), communicate(), and send_signal() and attributes such as stdin, stdout, and stderr with the subprocess.Popen.</p> <p>Now that we know what the asyncio.subprocess.Process class is, let\u2019s look at how we might use it in our asyncio programs.</p> <p>We do not create a asyncio.subprocess.Process directly.</p> <p>Instead, an instance of the class is created for us when executing a subprocess in an asyncio program.</p> <p>An object that wraps OS processes created by the create_subprocess_exec() and create_subprocess_shell() functions.</p> <p>\u2014 INTERACTING WITH SUBPROCESSES</p> <p>There are two ways to execute an external program as a subprocess and acquire a Process instance, they are:</p> <ul> <li>asyncio.create_subprocess_exec() for running commands directly.</li> <li>asyncio.create_subprocess_shell() for running commands via the shell.</li> </ul> <p>Let\u2019s look at examples of each in turn.</p>"},{"location":"asyncio/en/c20/#202-\u5982\u4f55\u76f4\u63a5\u8fd0\u884c\u547d\u4ee4","title":"20.2 \u5982\u4f55\u76f4\u63a5\u8fd0\u884c\u547d\u4ee4","text":"<p>20.2 How to Run a Command Directly</p> \u4e2d\u6587\u82f1\u6587 <p>command \u662f\u5728\u547d\u4ee4\u884c\uff08\u7ec8\u7aef\u6216\u547d\u4ee4\u63d0\u793a\u7b26\uff09\u4e0a\u6267\u884c\u7684\u7a0b\u5e8f\u3002 \u8fd9\u662f\u53e6\u4e00\u4e2a\u76f4\u63a5\u8fd0\u884c\u7684\u7a0b\u5e8f\u3002</p> <p>Linux \u548c macOS \u4e0a\u7684\u5e38\u89c1\u793a\u4f8b\u53ef\u80fd\u662f\uff1a</p> <ul> <li>\u2018ls\u2018 \u5217\u51fa\u76ee\u5f55\u7684\u5185\u5bb9</li> <li>\u2018cat\u2018 \u62a5\u544a\u6587\u4ef6\u7684\u5185\u5bb9</li> <li>\u2018date\u2018 \u62a5\u544a\u65e5\u671f</li> <li>\u2018echo\u2018 \u62a5\u544a\u4e00\u4e2a\u5b57\u7b26\u4e32</li> <li>\u2018sleep\u2018 \u7761\u7720\u51e0\u79d2\u949f</li> </ul> <p>\u7b49\u7b49\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 create_subprocess_exec() \u51fd\u6570\u4ece asyncio \u7a0b\u5e8f\u6267\u884c\u547d\u4ee4\u3002</p> <p>asyncio.create_subprocess_exec() \u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u547d\u4ee4\u5e76\u76f4\u63a5\u6267\u884c\u5b83\u3002</p> <p>\u8fd9\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u5728\u5b50\u8fdb\u7a0b\u4e2d\u6267\u884c\u547d\u4ee4\uff0c\u5e76\u5141\u8bb8\u5f02\u6b65\u534f\u7a0b\u8bfb\u53d6\u3001\u5199\u5165\u548c\u7b49\u5f85\u5b83\u3002</p> <p>\u56e0\u4e3a\u6240\u6709 asyncio \u5b50\u8fdb\u7a0b\u51fd\u6570\u90fd\u662f\u5f02\u6b65\u7684\uff0c\u5e76\u4e14 asyncio \u63d0\u4f9b\u4e86\u8bb8\u591a\u5de5\u5177\u6765\u4f7f\u7528\u8fd9\u4e9b\u51fd\u6570\uff0c\u6240\u4ee5\u5f88\u5bb9\u6613\u5e76\u884c\u6267\u884c\u548c\u76d1\u89c6\u591a\u4e2a\u5b50\u8fdb\u7a0b\u3002</p> <p>\u2014 ASYNCIO SUBPROCESSES</p> <p>\u4e0e asyncio.create_subprocess_shell() \u51fd\u6570\u4e0d\u540c\uff0casyncio.create_subprocess_exec() \u4e0d\u4f1a\u4f7f\u7528 shell \u6267\u884c\u547d\u4ee4\u3002</p> <p>\u8fd9\u610f\u5473\u7740 shell \u63d0\u4f9b\u7684\u529f\u80fd\uff08\u4f8b\u5982 shell \u53d8\u91cf\u3001\u811a\u672c\u548c\u901a\u914d\u7b26\uff09\u5728\u6267\u884c\u547d\u4ee4\u65f6\u4e0d\u53ef\u7528\u3002</p> <p>\u8fd9\u4e5f\u610f\u5473\u7740\u6267\u884c\u547d\u4ee4\u53ef\u80fd\u66f4\u5b89\u5168\uff0c\u56e0\u4e3a\u6ca1\u6709\u673a\u4f1a\u8fdb\u884cshell\u6ce8\u5165\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86 asyncio.create_subprocess_exec() \u7684\u4f5c\u7528\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528\u5b83\u3002</p> <p>A command is a program executed on the command line (terminal or command prompt). It is another program that is run directly.</p> <p>Common examples on Linux and macOS might be:</p> <ul> <li>\u2018ls\u2018 to list the contents of a directory</li> <li>\u2018cat\u2018 to report the content of a file</li> <li>\u2018date\u2018 to report the date</li> <li>\u2018echo\u2018 to report back a string</li> <li>\u2018sleep\u2018 to sleep for a number of seconds</li> </ul> <p>And so on.</p> <p>We can execute a command from an asyncio program via the create_subprocess_exec() function.</p> <p>The asyncio.create_subprocess_exec() function takes a command and executes it directly.</p> <p>This is helpful as it allows the command to be executed in a subprocess and for asyncio coroutines to read, write, and wait for it.</p> <p>Because all asyncio subprocess functions are asynchronous and asyncio provides many tools to work with such functions, it is easy to execute and monitor multiple subprocesses in parallel.</p> <p>\u2014 ASYNCIO SUBPROCESSES</p> <p>Unlike the asyncio.create_subprocess_shell() function, the asyncio.create_subprocess_exec() will not execute the command using the shell.</p> <p>This means that the capabilities provided by the shell, such as shell variables, scripting, and wildcards are not available when executing the command.</p> <p>It also means that executing the command may be more secure as there is no opportunity for a shell injection.</p> <p>Now that we know what asyncio.create_subprocess_exec() does, let\u2019s look at how to use it.</p>"},{"location":"asyncio/en/c20/#2021-\u5982\u4f55\u4f7f\u7528-asyncio-\u7684-create_subprocess_exec","title":"20.2.1 \u5982\u4f55\u4f7f\u7528 Asyncio \u7684 create_subprocess_exec()","text":"<p>20.2.1 How to Use Asyncio create_subprocess_exec()</p> \u4e2d\u6587\u82f1\u6587 <p>asyncio.create_subprocess_exec() \u51fd\u6570\u5c06\u5728\u5b50\u8fdb\u7a0b\u4e2d\u6267\u884c\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u547d\u4ee4\u3002</p> <p>\u5b83\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u5b50\u8fdb\u7a0b\u7684 asyncio.subprocess.Process \u5bf9\u8c61\u3002</p> <p>Process\u662f\u4e00\u4e2a\u9ad8\u7ea7\u5305\u88c5\u5668\uff0c\u5141\u8bb8\u4e0e\u5b50\u8fdb\u7a0b\u901a\u4fe1\u5e76\u76d1\u89c6\u5176\u5b8c\u6210\u60c5\u51b5\u3002</p> <p>\u2014 INTERACTING WITH SUBPROCESSES</p> <p>create_subprocess_exec() \u51fd\u6570\u662f\u4e00\u4e2a\u534f\u7a0b\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5fc5\u987b\u7b49\u5f85\u5b83\u3002 \u5b83\u4f1a\u5728\u5b50\u8fdb\u7a0b\u542f\u52a8\u540e\u8fd4\u56de\uff0c\u800c\u4e0d\u662f\u5728\u5b50\u8fdb\u7a0b\u5b8c\u6210\u65f6\u8fd4\u56de\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u5728\u5b50\u8fdb\u7a0b\u4e2d\u6267\u884c\u547d\u4ee4\nprocess = await asyncio.create_subprocess_exec('ls')\n</code></pre> <p>\u6b63\u5728\u6267\u884c\u7684\u547d\u4ee4\u7684\u53c2\u6570\u5fc5\u987b\u4f5c\u4e3a create_subprocess_exec() \u51fd\u6570\u7684\u540e\u7eed\u53c2\u6570\u63d0\u4f9b\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u5728\u5b50\u8fdb\u7a0b\u4e2d\u6267\u884c\u5e26\u53c2\u6570\u7684\u547d\u4ee4\nprocess = await asyncio.create_subprocess_exec('ls', '-l')\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7b49\u5f85 wait() \u65b9\u6cd5\u6765\u7b49\u5f85\u5b50\u8fdb\u7a0b\u5b8c\u6210\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u7b49\u5f85\u5b50\u8fdb\u7a0b\u7ec8\u6b62\nawait process.wait()\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 terminate() \u6216 kill() \u65b9\u6cd5\u76f4\u63a5\u505c\u6b62\u5b50\u8fdb\u7a0b\uff0c\u8fd9\u5c06\u5728\u5b50\u8fdb\u7a0b\u4e2d\u5f15\u53d1\u4e00\u4e2a\u4fe1\u53f7\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u7ec8\u6b62\u5b50\u8fdb\u7a0b\nprocess.terminate()\n</code></pre> <p>\u547d\u4ee4\u7684\u8f93\u5165\u548c\u8f93\u51fa\u5c06\u7531 stdin\u3001stderr \u548c stdout \u5904\u7406\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u8ba9 asyncio \u7a0b\u5e8f\u5904\u7406\u5b50\u8fdb\u7a0b\u7684\u8f93\u5165\u6216\u8f93\u51fa\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u8f93\u5165\u6216\u8f93\u51fa\u6d41\u5e76\u6307\u5b9a\u8981\u91cd\u5b9a\u5411\u7684\u5e38\u91cf\u6765\u5b9e\u73b0\uff0c\u4f8b\u5982 asyncio.subprocess.PIPE\u3002</p> <p>\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u547d\u4ee4\u7684\u8f93\u51fa\u91cd\u5b9a\u5411\u5230 asyncio \u7a0b\u5e8f\uff1a</p> <pre><code>...\n# \u542f\u52a8\u5b50\u8fdb\u7a0b\u5e76\u91cd\u5b9a\u5411\u8f93\u51fa\nprocess = await asyncio.create_subprocess_exec('ls', stdout=asyncio.subprocess.PIPE)\n</code></pre> <p>\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7asyncio.subprocess.Process\u5b9e\u4f8b\u901a\u8fc7communicate()\u65b9\u6cd5\u8bfb\u53d6\u7a0b\u5e8f\u7684\u8f93\u51fa\u3002</p> <p>\u8be5\u65b9\u6cd5\u662f\u4e00\u4e2a\u534f\u7a0b\uff0c\u5fc5\u987b\u7b49\u5f85\u3002 \u5b83\u7528\u4e8e\u901a\u8fc7\u5b50\u8fdb\u7a0b\u53d1\u9001\u548c\u63a5\u6536\u6570\u636e\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u4ece\u5b50\u8fdb\u7a0b\u8bfb\u53d6\u6570\u636e\nline = process.communicate()\n</code></pre> <p>\u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7 communicate() \u65b9\u6cd5\u901a\u8fc7\u8bbe\u7f6e \u201cinput\u201d \u53c2\u6570\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\u5c06\u6570\u636e\u53d1\u9001\u5230\u5b50\u8fdb\u7a0b\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u542f\u52a8\u5b50\u8fdb\u7a0b\u5e76\u91cd\u5b9a\u5411\u8f93\u5165\nprocess = await asyncio.create_subprocess_exec('ls', stdin=asyncio.subprocess.PIPE)\n# \u5411\u5b50\u8fdb\u7a0b\u53d1\u9001\u6570\u636e\nprocess.communicate(input=b'Hello\\n')\n</code></pre> <p>\u5728\u80cc\u540e\uff0c asyncio.subprocess.PIPE \u5c06\u5b50\u8fdb\u7a0b\u914d\u7f6e\u4e3a\u6307\u5411 StreamReader \u6216 StreamWriter \u7528\u4e8e\u5411\u5b50\u8fdb\u7a0b\u53d1\u9001\u6570\u636e\u6216\u4ece\u5b50\u8fdb\u7a0b\u53d1\u9001\u6570\u636e\uff0c\u4ee5\u53ca communicate() \u65b9\u6cd5 \u5c06\u4ece\u914d\u7f6e\u7684\u8bfb\u53d6\u5668\u8bfb\u53d6\u6216\u5199\u5165\u5b57\u8282\u3002</p> <p>\u5982\u679c PIPE \u4f20\u9012\u7ed9 stdin \u53c2\u6570\uff0c\u5219 Process.stdin \u5c5e\u6027\u5c06\u6307\u5411 StreamWriter \u5b9e\u4f8b\u3002 \u5982\u679c PIPE \u4f20\u9012\u7ed9 stdout \u6216 stderr \u53c2\u6570\uff0c\u5219 Process.stdout \u548c Process.stderr \u5c5e\u6027\u5c06\u6307\u5411 StreamReader \u5b9e\u4f8b\u3002</p> <p>\u2014 ASYNCIO SUBPROCESSES</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b50\u8fdb\u7a0b\u901a\u8fc7 <code>stdin</code>\u3001<code>stdout</code> \u548c <code>stderr</code> \u5c5e\u6027\u76f4\u63a5\u4e0e StreamReader \u6216 StreamWriter \u4ea4\u4e92\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u4ece\u5b50\u8fdb\u7a0b\u8f93\u51fa\u6d41\u4e2d\u8bfb\u53d6\u4e00\u884c\nline = await process.stdout.readline()\n</code></pre> <p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u5982\u4f55\u4f7f\u7528 create_subprocess_exec() \u51fd\u6570\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e9b\u6709\u6548\u7684\u793a\u4f8b\u3002</p> <p>The asyncio.create_subprocess_exec() function will execute a given string command in a subprocess.</p> <p>It returns a asyncio.subprocess.Process object that represents the subprocess.</p> <p>Process is a high-level wrapper that allows communicating with subprocesses and watching for their completion.</p> <p>\u2014 INTERACTING WITH SUBPROCESSES</p> <p>The create_subprocess_exec() function is a coroutine, which means we must await it. It will return once the subprocess has been started, not when the subprocess is finished.</p> <p>For example:</p> <pre><code>...\n# execute a command in a subprocess\nprocess = await asyncio.create_subprocess_exec('ls')\n</code></pre> <p>Arguments to the command being executed must be provided as subsequent arguments to the create_subprocess_exec() function.</p> <p>For example:</p> <pre><code>...\n# execute a command with arguments in a subprocess\nprocess = await asyncio.create_subprocess_exec('ls', '-l')\n</code></pre> <p>We can wait for the subprocess to finish by awaiting the wait() method.</p> <p>For example:</p> <pre><code>...\n# wait for the subprocess to terminate\nawait process.wait()\n</code></pre> <p>We can stop the subprocess directly by calling the terminate() or kill() methods, which will raise a signal in the subprocess.</p> <p>For example:</p> <pre><code>...\n# terminate the subprocess\nprocess.terminate()\n</code></pre> <p>The input and output of the command will be handled by stdin, stderr, and stdout.</p> <p>We can have the asyncio program handle the input or output for the subprocess.</p> <p>This can be achieved by specifying the input or output stream and specifying a constant to redirect, such as asyncio.subprocess.PIPE.</p> <p>For example, we can redirect the output of a command to the asyncio program:</p> <pre><code>...\n# start a subprocess and redirect output\nprocess = await asyncio.create_subprocess_exec('ls', stdout=asyncio.subprocess.PIPE)\n</code></pre> <p>We can then read the output of the program via the asyncio.subprocess.Process instance via the communicate() method.</p> <p>This method is a coroutine and must be awaited. It is used to both send and receive data with the subprocess.</p> <p>For example:</p> <pre><code>...\n# read data from the subprocess\nline = process.communicate()\n</code></pre> <p>We can also send data to the subprocess via the communicate() method by setting the \u201cinput\u201d argument in bytes.</p> <p>For example:</p> <pre><code>...\n# start a subprocess and redirect input\nprocess = await asyncio.create_subprocess_exec('ls', stdin=asyncio.subprocess.PIPE)\n# send data to the subprocess\nprocess.communicate(input=b'Hello\\n')\n</code></pre> <p>Behind the scenes the asyncio.subprocess.PIPE configures the subprocess to point to a StreamReader or StreamWriter for sending data to or from the subprocess, and the communicate() method will read or write bytes from the configured reader.</p> <p>If PIPE is passed to stdin argument, the Process.stdin attribute will point to a StreamWriter instance. If PIPE is passed to stdout or stderr arguments, the Process.stdout and Process.stderr attributes will point to StreamReader instances.</p> <p>\u2014 ASYNCIO SUBPROCESSES</p> <p>We can interact with the StreamReader or StreamWriter directly via the subprocess via the stdin, stdout, and stderr attributes.</p> <p>For example:</p> <pre><code>...\n# read a line from the subprocess output stream\nline = await process.stdout.readline()\n</code></pre> <p>Now that we know how to use the create_subprocess_exec() function, let\u2019s look at some worked examples.</p>"},{"location":"asyncio/en/c20/#2022-asyncio-\u7684-create_subprocess_exec-\u7684\u793a\u4f8b","title":"20.2.2 Asyncio \u7684 create_subprocess_exec() \u7684\u793a\u4f8b","text":"<p>20.2.2 Example of Asyncio create_subprocess_exec()</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u63a2\u7d22\u5982\u4f55\u5728 asyncio \u7684\u5b50\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u547d\u4ee4\u3002</p> <p>\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u6267\u884c \u201cecho\u201d \u547d\u4ee4\u6765\u62a5\u544a\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002</p> <p>echo \u547d\u4ee4\u5c06\u76f4\u63a5\u5728\u6807\u51c6\u8f93\u51fa\u4e0a\u62a5\u544a\u63d0\u4f9b\u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u4e0b\u9762\u5217\u51fa\u4e86\u5b8c\u6574\u7684\u793a\u4f8b\u3002</p> <p>\u6ce8\u610f\uff0c\u6b64\u793a\u4f8b\u5047\u8bbe\u60a8\u6709\u6743\u8bbf\u95ee \u201cecho\u201d \u547d\u4ee4\uff0c\u6211\u4e0d\u786e\u5b9a\u5b83\u662f\u5426\u9002\u7528\u4e8e Windows\u3002</p> <pre><code># SuperFastPython.com\n# \u4f7f\u7528 asyncio \u4f5c\u4e3a\u5b50\u8fdb\u7a0b\u6267\u884c\u547d\u4ee4\u7684\u793a\u4f8b\nimport asyncio\n\n# \u4e3b\u534f\u7a0b\nasync def main():\n    # \u5f00\u59cb\u5728\u5b50\u8fdb\u7a0b\u4e2d\u6267\u884c\u547d\u4ee4\n    process = await asyncio.create_subprocess_exec('echo', 'Hello World')\n    # \u62a5\u544a\u5b50\u6d41\u7a0b\u7684\u8be6\u7ec6\u4fe1\u606f\n    print(f'subprocess: {process}')\n\n# \u5165\u53e3\u70b9\nasyncio.run(main())\n</code></pre> <p>\u8fd0\u884c\u8be5\u793a\u4f8b\u9996\u5148\u521b\u5efa main() \u534f\u7a0b\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a asyncio \u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u6267\u884c\u3002</p> <p>main() \u534f\u7a0b\u8fd0\u884c\u5e76\u8c03\u7528 create_subprocess_exec() \u51fd\u6570\u6765\u6267\u884c\u547d\u4ee4\u3002</p> <p>\u521b\u5efa\u5b50\u8fdb\u7a0b\u65f6\uff0cmain() \u534f\u7a0b\u4f1a\u6302\u8d77\u3002 \u8fd4\u56de\u4e00\u4e2a Process \u5b9e\u4f8b\u3002</p> <p>main() \u534f\u7a0b\u6062\u590d\u5e76\u62a5\u544a\u5b50\u8fdb\u7a0b\u7684\u8be6\u7ec6\u4fe1\u606f\u3002 main() \u8fdb\u7a0b\u7ec8\u6b62\uff0c\u5e76\u4e14 asyncio \u7a0b\u5e8f\u7ec8\u6b62\u3002</p> <p>echo \u547d\u4ee4\u7684\u8f93\u51fa\u5728\u547d\u4ee4\u884c\u4e0a\u62a5\u544a\u3002</p> <p>\u8fd9\u7a81\u51fa\u663e\u793a\u4e86\u6211\u4eec\u5982\u4f55\u4ece asyncio \u7a0b\u5e8f\u6267\u884c\u547d\u4ee4\u3002</p> <pre><code>Hello World\nsubprocess: &lt;Process 50249&gt;\n</code></pre> <p>We can explore how to run a command in a subprocess from asyncio.</p> <p>In this example, we will execute the \u201cecho\u201d command to report back a string.</p> <p>The echo command will report the provided string on standard output directly.</p> <p>The complete example is listed below.</p> <p>Note, this example assumes you have access to the \u201cecho\u201d command, I\u2019m not sure it will work on Windows.</p> <pre><code># SuperFastPython.com\n# example of executing a command as a subprocess with asyncio\nimport asyncio\n\n# main coroutine\nasync def main():\n    # start executing a command in a subprocess\n    process = await asyncio.create_subprocess_exec('echo', 'Hello World')\n    # report the details of the subprocess\n    print(f'subprocess: {process}')\n\n# entry point\nasyncio.run(main())\n</code></pre> <p>Running the example first creates the main() coroutine and executes it as the entry point into the asyncio program.</p> <p>The main() coroutine runs and calls the create_subprocess_exec() function to execute a command.</p> <p>The main() coroutine suspends while the subprocess is created. A Process instance is returned.</p> <p>The main() coroutine resumes and reports the details of the subprocess. The main() process terminates and the asyncio program terminates.</p> <p>The output of the echo command is reported on the command line.</p> <p>This highlights how we can execute a command from an asyncio program.</p> <pre><code>Hello World\nsubprocess: &lt;Process 50249&gt;\n</code></pre>"},{"location":"asyncio/en/c20/#203-\u5982\u4f55\u8ddfshell\u4e00\u8d77\u8fd0\u884c\u4e00\u4e2a\u547d\u4ee4","title":"20.3 \u5982\u4f55\u8ddfshell\u4e00\u8d77\u8fd0\u884c\u4e00\u4e2a\u547d\u4ee4","text":"<p>How to Run a Command Via the Shell</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528shell\u6267\u884c\u547d\u4ee4\u3002</p> <p>shell \u662f\u547d\u4ee4\u884c\u7684\u7528\u6237\u754c\u9762\uff0c\u79f0\u4e3a\u547d\u4ee4\u884c\u89e3\u91ca\u5668 (CLI)\u3002</p> <p>\u5b83\u5c06\u4ee3\u8868\u7528\u6237\u89e3\u91ca\u5e76\u6267\u884c\u547d\u4ee4\u3002</p> <p>\u5b83\u8fd8\u63d0\u4f9b\u8bf8\u5982\u7528\u4e8e\u811a\u672c\u3001\u901a\u914d\u7b26\u3001\u7ba1\u9053\u3001shell \u53d8\u91cf\uff08\u4f8b\u5982 PATH\uff09\u7b49\u7684\u539f\u59cb\u7f16\u7a0b\u8bed\u8a00\u7b49\u529f\u80fd\u3002</p> <p>\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u4e2a\u547d\u4ee4\u7684\u8f93\u51fa\u91cd\u5b9a\u5411\u4e3a\u53e6\u4e00\u4e2a\u547d\u4ee4\u7684\u8f93\u5165\uff0c\u4f8b\u5982\u5c06\u201c/etc/services\u201d\u6587\u4ef6\u7684\u5185\u5bb9\u91cd\u5b9a\u5411\u5230\u5b57\u6570\u7edf\u8ba1\u201cwc\u201d\u547d\u4ee4\u5e76\u7edf\u8ba1\u884c\u6570\uff1a</p> <pre><code>cat /etc/services | wc -l\n</code></pre> <p>\u57fa\u4e8e Unix \u7684\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684 shell \u793a\u4f8b\u5305\u62ec\uff1a</p> <ul> <li>\u2018sh\u2019</li> <li>\u2018bash\u2019</li> <li>\u2018zsh\u2019</li> <li>\u7b49\u7b49\u3002</li> </ul> <p>\u5728 Windows \u4e0a\uff0cshell \u53ef\u80fd\u662f cmd.exe\u3002</p> <p>\u8bf7\u53c2\u9605\u8fd9\u4e2a\u5f88\u68d2\u7684\u547d\u4ee4\u884c shell \u5217\u8868\uff1a</p> <ul> <li>\u547d\u4ee4\u884c\u89e3\u91ca\u5668\u5217\u8868, Wikipedia</li> </ul> <p>shell\u5df2\u7ecf\u5728\u8fd0\u884c\uff0c\u5b83\u88ab\u7528\u6765\u542f\u52a8Python\u7a0b\u5e8f\u3002</p> <p>\u60a8\u65e0\u9700\u6267\u884c\u4efb\u4f55\u7279\u6b8a\u64cd\u4f5c\u5373\u53ef\u83b7\u53d6\u6216\u8bbf\u95ee shell\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 create_subprocess_shell() \u51fd\u6570\u4ece asyncio \u7a0b\u5e8f\u6267\u884c\u547d\u4ee4\u3002</p> <p>asyncio.create_subprocess_shell() \u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u547d\u4ee4\u5e76\u4f7f\u7528\u5f53\u524d\u7528\u6237 shell \u6267\u884c\u5b83\u3002</p> <p>\u8fd9\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u5b83\u4e0d\u4ec5\u5141\u8bb8\u6267\u884c\u547d\u4ee4\uff0c\u8fd8\u5141\u8bb8\u4f7f\u7528 shell \u7684\u529f\u80fd\uff0c\u4f8b\u5982\u91cd\u5b9a\u5411\u3001\u901a\u914d\u7b26\u7b49\u3002</p> <p>\u2026 \u6307\u5b9a\u7684\u547d\u4ee4\u5c06\u901a\u8fc7 shell \u6267\u884c\u3002 \u5982\u679c\u60a8\u4f7f\u7528 Python \u4e3b\u8981\u662f\u4e3a\u4e86\u589e\u5f3a\u5b83\u5728\u5927\u591a\u6570\u7cfb\u7edf shell \u4e0a\u63d0\u4f9b\u7684\u63a7\u5236\u6d41\uff0c\u5e76\u4e14\u4ecd\u7136\u5e0c\u671b\u65b9\u4fbf\u5730\u8bbf\u95ee\u5176\u4ed6 shell \u529f\u80fd\uff08\u4f8b\u5982 shell \u7ba1\u9053\u3001\u6587\u4ef6\u540d\u901a\u914d\u7b26\u3001\u73af\u5883\u53d8\u91cf\u6269\u5c55\u4ee5\u53ca\u5c06 ~ \u6269\u5c55\u5230\u7528\u6237\u4e3b\u76ee\u5f55\uff09\uff0c\u90a3\u4e48\u8fd9\u4f1a\u5f88\u6709\u7528\u3002</p> <p>\u2014 SUBPROCESS \u2014 SUBPROCESS MANAGEMENT</p> <p>\u8be5\u547d\u4ee4\u5c06\u5728\u6267\u884c asyncio \u7a0b\u5e8f\u7684\u8fdb\u7a0b\u7684\u5b50\u8fdb\u7a0b\u4e2d\u6267\u884c\u3002</p> <p>\u91cd\u8981\u7684\u662f\uff0casyncio \u7a0b\u5e8f\u80fd\u591f\u4e0e\u5b50\u8fdb\u7a0b\u5f02\u6b65\u4ea4\u4e92\uff0c\u4f8b\u5982 \u901a\u8fc7\u534f\u7a0b\u3002</p> <p>\u56e0\u4e3a\u6240\u6709 asyncio \u5b50\u8fdb\u7a0b\u51fd\u6570\u90fd\u662f\u5f02\u6b65\u7684\uff0c\u5e76\u4e14 asyncio \u63d0\u4f9b\u4e86\u8bb8\u591a\u5de5\u5177\u6765\u4f7f\u7528\u8fd9\u4e9b\u51fd\u6570\uff0c\u6240\u4ee5\u5f88\u5bb9\u6613\u5e76\u884c\u6267\u884c\u548c\u76d1\u89c6\u591a\u4e2a\u5b50\u8fdb\u7a0b\u3002</p> <p>\u2014 ASYNCIO SUBPROCESSES</p> <p>\u901a\u8fc7 shell \u800c\u4e0d\u662f\u76f4\u63a5\u6267\u884c\u547d\u4ee4\u65f6\u53ef\u80fd\u5b58\u5728\u5b89\u5168\u8003\u8651\u3002</p> <p>\u8fd9\u662f\u56e0\u4e3a\u6267\u884c\u547d\u4ee4\u7684\u8bf7\u6c42\u548c\u6b63\u5728\u6267\u884c\u7684\u547d\u4ee4\u4e4b\u95f4\u81f3\u5c11\u5b58\u5728\u4e00\u5c42\u95f4\u63a5\u548c\u89e3\u91ca\uff0c\u4ece\u800c\u5141\u8bb8\u53ef\u80fd\u7684\u6076\u610f\u6ce8\u5165\u3002</p> <p>\u91cd\u8981\u7684\u5e94\u7528\u7a0b\u5e8f\u6709\u8d23\u4efb\u786e\u4fdd\u6240\u6709\u7a7a\u683c\u548c\u7279\u6b8a\u5b57\u7b26\u90fd\u88ab\u6b63\u786e\u5f15\u7528\uff0c\u4ee5\u907f\u514d shell \u6ce8\u5165\u6f0f\u6d1e\u3002</p> <p>\u2014 ASYNCIO SUBPROCESSES</p> <p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86 asyncio.create_subprocess_shell() \u7684\u4f5c\u7528\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528\u5b83\u3002</p> <p>We can execute commands using the shell.</p> <p>The shell is a user interface for the command line, called a command line interpreter (CLI).</p> <p>It will interpret and execute commands on behalf of the user.</p> <p>It also offers features such as a primitive programming language for scripting, wildcards, piping, shell variables (e.g. PATH), and more.</p> <p>For example, we can redirect the output of one command as input to another command, such as the contents of the \u201c/etc/services\u201d file into the word count \u201cwc\u201d command and count the number of lines:</p> <pre><code>cat /etc/services | wc -l\n</code></pre> <p>Examples of shells in the Unix based operating systems include:</p> <ul> <li>\u2018sh\u2019</li> <li>\u2018bash\u2019</li> <li>\u2018zsh\u2019</li> <li>And so on.</li> </ul> <p>On Windows, the shell is probably cmd.exe.</p> <p>See this great list of command line shells:</p> <ul> <li>List of command-line interpreters, Wikipedia</li> </ul> <p>The shell is already running, it was used to start the Python program.</p> <p>You don\u2019t need to do anything special to get or have access to the shell.</p> <p>We can execute a command from an asyncio program via the create_subprocess_shell() function.</p> <p>The asyncio.create_subprocess_shell() function takes a command and executes it using the current user shell.</p> <p>This is helpful as it not only allows the command to be executed, but allows the capabilities of the shell to be used, such as redirection, wildcards and more.</p> <p>\u2026 the specified command will be executed through the shell. This can be useful if you are using Python primarily for the enhanced control flow it offers over most system shells and still want convenient access to other shell features such as shell pipes, filename wildcards, environment variable expansion, and expansion of ~ to a user\u2019s home directory.</p> <p>\u2014 SUBPROCESS \u2014 SUBPROCESS MANAGEMENT</p> <p>The command will be executed in a subprocess of the process executing the asyncio program.</p> <p>Importantly, the asyncio program is able to interact with the subprocess asynchronously, e.g. via coroutines.</p> <p>Because all asyncio subprocess functions are asynchronous and asyncio provides many tools to work with such functions, it is easy to execute and monitor multiple subprocesses in parallel.</p> <p>\u2014 ASYNCIO SUBPROCESSES</p> <p>There can be security considerations when executing a command via the shell instead of directly.</p> <p>This is because there is at least one level of indirection and interpretation between the request to execute the command and the command being executed, allowing possible malicious injection.</p> <p>Important It is the application\u2019s responsibility to ensure that all whitespace and special characters are quoted appropriately to avoid shell injection vulnerabilities.</p> <p>\u2014 ASYNCIO SUBPROCESSES</p> <p>Now that we know what asyncio.create_subprocess_shell() does, let\u2019s look at how to use it.</p>"},{"location":"asyncio/en/c20/#2031-\u5982\u4f55\u4f7f\u7528-asyncio-\u7684-create_subprocess_shell","title":"20.3.1 \u5982\u4f55\u4f7f\u7528 Asyncio \u7684 create_subprocess_shell()","text":"<p>20.3.1 How to Use Asyncio create_subprocess_shell()</p> \u4e2d\u6587\u82f1\u6587 <p>asyncio.create_subprocess_shell() \u51fd\u6570\u5c06\u901a\u8fc7\u5f53\u524d shell \u6267\u884c\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u547d\u4ee4\u3002</p> <p>\u5b83\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u8fdb\u7a0b\u7684 asyncio.subprocess.Process \u5bf9\u8c61\u3002</p> <p>\u5b83\u4e0e\u6211\u4eec\u5728\u4e0a\u4e00\u8282\u4e2d\u770b\u5230\u7684 create_subprocess_shell() \u51fd\u6570\u975e\u5e38\u76f8\u4f3c\u3002 \u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u4eec\u5c06\u56de\u987e\u5982\u4f55\u4f7f\u7528\u8be5\u51fd\u6570\u5e76\u901a\u8fc7 Process \u5b9e\u4f8b\u4e0e\u6d41\u7a0b\u4ea4\u4e92\uff08\u5982\u679c\u60a8\u76f4\u63a5\u8df3\u5230\u672c\u8282\uff09\u3002</p> <p>create_subprocess_shell() \u51fd\u6570\u662f\u4e00\u4e2a\u534f\u7a0b\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5fc5\u987b\u7b49\u5f85\u5b83\u3002 \u5b83\u4f1a\u5728\u5b50\u8fdb\u7a0b\u542f\u52a8\u540e\u8fd4\u56de\uff0c\u800c\u4e0d\u662f\u5728\u5b50\u8fdb\u7a0b\u5b8c\u6210\u65f6\u8fd4\u56de\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u542f\u52a8\u4e00\u4e2a\u5b50\u8fdb\u7a0b\nprocess = await asyncio.create_subprocess_shell('ls')\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7b49\u5f85 wait() \u65b9\u6cd5\u6765\u7b49\u5f85\u5b50\u8fdb\u7a0b\u5b8c\u6210\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u7b49\u5f85\u5b50\u8fdb\u7a0b\u7ec8\u6b62\nawait process.wait()\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 terminate() \u6216 kill() \u65b9\u6cd5\u76f4\u63a5\u505c\u6b62\u5b50\u8fdb\u7a0b\uff0c\u8fd9\u5c06\u5728\u5b50\u8fdb\u7a0b\u4e2d\u5f15\u53d1\u4e00\u4e2a\u4fe1\u53f7\u3002</p> <p>\u547d\u4ee4\u7684\u8f93\u5165\u548c\u8f93\u51fa\u5c06\u7531 shell \u5904\u7406\uff0c\u4f8b\u5982 \u6807\u51c6\u8f93\u5165\u3001\u6807\u51c6\u9519\u8bef\u548c\u6807\u51c6\u8f93\u51fa\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u8ba9 asyncio \u7a0b\u5e8f\u5904\u7406\u5b50\u8fdb\u7a0b\u7684\u8f93\u5165\u6216\u8f93\u51fa\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u8f93\u5165\u6216\u8f93\u51fa\u6d41\u5e76\u6307\u5b9a\u8981\u91cd\u5b9a\u5411\u7684\u5e38\u91cf\u6765\u5b9e\u73b0\uff0c\u4f8b\u5982 asyncio.subprocess.PIPE\u3002</p> <p>\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u547d\u4ee4\u7684\u8f93\u51fa\u91cd\u5b9a\u5411\u5230 asyncio \u7a0b\u5e8f\uff1a</p> <pre><code>...\n# \u542f\u52a8\u5b50\u8fdb\u7a0b\u5e76\u91cd\u5b9a\u5411\u8f93\u51fa\nprocess = await asyncio.create_subprocess_shell('ls', stdout=asyncio.subprocess.PIPE)\n</code></pre> <p>\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7asyncio.subprocess.Process\u5b9e\u4f8b\u901a\u8fc7communicate()\u65b9\u6cd5\u8bfb\u53d6\u7a0b\u5e8f\u7684\u8f93\u51fa\u3002</p> <p>\u8be5\u65b9\u6cd5\u662f\u4e00\u4e2a\u534f\u7a0b\uff0c\u5fc5\u987b\u7b49\u5f85\u3002 \u5b83\u7528\u4e8e\u901a\u8fc7\u5b50\u8fdb\u7a0b\u53d1\u9001\u548c\u63a5\u6536\u6570\u636e\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u4ece\u5b50\u8fdb\u7a0b\u8bfb\u53d6\u6570\u636e\nline = process.communicate()\n</code></pre> <p>\u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u8bbe\u7f6e\u201cinput\u201d\u53c2\u6570\uff0c\u901a\u8fc7 communicate() \u65b9\u6cd5\u5c06\u6570\u636e\u53d1\u9001\u5230\u5b50\u8fdb\u7a0b\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u542f\u52a8\u5b50\u8fdb\u7a0b\u5e76\u91cd\u5b9a\u5411\u8f93\u5165\nprocess = await asyncio.create_subprocess_shell('ls', stdin=asyncio.subprocess.PIPE)\n# \u5411\u5b50\u8fdb\u7a0b\u53d1\u9001\u6570\u636e\nprocess.communicate(input=b'Hello\\n')\n</code></pre> <p>\u5728\u80cc\u540e\uff0c asyncio.subprocess.PIPE \u5c06\u5b50\u8fdb\u7a0b\u914d\u7f6e\u4e3a\u6307\u5411 StreamReader \u6216 StreamWriter \u7528\u4e8e\u5411\u5b50\u8fdb\u7a0b\u53d1\u9001\u6570\u636e\u6216\u4ece\u5b50\u8fdb\u7a0b\u53d1\u9001\u6570\u636e\uff0c\u4ee5\u53ca communicate() \u65b9\u6cd5 \u5c06\u4ece\u914d\u7f6e\u7684\u8bfb\u53d6\u5668\u8bfb\u53d6\u6216\u5199\u5165\u5b57\u8282\u3002</p> <p>\u5982\u679c PIPE \u4f20\u9012\u7ed9 stdin \u53c2\u6570\uff0c\u5219 Process.stdin \u5c5e\u6027\u5c06\u6307\u5411 StreamWriter \u5b9e\u4f8b\u3002 \u5982\u679c PIPE \u4f20\u9012\u7ed9 stdout \u6216 stderr \u53c2\u6570\uff0c\u5219 Process.stdout \u548c Process.stderr \u5c5e\u6027\u5c06\u6307\u5411 StreamReader \u5b9e\u4f8b\u3002</p> <p>\u2014 ASYNCIO SUBPROCESSES</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b50\u8fdb\u7a0b\u7684 <code>stdin</code>\u3001<code>stdout</code> \u548c <code>stderr</code> \u5c5e\u6027\u76f4\u63a5\u4e0e StreamReader \u6216 StreamWriter \u4ea4\u4e92\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u4ece\u5b50\u8fdb\u7a0b\u8f93\u51fa\u6d41\u4e2d\u8bfb\u53d6\u4e00\u884c\nline = await process.stdout.readline()\n</code></pre> <p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u5982\u4f55\u4f7f\u7528 create_subprocess_shell() \u51fd\u6570\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e9b\u6709\u6548\u7684\u793a\u4f8b\u3002</p> <p>The asyncio.create_subprocess_shell() function will execute a given string command via the current shell.</p> <p>It returns a asyncio.subprocess.Process object that represents the process.</p> <p>It is very similar to the create_subprocess_shell() function we saw in a previous section. Nevertheless, we will review how to use the function and interact with the process via the Process instance (in case you skipped straight to this section).</p> <p>The create_subprocess_shell() function is a coroutine, which means we must await it. It will return once the subprocess has been started, not when the subprocess is finished.</p> <p>For example:</p> <pre><code>...\n# start a subprocess\nprocess = await asyncio.create_subprocess_shell('ls')\nWe can wait for the subprocess to finish by awaiting the **wait()** method.\n</code></pre> <p>For example:</p> <pre><code>...\n# wait for the subprocess to terminate\nawait process.wait()\n</code></pre> <p>We can stop the subprocess directly by calling the terminate() or kill() methods, which will raise a signal in the subprocess.</p> <p>The input and output of the command will be handled by the shell, e.g. stdin, stderr, and stdout.</p> <p>We can have the asyncio program handle the input or output for the subprocess.</p> <p>This can be achieved by specifying the input or output stream and specifying a constant to redirect, such as asyncio.subprocess.PIPE.</p> <p>For example, we can redirect the output of a command to the asyncio program:</p> <pre><code>...\n# start a subprocess and redirect output\nprocess = await asyncio.create_subprocess_shell('ls', stdout=asyncio.subprocess.PIPE)\n</code></pre> <p>We can then read the output of the program via the asyncio.subprocess.Process instance via the communicate() method.</p> <p>This method is a coroutine and must be awaited. It is used to both send and receive data with the subprocess.</p> <p>For example:</p> <pre><code>...\n# read data from the subprocess\nline = process.communicate()\n</code></pre> <p>We can also send data to the subprocess via the communicate() method by setting the \u201cinput\u201d argument in bytes.</p> <p>For example:</p> <pre><code>...\n# start a subprocess and redirect input\nprocess = await asyncio.create_subprocess_shell('ls', stdin=asyncio.subprocess.PIPE)\n# send data to the subprocess\nprocess.communicate(input=b'Hello\\n')\n</code></pre> <p>Behind the scenes the asyncio.subprocess.PIPE configures the subprocess to point to a StreamReader or StreamWriter for sending data to or from the subprocess, and the communicate() method will read or write bytes from the configured reader.</p> <p>If PIPE is passed to stdin argument, the Process.stdin attribute will point to a StreamWriter instance. If PIPE is passed to stdout or stderr arguments, the Process.stdout and Process.stderr attributes will point to StreamReader instances.</p> <p>\u2014 ASYNCIO SUBPROCESSES</p> <p>We can interact with the StreamReader or StreamWriter directly via the subprocess via the stdin, stdout, and stderr attributes.</p> <p>For example:</p> <pre><code>...\n# read a line from the subprocess output stream\nline = await process.stdout.readline()\n</code></pre> <p>Now that we know how to use the create_subprocess_shell() function, let\u2019s look at some worked examples.</p>"},{"location":"asyncio/en/c20/#2032-asyncio-\u7684-create_subprocess_shell-\u7684\u793a\u4f8b","title":"20.3.2 Asyncio \u7684 create_subprocess_shell() \u7684\u793a\u4f8b","text":"<p>20.3.2 Example of Asyncio create_subprocess_shell()</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u63a2\u7d22\u5982\u4f55\u4f7f\u7528 shell \u4ece asyncio \u7684\u5b50\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u547d\u4ee4\u3002</p> <p>\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u6267\u884c \u201cecho\u201d \u547d\u4ee4\u6765\u62a5\u544a\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002</p> <p>echo \u547d\u4ee4\u5c06\u76f4\u63a5\u5728\u6807\u51c6\u8f93\u51fa\u4e0a\u62a5\u544a\u63d0\u4f9b\u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u4e0b\u9762\u5217\u51fa\u4e86\u5b8c\u6574\u7684\u793a\u4f8b\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u6b64\u793a\u4f8b\u5047\u8bbe\u60a8\u6709\u6743\u8bbf\u95ee\u201cecho\u201d\u547d\u4ee4\uff0c\u6211\u4e0d\u786e\u5b9a\u5b83\u662f\u5426\u9002\u7528\u4e8e Windows\u3002</p> <pre><code># SuperFastPython.com\n# \u4f7f\u7528 asyncio \u4f5c\u4e3a\u5b50\u8fdb\u7a0b\u6267\u884c shell \u547d\u4ee4\u7684\u793a\u4f8b\nimport asyncio\n\n# \u4e3b\u534f\u7a0b\nasync def main():\n    # \u5f00\u59cb\u5728\u5b50\u8fdb\u7a0b\u4e2d\u6267\u884c shell \u547d\u4ee4\n    process = await asyncio.create_subprocess_shell('echo Hello World')\n    # \u62a5\u544a\u5b50\u6d41\u7a0b\u7684\u8be6\u7ec6\u4fe1\u606f\n    print(f'subprocess: {process}')\n\n# \u5165\u53e3\u70b9\nasyncio.run(main())\n</code></pre> <p>\u8fd0\u884c\u8be5\u793a\u4f8b\u9996\u5148\u521b\u5efa main() \u534f\u7a0b\u5e76\u5c06\u5176\u4f5c\u4e3a asyncio \u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u6267\u884c\u3002</p> <p>main() \u534f\u7a0b\u8fd0\u884c\u5e76\u8c03\u7528 create_subprocess_shell() \u51fd\u6570\u6765\u6267\u884c\u547d\u4ee4\u3002</p> <p>main() \u534f\u7a0b\u5728\u5b50\u8fdb\u7a0b\u521b\u5efa\u65f6\u6302\u8d77\u3002 \u8fd4\u56de\u4e00\u4e2a Process \u5b9e\u4f8b\u3002</p> <p>main() \u534f\u7a0b\u6062\u590d\u5e76\u62a5\u544a\u5b50\u6d41\u7a0b\u7684\u8be6\u7ec6\u4fe1\u606f\u3002 main() \u8fdb\u7a0b\u7ec8\u6b62\uff0casyncio \u7a0b\u5e8f\u7ec8\u6b62\u3002</p> <p>echo \u547d\u4ee4\u7684\u8f93\u51fa\u5728\u547d\u4ee4\u884c\u4e0a\u62a5\u544a\u3002</p> <p>\u8fd9\u7a81\u51fa\u663e\u793a\u4e86\u6211\u4eec\u5982\u4f55\u4f7f\u7528 asyncio \u7a0b\u5e8f\u4e2d\u7684 shell \u6267\u884c\u547d\u4ee4\u3002</p> <pre><code>subprocess: &lt;Process 43916&gt;\nHello World\n</code></pre> <p>We can explore how to run a command in a subprocess from asyncio using the shell.</p> <p>In this example, we will execute the \u201cecho\u201d command to report back a string.</p> <p>The echo command will report the provided string on standard output directly.</p> <p>The complete example is listed below.</p> <p>Note, this example assumes you have access to the \u201cecho\u201d command, I\u2019m not sure it will work on Windows.</p> <pre><code># SuperFastPython.com\n# example of executing a shell command as a subprocess with asyncio\nimport asyncio\n\n# main coroutine\nasync def main():\n    # start executing a shell command in a subprocess\n    process = await asyncio.create_subprocess_shell('echo Hello World')\n    # report the details of the subprocess\n    print(f'subprocess: {process}')\n\n# entry point\nasyncio.run(main())\n</code></pre> <p>Running the example first creates the main() coroutine and executes it as the entry point into the asyncio program.</p> <p>The main() coroutine runs and calls the create_subprocess_shell() function to execute a command.</p> <p>The main() coroutine suspends while the subprocess is created. A Process instance is returned.</p> <p>The main() coroutine resumes and reports the details of the subprocess. The main() process terminates and the asyncio program terminates.</p> <p>The output of the echo command is reported on the command line.</p> <p>This highlights how we can execute a command using the shell from an asyncio program.</p> <pre><code>subprocess: &lt;Process 43916&gt;\nHello World\n</code></pre>"},{"location":"asyncio/en/c21/","title":"21. \u975e\u963b\u585e\u6d41","text":"<p>21. Non-Blocking Streams</p> \u4e2d\u6587\u82f1\u6587 <p>asyncio \u7684\u4e00\u4e2a\u4e3b\u8981\u597d\u5904\u662f\u80fd\u591f\u4f7f\u7528\u975e\u963b\u585e\u6d41\u3002</p> <p>\u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b\u3002</p> <p>A major benefit of asyncio is the ability to use non-blocking streams.</p> <p>Let\u2019s take a closer look.</p>"},{"location":"asyncio/en/c21/#211-asyncio-\u7684\u6d41","title":"21.1 Asyncio \u7684\u6d41","text":"<p>21.1 Asyncio Streams</p> \u4e2d\u6587\u82f1\u6587 <p>Asyncio \u63d0\u4f9b\u975e\u963b\u585e I/O \u5957\u63a5\u5b57\u7f16\u7a0b\u3002</p> <p>\u8fd9\u662f\u901a\u8fc7\u6d41(streams)\u63d0\u4f9b\u7684\u3002</p> <p>\u6d41(streams)\u662f\u9ad8\u7ea7\u5f02\u6b65/\u7b49\u5f85\u5c31\u7eea\u539f\u8bed\uff0c\u53ef\u4e0e\u7f51\u7edc\u8fde\u63a5\u4e00\u8d77\u4f7f\u7528\u3002 \u6d41\u5141\u8bb8\u5728\u4e0d\u4f7f\u7528\u56de\u8c03\u6216\u4f4e\u7ea7\u534f\u8bae\u548c\u4f20\u8f93\u7684\u60c5\u51b5\u4e0b\u53d1\u9001\u548c\u63a5\u6536\u6570\u636e\u3002</p> <p>\u2014 ASYNCIO STREAMS</p> <p>\u53ef\u4ee5\u6253\u5f00\u63d0\u4f9b\u5bf9\u6d41\u5199\u5165\u5668\u548c\u6d41\u5199\u5165\u5668\u7684\u8bbf\u95ee\u7684\u5957\u63a5\u5b57\u3002</p> <p>\u7136\u540e\u53ef\u4ee5\u4f7f\u7528\u534f\u7a0b\u5728\u6d41\u4e2d\u5199\u5165\u548c\u8bfb\u53d6\u6570\u636e\uff0c\u5e76\u5728\u9002\u5f53\u7684\u65f6\u5019\u6302\u8d77\u3002</p> <p>\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u5173\u95ed\u5957\u63a5\u5b57\u3002</p> <p>\u5f02\u6b65\u6d41\u529f\u80fd\u662f\u4f4e\u7ea7\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5fc5\u987b\u624b\u52a8\u5b9e\u73b0\u6240\u9700\u7684\u4efb\u4f55\u534f\u8bae\u3002</p> <p>\u8fd9\u53ef\u80fd\u5305\u62ec\u5e38\u89c1\u7684\u7f51\u7edc\u534f\u8bae\uff0c\u4f8b\u5982\uff1a</p> <ul> <li>\u7528\u4e8e\u4e0e Web \u670d\u52a1\u5668\u4ea4\u4e92\u7684 HTTP \u6216 HTTPS</li> <li>\u7528\u4e8e\u4e0e\u7535\u5b50\u90ae\u4ef6\u670d\u52a1\u5668\u4ea4\u4e92\u7684 SMTP</li> <li>\u7528\u4e8e\u4e0e\u6587\u4ef6\u670d\u52a1\u5668\u4ea4\u4e92\u7684 FTP\u3002</li> </ul> <p>\u8fd9\u4e9b\u6d41\u8fd8\u53ef\u7528\u4e8e\u521b\u5efa\u670d\u52a1\u5668\u6765\u4f7f\u7528\u6807\u51c6\u534f\u8bae\u5904\u7406\u8bf7\u6c42\uff0c\u6216\u5f00\u53d1\u60a8\u81ea\u5df1\u7684\u7279\u5b9a\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7684\u534f\u8bae\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4ec0\u4e48\u662f\u5f02\u6b65\u6d41\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528\u5b83\u4eec\u3002</p> <p>Asyncio provides non-blocking I/O socket programming.</p> <p>This is provided via streams.</p> <p>Streams are high-level async/await-ready primitives to work with network connections. Streams allow sending and receiving data without using callbacks or low-level protocols and transports.</p> <p>\u2014 ASYNCIO STREAMS</p> <p>Sockets can be opened that provide access to a stream writer and a stream writer.</p> <p>Data can then be written and read from the stream using coroutines, suspending when appropriate.</p> <p>Once finished, the socket can be closed.</p> <p>The asyncio streams capability is low-level meaning that any protocols required must be implemented manually.</p> <p>This might include common web protocols, such as:</p> <ul> <li>HTTP or HTTPS for interacting with web servers</li> <li>SMTP for interacting with email servers</li> <li>FTP for interacting with file servers.</li> </ul> <p>The streams can also be used to create a server to handle requests using a standard protocol, or to develop your own application-specific protocol.</p> <p>Now that we know what asyncio streams are, let\u2019s look at how to use them.</p>"},{"location":"asyncio/en/c21/#212-\u5982\u4f55\u6253\u5f00\u4e00\u4e2a\u8fde\u63a5","title":"21.2 \u5982\u4f55\u6253\u5f00\u4e00\u4e2a\u8fde\u63a5","text":"<p>21.2 How to Open a Connection</p> \u4e2d\u6587\u82f1\u6587 <p>\u53ef\u4ee5\u4f7f\u7528 asyncio.open_connection() \u51fd\u6570\u6253\u5f00 asyncio TCP \u5ba2\u6237\u7aef\u5957\u63a5\u5b57\u8fde\u63a5\u3002</p> <p>\u5efa\u7acb\u7f51\u7edc\u8fde\u63a5\u5e76\u8fd4\u56de\u4e00\u5bf9\uff08reader\u3001writer\uff09\u5bf9\u8c61\u3002 \u8fd4\u56de\u7684\u8bfb\u53d6\u5668\u548c\u5199\u5165\u5668\u5bf9\u8c61\u662f StreamReader \u548c StreamWriter \u7c7b\u7684\u5b9e\u4f8b\u3002</p> <p>\u2014 ASYNCIO STREAMS</p> <p>\u8fd9\u662f\u4e00\u4e2a\u5fc5\u987b\u7b49\u5f85\u7684\u534f\u7a0b\uff0c\u4e00\u65e6\u5957\u63a5\u5b57\u8fde\u63a5\u6253\u5f00\u5c31\u4f1a\u8fd4\u56de\u3002</p> <p>\u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a StreamReader \u548c StreamWriter \u5bf9\u8c61\uff0c\u7528\u4e8e\u4e0e\u5957\u63a5\u5b57\u4ea4\u4e92\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u6253\u5f00\u4e00\u4e2a\u8fde\u63a5\nreader, writer = await asyncio.open_connection(...)\n</code></pre> <p>asyncio.open_connection() \u51fd\u6570\u9700\u8981\u8bb8\u591a\u53c2\u6570\u6765\u914d\u7f6e\u5957\u63a5\u5b57\u8fde\u63a5\u3002</p> <p>\u4e24\u4e2a\u5fc5\u9700\u7684\u53c2\u6570\u662f\u4e3b\u673a\u548c\u7aef\u53e3\u3002</p> <p>\u4e3b\u673a\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6307\u5b9a\u8981\u8fde\u63a5\u7684\u670d\u52a1\u5668\uff0c\u4f8b\u5982\u57df\u540d\u6216IP\u5730\u5740\u3002</p> <p>port \u662f\u5957\u63a5\u5b57\u7aef\u53e3\u53f7\uff0c\u4f8b\u5982 HTTP \u670d\u52a1\u5668\u4e3a 80\uff0cHTTPS \u670d\u52a1\u5668\u4e3a 443\uff0cSMTP \u4e3a 23 \u7b49\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u6253\u5f00\u4e0e http \u670d\u52a1\u5668\u7684\u8fde\u63a5\nreader, writer = await asyncio.open_connection('www.google.com', 80)\n</code></pre> <p>SSL \u534f\u8bae\u652f\u6301\u52a0\u5bc6\u5957\u63a5\u5b57\u8fde\u63a5\u3002</p> <p>\u6700\u5e38\u89c1\u7684\u4f8b\u5b50\u53ef\u80fd\u662f HTTPS\uff0c\u5b83\u6b63\u5728\u53d6\u4ee3 HTTP\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5c06\u201cssl\u201d\u53c2\u6570\u8bbe\u7f6e\u4e3aTrue\u6765\u5b9e\u73b0\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u6253\u5f00\u4e0e https \u670d\u52a1\u5668\u7684\u8fde\u63a5\nreader, writer = await asyncio.open_connection('www.google.com', 443, ssl=True)\n</code></pre> <p>An asyncio TCP client socket connection can be opened using the asyncio.open_connection() function.</p> <p>Establish a network connection and return a pair of (reader, writer) objects. The returned reader and writer objects are instances of StreamReader and StreamWriter classes.</p> <p>\u2014 ASYNCIO STREAMS</p> <p>This is a coroutine that must be awaited and will return once the socket connection is open.</p> <p>The function returns a StreamReader and StreamWriter object for interacting with the socket.</p> <p>For example:</p> <pre><code>...\n# open a connection\nreader, writer = await asyncio.open_connection(...)\n</code></pre> <p>The asyncio.open_connection() function takes many arguments in order to configure the socket connection.</p> <p>The two required arguments are the host and the port.</p> <p>The host is a string that specifies the server to connect to, such as a domain name or an IP address.</p> <p>The port is the socket port number, such as 80 for HTTP servers, 443 for HTTPS servers, 23 for SMTP and so on.</p> <p>For example:</p> <pre><code>...\n# open a connection to an http server\nreader, writer = await asyncio.open_connection('www.google.com', 80)\n</code></pre> <p>Encrypted socket connections are supported over the SSL protocol.</p> <p>The most common example might be HTTPS which is replacing HTTP.</p> <p>This can be achieved by setting the \u201cssl\u201d argument to True.</p> <p>For example:</p> <pre><code>...\n# open a connection to an https server\nreader, writer = await asyncio.open_connection('www.google.com', 443, ssl=True)\n</code></pre>"},{"location":"asyncio/en/c21/#213-\u5982\u4f55\u542f\u52a8\u4e00\u4e2a\u4fa6\u542c\u670d\u52a1","title":"21.3 \u5982\u4f55\u542f\u52a8\u4e00\u4e2a\u4fa6\u542c\u670d\u52a1","text":"<p>21.3 How to Start a Server</p> \u4e2d\u6587\u82f1\u6587 <p>\u53ef\u4ee5\u4f7f\u7528 asyncio.start_server() \u51fd\u6570\u6253\u5f00 asyncio TCP \u670d\u52a1\u5668\u5957\u63a5\u5b57\u3002</p> <p>\u521b\u5efa\u4e00\u4e2a TCP \u670d\u52a1\u5668\uff08\u5957\u63a5\u5b57\u7c7b\u578b SOCK_STREAM\uff09\uff0c\u4fa6\u542c\u4e3b\u673a\u5730\u5740\u7684\u7aef\u53e3\u3002</p> <p>\u2014 ASYNCIO EVENT LOOP</p> <p>\u8fd9\u662f\u4e00\u4e2a\u5fc5\u987b\u7b49\u5f85\u7684\u534f\u7a0b\u3002</p> <p>\u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u4ee3\u8868\u6b63\u5728\u8fd0\u884c\u7684\u670d\u52a1\u5668\u7684 asyncio.Server \u5bf9\u8c61\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u542f\u52a8\u4e00\u4e2atcp\u670d\u52a1\u5668\nserver = await asyncio.start_server(...)\n</code></pre> <p>\u4e09\u4e2a\u5fc5\u9700\u53c2\u6570\u662f\u56de\u8c03\u51fd\u6570\u3001\u4e3b\u673a\u548c\u7aef\u53e3\u3002</p> <p>\u56de\u8c03\u51fd\u6570\u662f\u4e00\u4e2a\u7531\u540d\u79f0\u6307\u5b9a\u7684\u81ea\u5b9a\u4e49\u51fd\u6570\uff0c\u6bcf\u6b21\u5ba2\u6237\u7aef\u8fde\u63a5\u5230\u670d\u52a1\u5668\u65f6\u90fd\u4f1a\u8c03\u7528\u8be5\u51fd\u6570\u3002</p> <p>\u6bcf\u5f53\u5efa\u7acb\u65b0\u7684\u5ba2\u6237\u7aef\u8fde\u63a5\u65f6\uff0c\u90fd\u4f1a\u8c03\u7528 <code>client_connected_cb</code> \u56de\u8c03\u3002 \u5b83\u63a5\u6536\u4e00\u4e2a\uff08\u8bfb\u53d6\u5668(reader)\uff0c\u5199\u5165\u5668(writer)\uff09\u5bf9\u4f5c\u4e3a\u4e24\u4e2a\u53c2\u6570\uff0c\u5373 StreamReader \u548c StreamWriter \u7c7b\u7684\u5b9e\u4f8b\u3002</p> <p>\u2014 ASYNCIO STREAMS</p> <p>\u4e3b\u673a\u662f\u5ba2\u6237\u7aef\u6307\u5b9a\u8fde\u63a5\u7684\u57df\u540d\u6216IP\u5730\u5740\u3002 port \u662f\u63a5\u6536\u8fde\u63a5\u7684\u5957\u63a5\u5b57\u7aef\u53e3\u53f7\uff0c\u4f8b\u5982 FTP \u4e3a <code>21</code>\uff0cHTTP \u4e3a <code>80</code>\u3002</p> <p>\u4f8b\u5982:</p> <pre><code># \u5904\u7406\u8fde\u63a5\nasync def handler(reader, writer):\n    # ...\n\n...\n# \u542f\u52a8\u4e00\u4e2a\u670d\u52a1\u5668\u6765\u63a5\u6536http\u8fde\u63a5\nserver = await asyncio.start_server(handler, '127.0.0.1', 80)\n</code></pre> <p>An asyncio TCP server socket can be opened using the asyncio.start_server() function.</p> <p>Create a TCP server (socket type SOCK_STREAM) listening on port of the host address.</p> <p>\u2014 ASYNCIO EVENT LOOP</p> <p>This is a coroutine that must be awaited.</p> <p>The function returns an asyncio.Server object that represents the running server.</p> <p>For example:</p> <pre><code>...\n# start a tcp server\nserver = await asyncio.start_server(...)\n</code></pre> <p>The three required arguments are the callback function, the host, and the port.</p> <p>The callback function is a custom function specified by name that will be called each time a client connects to the server.</p> <p>The client_connected_cb callback is called whenever a new client connection is established. It receives a (reader, writer) pair as two arguments, instances of the StreamReader and StreamWriter classes.</p> <p>\u2014 ASYNCIO STREAMS</p> <p>The host is the domain name or IP address that clients will specify to connect. The port is the socket port number on which to receive connections, such as 21 for FTP or 80 for HTTP.</p> <p>For example:</p> <pre><code># handle connections\nasync def handler(reader, writer):\n    # ...\n\n...\n# start a server to receive http connections\nserver = await asyncio.start_server(handler, '127.0.0.1', 80)\n</code></pre>"},{"location":"asyncio/en/c21/#214-\u5982\u4f55\u4f7f\u7528-streamwriter-\u5199\u5165\u6570\u636e","title":"21.4 \u5982\u4f55\u4f7f\u7528 StreamWriter \u5199\u5165\u6570\u636e","text":"<p>21.4 How to Write Data with the StreamWriter</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 asyncio.StreamWriter \u5c06\u6570\u636e\u5199\u5165\u5957\u63a5\u5b57\u3002</p> <p>\u8868\u793a\u4e00\u4e2a writer \u5bf9\u8c61\uff0c\u5b83\u63d0\u4f9b API \u5c06\u6570\u636e\u5199\u5165 IO \u6d41\u3002</p> <p>\u2014 ASYNCIO STREAMS</p> <p>\u6570\u636e\u4ee5\u5b57\u8282\u5f62\u5f0f\u5199\u5165\u3002</p> <p>\u53ef\u4ee5\u4f7f\u7528 write() \u65b9\u6cd5\u5c06\u5b57\u8282\u6570\u636e\u5199\u5165\u5957\u63a5\u5b57\u3002</p> <p>\u8be5\u65b9\u6cd5\u5c1d\u8bd5\u7acb\u5373\u5c06\u6570\u636e\u5199\u5165\u5e95\u5c42\u5957\u63a5\u5b57\u3002 \u5982\u679c\u5931\u8d25\uff0c\u6570\u636e\u5c06\u5728\u5185\u90e8\u5199\u5165\u7f13\u51b2\u533a\u4e2d\u6392\u961f\uff0c\u76f4\u5230\u53ef\u4ee5\u53d1\u9001\u3002</p> <p>\u2014 ASYNCIO STREAMS</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u5199\u5165\u5b57\u8282\u6570\u636e\nwriter.write(byte_data)\n</code></pre> <p>\u6216\u8005\uff0c\u53ef\u4ee5\u4f7f\u7528 writelines() \u5199\u5165\u7ec4\u7ec7\u6210\u5217\u8868\u6216\u53ef\u8fed\u4ee3\u7684\u591a\u201c\u884c\u201d\u5b57\u8282\u6570\u636e\u3002 writelines) \u65b9\u6cd5\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u5199\u5165\u5b57\u8282\u6570\u636e\u884c\nwriter.writelines(byte_lines)\n</code></pre> <p>\u8fd9\u4e24\u79cd\u65b9\u6cd5\u90fd\u4e0d\u4f1a\u5199\u5165\u6570\u636e\u5757\u6216\u6302\u8d77\u8c03\u7528\u534f\u7a0b\u3002</p> <p>\u5199\u5165\u5b57\u8282\u6570\u636e\u540e\uff0c\u6700\u597d\u901a\u8fc7 drain() \u65b9\u6cd5\u6392\u7a7a\u5957\u63a5\u5b57\u3002</p> <p>\u7b49\u5230\u5408\u9002\u7684\u65f6\u5019\u518d\u7ee7\u7eed\u5199\u5165\u6d41\u3002</p> <p>\u2014 ASYNCIO STREAMS</p> <p>\u8fd9\u662f\u4e00\u4e2a\u534f\u7a0b\uff0c\u5c06\u6302\u8d77\u8c03\u7528\u8005\uff0c\u76f4\u5230\u5b57\u8282\u5df2\u4f20\u8f93\u4e14\u5957\u63a5\u5b57\u51c6\u5907\u5c31\u7eea\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u5199\u5165\u5b57\u8282\u6570\u636e\nwriter.write(byte_data)\n# \u7b49\u5f85\u6570\u636e\u4f20\u8f93\nawait writer.drain()\n</code></pre> <p>We can write data to the socket using an asyncio.StreamWriter.</p> <p>Represents a writer object that provides APIs to write data to the IO stream.</p> <p>\u2014 ASYNCIO STREAMS</p> <p>Data is written as bytes.</p> <p>Byte data can be written to the socket using the write() method.</p> <p>The method attempts to write the data to the underlying socket immediately. If that fails, the data is queued in an internal write buffer until it can be sent.</p> <p>\u2014 ASYNCIO STREAMS</p> <p>For example:</p> <pre><code>...\n# write byte data\nwriter.write(byte_data)\n</code></pre> <p>Alternatively, multiple \u201clines\u201d of byte data organized into a list or iterable can be written using the writelines() method.</p> <p>For example:</p> <pre><code>...\n# write lines of byte data\nwriter.writelines(byte_lines)\n</code></pre> <p>Neither method for writing data blocks or suspends the calling coroutine.</p> <p>After writing byte data it is a good idea to drain the socket via the drain() method.</p> <p>Wait until it is appropriate to resume writing to the stream.</p> <p>\u2014 ASYNCIO STREAMS</p> <p>This is a coroutine and will suspend the caller until the bytes have been transmitted and the socket is ready.</p> <p>For example:</p> <pre><code>...\n# write byte data\nwriter.write(byte_data)\n# wait for data to be transmitted\nawait writer.drain()\n</code></pre>"},{"location":"asyncio/en/c21/#215-\u5982\u4f55\u4f7f\u7528-streamreader-\u8bfb\u53d6\u6570\u636e","title":"21.5 \u5982\u4f55\u4f7f\u7528 StreamReader \u8bfb\u53d6\u6570\u636e","text":"<p>21.5 How to Read Data with the StreamReader</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 asyncio.StreamReader \u4ece\u5957\u63a5\u5b57\u8bfb\u53d6\u6570\u636e\u3002</p> <p>\u8868\u793a\u4e00\u4e2a\u8bfb\u53d6\u5668\u5bf9\u8c61\uff0c\u5b83\u63d0\u4f9b API \u4ee5\u4ece IO \u6d41\u8bfb\u53d6\u6570\u636e\u3002</p> <p>\u2014 ASYNCIO STREAMS</p> <p>\u6570\u636e\u4ee5\u5b57\u8282\u683c\u5f0f\u8bfb\u53d6\uff0c\u56e0\u6b64\u5b57\u7b26\u4e32\u5728\u4f7f\u7528\u4e4b\u524d\u53ef\u80fd\u9700\u8981\u8fdb\u884c\u7f16\u7801\u3002</p> <p>\u6240\u6709\u8bfb\u53d6\u65b9\u6cd5\u90fd\u662f\u5fc5\u987b\u7b49\u5f85\u7684\u534f\u7a0b\u3002</p> <p>\u53ef\u4ee5\u901a\u8fc7 read() \u65b9\u6cd5\u8bfb\u53d6\u4efb\u610f\u6570\u91cf\u7684\u5b57\u8282\uff0c\u8be5\u65b9\u6cd5\u5c06\u8bfb\u53d6\u5230\u6587\u4ef6\u672b\u5c3e (EOF)\u3002</p> <pre><code>...\n# \u8bfb\u53d6\u5b57\u8282\u6570\u636e\nbyte_data = await reader.read()\n</code></pre> <p>\u6b64\u5916\uff0c\u53ef\u4ee5\u901a\u8fc7\u201cn\u201d\u53c2\u6570\u6307\u5b9a\u8981\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u3002</p> <p>\u6700\u591a\u8bfb\u53d6 n \u4e2a\u5b57\u8282\u3002 \u5982\u679c\u672a\u63d0\u4f9b n \u6216\u8bbe\u7f6e\u4e3a -1\uff0c\u5219\u8bfb\u53d6\u76f4\u5230 EOF \u5e76\u8fd4\u56de\u6240\u6709\u8bfb\u53d6\u7684\u5b57\u8282\u3002</p> <p>\u2014 ASYNCIO STREAMS</p> <p>\u5982\u679c\u60a8\u77e5\u9053\u4e0b\u4e00\u4e2a\u54cd\u5e94\u7684\u9884\u671f\u5b57\u8282\u6570\uff0c\u8fd9\u53ef\u80fd\u4f1a\u6709\u6240\u5e2e\u52a9\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u8bfb\u53d6\u5b57\u8282\u6570\u636e\nbyte_data = await reader.read(n=100)\n</code></pre> <p>\u53ef\u4ee5\u4f7f\u7528 readline() \u65b9\u6cd5\u8bfb\u53d6\u5355\u884c\u6570\u636e\u3002</p> <p>\u8fd9\u5c06\u8fd4\u56de\u5b57\u8282\uff0c\u76f4\u5230\u9047\u5230\u65b0\u884c\u5b57\u7b26\u201c\\n\u201d\u6216 EOF\u3002</p> <p>\u8bfb\u53d6\u4e00\u884c\uff0c\u5176\u4e2d\u201cline\u201d\u662f\u4ee5\\n\u7ed3\u5c3e\u7684\u5b57\u8282\u5e8f\u5217\u3002 \u5982\u679c\u6536\u5230 EOF \u4f46\u672a\u627e\u5230 \\n\uff0c\u5219\u8be5\u65b9\u6cd5\u8fd4\u56de\u90e8\u5206\u8bfb\u53d6\u7684\u6570\u636e\u3002 \u5982\u679c\u6536\u5230 EOF \u5e76\u4e14\u5185\u90e8\u7f13\u51b2\u533a\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u7a7a\u5b57\u8282\u5bf9\u8c61\u3002</p> <p>\u2014 ASYNCIO STREAMS</p> <p>\u8fd9\u5728\u9605\u8bfb\u4f7f\u7528\u6587\u672c\u884c\u64cd\u4f5c\u7684\u6807\u51c6\u534f\u8bae\u65f6\u5f88\u6709\u5e2e\u52a9\u3002</p> <pre><code>...\n# \u8bfb\u53d6\u4e00\u884c\u6570\u636e\nbyte_line = await reader.readline()\n</code></pre> <p>\u6b64\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a readexactly() \u65b9\u6cd5\u7528\u4e8e\u8bfb\u53d6\u786e\u5207\u7684\u5b57\u8282\u6570\uff0c\u5426\u5219\u4f1a\u5f15\u53d1\u5f02\u5e38\uff0c\u8fd8\u6709\u4e00\u4e2a readuntil() \u65b9\u6cd5\u5c06\u8bfb\u53d6\u5b57\u8282\uff0c\u76f4\u5230\u8bfb\u53d6\u5b57\u8282\u5f62\u5f0f\u7684\u6307\u5b9a\u5b57\u7b26\u3002</p> <p>We can read data from the socket using an asyncio.StreamReader.</p> <p>Represents a reader object that provides APIs to read data from the IO stream.</p> <p>\u2014 ASYNCIO STREAMS</p> <p>Data is read in byte format, therefore strings may need to be encoded before being used.</p> <p>All read methods are coroutines that must be awaited.</p> <p>An arbitrary number of bytes can be read via the read() method, which will read until the end of file (EOF).</p> <pre><code>...\n# read byte data\nbyte_data = await reader.read()\n</code></pre> <p>Additionally, the number of bytes to read can be specified via the \u201cn\u201d argument.</p> <p>Read up to n bytes. If n is not provided, or set to -1, read until EOF and return all read bytes.</p> <p>\u2014 ASYNCIO STREAMS</p> <p>This may be helpful if you know the number of bytes expected from the next response.</p> <p>For example:</p> <pre><code>...\n# read byte data\nbyte_data = await reader.read(n=100)\n</code></pre> <p>A single line of data can be read using the readline() method.</p> <p>This will return bytes until a new line character \u2018\\n\u2019 is encountered, or EOF.</p> <p>Read one line, where \u201cline\u201d is a sequence of bytes ending with \\n. If EOF is received and \\n was not found, the method returns partially read data. If EOF is received and the internal buffer is empty, return an empty bytes object.</p> <p>\u2014 ASYNCIO STREAMS</p> <p>This is helpful when reading standard protocols that operate with lines of text.</p> <pre><code>...\n# read a line data\nbyte_line = await reader.readline()\n</code></pre> <p>Additionally, there is a readexactly() method to read an exact number of bytes otherwise raise an exception, and a readuntil() that will read bytes until a specified character in byte form is read.</p>"},{"location":"asyncio/en/c21/#216-\u5982\u4f55\u5173\u95ed\u8fde\u63a5","title":"21.6 \u5982\u4f55\u5173\u95ed\u8fde\u63a5","text":"<p>21.6 How to Close Connection</p> \u4e2d\u6587\u82f1\u6587 <p>\u53ef\u4ee5\u901a\u8fc7 asyncio.StreamWriter \u5173\u95ed\u5957\u63a5\u5b57\u3002</p> <p>\u53ef\u4ee5\u8c03\u7528 close() \u65b9\u6cd5\u6765\u5173\u95ed\u5957\u63a5\u5b57\u3002</p> <p>\u8be5\u65b9\u6cd5\u5173\u95ed\u6d41\u548c\u5e95\u5c42\u5957\u63a5\u5b57\u3002</p> <p>\u2014 ASYNCIO STREAMS</p> <p>\u8be5\u65b9\u6cd5\u4e0d\u4f1a\u963b\u585e\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u5173\u95ed\u5957\u63a5\u5b57\nwriter.close()\n</code></pre> <p>\u867d\u7136 close() \u65b9\u6cd5\u4e0d\u4f1a\u963b\u585e\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u7b49\u5f85\u5957\u63a5\u5b57\u5b8c\u5168\u5173\u95ed\u540e\u518d\u7ee7\u7eed\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7 wait_close() \u65b9\u6cd5\u6765\u5b9e\u73b0\u3002</p> <p>\u7b49\u5f85\u6d41\u5173\u95ed\u3002 \u5e94\u5728 close() \u4e4b\u540e\u8c03\u7528\u4ee5\u7b49\u5f85\u5e95\u5c42\u8fde\u63a5\u5173\u95ed\u3002</p> <p>\u2014 ASYNCIO STREAMS</p> <p>\u8fd9\u662f\u4e00\u4e2a\u53ef\u4ee5\u7b49\u5f85\u7684\u534f\u7a0b\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u5173\u95ed\u5957\u63a5\u5b57\nwriter.close()\n# \u7b49\u5f85\u5957\u63a5\u5b57\u5173\u95ed\nawait writer.wait_closed()\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 is_close() \u65b9\u6cd5\u68c0\u67e5\u5957\u63a5\u5b57\u662f\u5426\u5df2\u5173\u95ed\u6216\u6b63\u5728\u5173\u95ed\u8fc7\u7a0b\u4e2d\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u68c0\u67e5\u5957\u63a5\u5b57\u662f\u5426\u5df2\u5173\u95ed\u6216\u6b63\u5728\u5173\u95ed\nif writer.is_closing():\n    # ...\n</code></pre> <p>The socket can be closed via the asyncio.StreamWriter.</p> <p>The close() method can be called which will close the socket.</p> <p>The method closes the stream and the underlying socket.</p> <p>\u2014 ASYNCIO STREAMS</p> <p>This method does not block.</p> <p>For example:</p> <pre><code>...\n# close the socket\nwriter.close()\n</code></pre> <p>Although the close() method does not block, we can wait for the socket to close completely before continuing on.</p> <p>This can be achieved via the wait_closed() method.</p> <p>Wait until the stream is closed. Should be called after close() to wait until the underlying connection is closed.</p> <p>\u2014 ASYNCIO STREAMS</p> <p>This is a coroutine that can be awaited.</p> <p>For example:</p> <pre><code>...\n# close the socket\nwriter.close()\n# wait for the socket to close\nawait writer.wait_closed()\n</code></pre> <p>We can check if the socket has been closed or is in the process of being closed via the is_closing() method.</p> <p>For example:</p> <pre><code>...\n# check if the socket is closed or closing\nif writer.is_closing():\n    # ...\n</code></pre>"},{"location":"asyncio/en/c22/","title":"22. \u68c0\u67e5\u7f51\u7ad9\u72b6\u6001\u7684\u793a\u4f8b","text":"<p>22. Example of Checking Website Status</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 asyncio \u901a\u8fc7\u6253\u5f00\u6d41\u5e76\u5199\u5165\u548c\u8bfb\u53d6 HTTP \u8bf7\u6c42\u548c\u54cd\u5e94\u6765\u67e5\u8be2\u7f51\u7ad9\u7684 HTTP \u72b6\u6001\u3002</p> <p>\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 asyncio \u540c\u65f6\u67e5\u8be2\u591a\u4e2a\u7f51\u7ad9\u7684\u72b6\u6001\uff0c\u751a\u81f3\u52a8\u6001\u62a5\u544a\u7ed3\u679c\u3002</p> <p>\u8ba9\u6211\u4eec\u5f00\u59cb\u5427\u3002</p> <p>We can query the HTTP status of websites using asyncio by opening a stream and writing and reading HTTP requests and responses.</p> <p>We can then use asyncio to query the status of many websites concurrently, and even report the results dynamically.</p> <p>Let\u2019s get started.</p>"},{"location":"asyncio/en/c22/#221-\u5982\u4f55\u4f7f\u7528-asyncio-\u68c0\u67e5-http-\u72b6\u6001","title":"22.1 \u5982\u4f55\u4f7f\u7528 Asyncio \u68c0\u67e5 HTTP \u72b6\u6001","text":"<p>22.1 How to Check HTTP Status with Asyncio</p> \u4e2d\u6587\u82f1\u6587 <p>asyncio \u6a21\u5757\u63d0\u4f9b\u5bf9\u6253\u5f00\u5957\u63a5\u5b57\u8fde\u63a5\u4ee5\u53ca\u901a\u8fc7\u6d41\u8bfb\u5199\u6570\u636e\u7684\u652f\u6301\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6b64\u529f\u80fd\u6765\u68c0\u67e5\u7f51\u9875\u7684\u72b6\u6001\u3002</p> <p>\u8fd9\u53ef\u80fd\u6d89\u53ca\u56db\u4e2a\u6b65\u9aa4\uff0c\u5b83\u4eec\u662f\uff1a</p> <ol> <li>\u6253\u5f00\u8fde\u63a5</li> <li>\u5199\u4e00\u4e2a\u8bf7\u6c42</li> <li>\u8bfb\u4e00\u4e2a\u54cd\u5e94</li> <li>\u5173\u95ed\u8fde\u63a5</li> </ol> <p>\u8ba9\u6211\u4eec\u4f9d\u6b21\u4ed4\u7ec6\u770b\u770b\u6bcf\u4e2a\u90e8\u5206\u3002</p> <p>The asyncio module provides support for opening socket connections and reading and writing data via streams.</p> <p>We can use this capability to check the status of web pages.</p> <p>This involves perhaps four steps, they are:</p> <ol> <li>Open a connection</li> <li>Write a request</li> <li>Read a response</li> <li>Close the connection</li> </ol> <p>Let\u2019s take a closer look at each part in turn.</p>"},{"location":"asyncio/en/c22/#222-\u6253\u5f00-http-\u8fde\u63a5","title":"22.2 \u6253\u5f00 HTTP \u8fde\u63a5","text":"<p>22.2 Open HTTP Connection</p> \u4e2d\u6587\u82f1\u6587 <p>\u53ef\u4ee5\u4f7f\u7528 asyncio.open_connection() \u51fd\u6570\u5728 asyncio \u4e2d\u6253\u5f00\u8fde\u63a5\u3002</p> <p>\u5728\u8bb8\u591a\u53c2\u6570\u4e2d\uff0c\u8be5\u51fd\u6570\u91c7\u7528\u5b57\u7b26\u4e32\u4e3b\u673a\u540d\u548c\u6574\u6570\u7aef\u53e3\u53f7</p> <p>\u8fd9\u662f\u4e00\u4e2a\u5fc5\u987b\u7b49\u5f85\u7684\u534f\u7a0b\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a StreamReader \u548c\u4e00\u4e2a StreamWriter\uff0c\u7528\u4e8e\u4f7f\u7528\u5957\u63a5\u5b57\u8fdb\u884c\u8bfb\u5199\u3002</p> <p>\u8fd9\u53ef\u7528\u4e8e\u5728\u7aef\u53e3 80 \u4e0a\u6253\u5f00 HTTP \u8fde\u63a5\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u6253\u5f00\u5957\u63a5\u5b57\u8fde\u63a5\nreader, writer = await asyncio.open_connection('www.google.com', 80)\n</code></pre> <p>\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528 ssl=True \u53c2\u6570\u6253\u5f00 SSL \u8fde\u63a5\u3002 \u8fd9\u53ef\u7528\u4e8e\u5728\u7aef\u53e3 443 \u4e0a\u6253\u5f00 HTTPS \u8fde\u63a5\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u6253\u5f00\u5957\u63a5\u5b57\u8fde\u63a5\nreader, writer = await asyncio.open_connection('www.google.com', 443, ssl=True)\n</code></pre> <p>A connection can be opened in asyncio using the asyncio.open_connection() function.</p> <p>Among many arguments, the function takes the string hostname and integer port number</p> <p>This is a coroutine that must be awaited and returns a StreamReader and a StreamWriter for reading and writing with the socket.</p> <p>This can be used to open an HTTP connection on port 80.</p> <p>For example:</p> <pre><code>...\n# open a socket connection\nreader, writer = await asyncio.open_connection('www.google.com', 80)\n</code></pre> <p>We can also open an SSL connection using the ssl=True argument. This can be used to open an HTTPS connection on port 443.</p> <p>For example:</p> <pre><code>...\n# open a socket connection\nreader, writer = await asyncio.open_connection('www.google.com', 443, ssl=True)\n</code></pre>"},{"location":"asyncio/en/c22/#223-\u5199\u5165-http-\u8bf7\u6c42","title":"22.3 \u5199\u5165 HTTP \u8bf7\u6c42","text":"<p>22.3 Write HTTP Request</p> \u4e2d\u6587\u82f1\u6587 <p>\u6253\u5f00\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5411 StreamWriter \u5199\u5165\u67e5\u8be2\u4ee5\u53d1\u51fa HTTP \u8bf7\u6c42\u3002</p> <p>\u4f8b\u5982\uff0cHTTP \u7248\u672c 1.1 \u8bf7\u6c42 \u662f\u7eaf\u6587\u672c\u5f62\u5f0f\u3002 \u6211\u4eec\u53ef\u4ee5\u8bf7\u6c42\u6587\u4ef6\u8def\u5f84\u201c/\u201d\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>GET / HTTP/1.1\nHost: www.google.com\n</code></pre> <p>\u91cd\u8981\u7684\u662f\uff0c\u6bcf\u884c\u672b\u5c3e\u5fc5\u987b\u6709\u56de\u8f66\u7b26\u548c\u6362\u884c\u7b26\uff08\\r\\n\uff09\uff0c\u5e76\u4e14\u672b\u5c3e\u6709\u4e00\u4e2a\u7a7a\u884c\u3002</p> <p>\u4f5c\u4e3a Python \u5b57\u7b26\u4e32\uff0c\u8fd9\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>'GET / HTTP/1.1\\r\\n'\n'Host: www.google.com\\r\\n'\n'\\r\\n'\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5728\u6b64\u5904\u4e86\u89e3\u6709\u5173 HTTP v1.1 \u8bf7\u6c42\u6d88\u606f\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>HTTP/1.1 \u8bf7\u6c42\u6d88\u606f</li> </ul> <p>\u5728\u5199\u5165 StreamWriter \u4e4b\u524d\uff0c\u5fc5\u987b\u5c06\u8be5\u5b57\u7b26\u4e32\u7f16\u7801\u4e3a\u5b57\u8282\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5bf9\u5b57\u7b26\u4e32\u672c\u8eab\u4f7f\u7528 encode() \u65b9\u6cd5\u6765\u5b9e\u73b0\u3002</p> <p>\u9ed8\u8ba4\u7684\u201cutf-8\u201d\u7f16\u7801\u53ef\u80fd\u5c31\u8db3\u591f\u4e86\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u5c06\u5b57\u7b26\u4e32\u7f16\u7801\u4e3a\u5b57\u8282\nbyte_data = string.encode()\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5728\u6b64\u5904\u67e5\u770b\u7f16\u7801\u5217\u8868\uff1a</p> <ul> <li>Python \u6807\u51c6\u7f16\u7801</li> </ul> <p>\u7136\u540e\u53ef\u4ee5\u901a\u8fc7 StreamWriter \u901a\u8fc7 write() \u5c06\u5b57\u8282\u5199\u5165\u5957\u63a5\u5b57 \u65b9\u6cd5\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u5c06\u67e5\u8be2\u5199\u5165\u5957\u63a5\u5b57\nwriter.write(byte_data)\n</code></pre> <p>\u5199\u5165\u8bf7\u6c42\u540e\uff0c\u6700\u597d\u7b49\u5f85\u5b57\u8282\u6570\u636e\u53d1\u9001\u548c\u5957\u63a5\u5b57\u51c6\u5907\u5c31\u7eea\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7 drain() \u65b9\u6cd5\u6765\u5b9e\u73b0\u3002</p> <p>\u8fd9\u662f\u4e00\u4e2a\u5fc5\u987b\u7b49\u5f85\u7684\u534f\u7a0b\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u7b49\u5f85\u5957\u63a5\u5b57\u51c6\u5907\u597d\u3002\nawait writer.drain()\n</code></pre> <p>Once open, we can write a query to the StreamWriter to make an HTTP request.</p> <p>For example, an HTTP version 1.1 request is in plain text. We can request the file path \u2018/\u2019, which may look as follows:</p> <pre><code>GET / HTTP/1.1\nHost: www.google.com\n</code></pre> <p>Importantly, there must be a carriage return and a line feed (\\r\\n) at the end of each line, and an empty line at the end.</p> <p>As Python strings this may look as follows:</p> <pre><code>'GET / HTTP/1.1\\r\\n'\n'Host: www.google.com\\r\\n'\n'\\r\\n'\n</code></pre> <p>You can learn more about HTTP v1.1 request messages here:</p> <ul> <li>HTTP/1.1 request messages</li> </ul> <p>This string must be encoded as bytes before being written to the StreamWriter.</p> <p>This can be achieved using the encode() method on the string itself.</p> <p>The default \u2018utf-8\u2018 encoding may be sufficient.</p> <p>For example:</p> <pre><code>...\n# encode string as bytes\nbyte_data = string.encode()\n</code></pre> <p>You can see a listing of encodings here:</p> <ul> <li>Python Standard Encodings</li> </ul> <p>The bytes can then be written to the socket via the StreamWriter via the write() method.</p> <p>For example:</p> <pre><code>...\n# encode string as bytes\nbyte_data = string.encode()\n</code></pre> <p>You can see a listing of encodings here:</p> <ul> <li>Python Standard Encodings</li> </ul> <p>The bytes can then be written to the socket via the StreamWriter via the write() method.</p> <p>For example:</p> <pre><code>...\n# write query to socket\nwriter.write(byte_data)\n</code></pre> <p>After writing the request, it is a good idea to wait for the byte data to be sent and for the socket to be ready.</p> <p>This can be achieved by the drain() method.</p> <p>This is a coroutine that must be awaited.</p> <p>For example:</p> <pre><code>...\n# wait for the socket to be ready.\nawait writer.drain()\n</code></pre>"},{"location":"asyncio/en/c22/#224-\u8bfb\u53d6-http-\u54cd\u5e94","title":"22.4 \u8bfb\u53d6 HTTP \u54cd\u5e94","text":"<p>22.4 Read HTTP Response</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e00\u65e6\u53d1\u51fa HTTP \u8bf7\u6c42\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8bfb\u53d6\u54cd\u5e94\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5957\u63a5\u5b57\u7684 StreamReader \u6765\u5b9e\u73b0\u3002</p> <p>\u53ef\u4ee5\u4f7f\u7528 read() \u65b9\u6cd5\u8bfb\u53d6\u54cd\u5e94\uff0c\u8be5\u65b9\u6cd5\u5c06\u8bfb\u53d6\u4e00\u5927\u5757\u5b57\u8282\uff0c\u6216\u8005\u4f7f\u7528 readline() \u65b9\u6cd5\u8bfb\u53d6\u4e00\u884c\u5b57\u8282\u3002</p> <p>\u6211\u4eec\u53ef\u80fd\u66f4\u559c\u6b22 readline() \u65b9\u6cd5\uff0c\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u57fa\u4e8e\u6587\u672c\u7684 HTTP \u534f\u8bae\uff0c\u5b83\u4e00\u6b21\u53d1\u9001\u4e00\u884c HTML \u6570\u636e\u3002</p> <p>readline() \u65b9\u6cd5\u662f\u4e00\u4e2a\u534f\u7a0b\uff0c\u5fc5\u987b\u7b49\u5f85\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u8bfb\u53d6\u4e00\u884c\u54cd\u5e94\nline_bytes = await reader.readline()\n</code></pre> <p>HTTP 1.1 \u54cd\u5e94 \u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff0c\u4e00\u4e2a\u7531\u7a7a\u884c\u5206\u9694\u7684\u6807\u5934\uff0c\u7136\u540e\u662f\u7531\u7a7a\u884c\u7ec8\u6b62\u7684\u6b63\u6587\u3002</p> <p>header \u5305\u542b\u6709\u5173\u8bf7\u6c42\u662f\u5426\u6210\u529f\u4ee5\u53ca\u5c06\u53d1\u9001\u4ec0\u4e48\u7c7b\u578b\u7684\u6587\u4ef6\u7684\u4fe1\u606f\uff0cbody \u5305\u542b\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u4f8b\u5982 HTML \u7f51\u9875\u3002</p> <p>HTTP \u6807\u5934\u7684\u7b2c\u4e00\u884c\u5305\u542b\u670d\u52a1\u5668\u4e0a\u6240\u8bf7\u6c42\u9875\u9762\u7684 HTTP \u72b6\u6001\u3002</p> <p>\u60a8\u53ef\u4ee5\u5728\u6b64\u5904\u4e86\u89e3\u6709\u5173 HTTP v1.1 \u54cd\u5e94\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>HTTP/1.1 \u54cd\u5e94\u6d88\u606f</li> </ul> <p>\u6bcf\u4e00\u884c\u90fd\u5fc5\u987b\u4ece\u5b57\u8282\u89e3\u7801\u4e3a\u5b57\u7b26\u4e32\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5bf9\u5b57\u8282\u6570\u636e\u4f7f\u7528 decode() \u65b9\u6cd5\u6765\u5b9e\u73b0\u3002 \u540c\u6837\uff0c\u9ed8\u8ba4\u7f16\u7801\u662f\u201cutf_8\u201d\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u5c06\u5b57\u8282\u89e3\u7801\u4e3a\u5b57\u7b26\u4e32\nline_data = line_bytes.decode()\n</code></pre> <p>Once the HTTP request has been made, we can read the response.</p> <p>This can be achieved via the StreamReader for the socket.</p> <p>The response can be read using the read() method which will read a chunk of bytes, or the readline() method which will read one line of bytes.</p> <p>We might prefer the readline() method because we are using the text-based HTTP protocol which sends HTML data one line at a time.</p> <p>The readline() method is a coroutine and must be awaited.</p> <p>For example:</p> <pre><code>...\n# read one line of response\nline_bytes = await reader.readline()\n</code></pre> <p>HTTP 1.1 responses are composed of two parts, a header separated by an empty line, then the body terminating with an empty line.</p> <p>The header has information about whether the request was successful and what type of file will be sent, and the body contains the content of the file, such as an HTML webpage.</p> <p>The first line of the HTTP header contains the HTTP status for the requested page on the server.</p> <p>You can learn more about HTTP v1.1 responses here:</p> <ul> <li>HTTP/1.1 response messages</li> </ul> <p>Each line must be decoded from bytes into a string.</p> <p>This can be achieved using the decode() method on the byte data. Again, the default encoding is \u2018utf_8\u2018.</p> <p>For example:</p> <pre><code>...\n# decode bytes into a string\nline_data = line_bytes.decode()\n</code></pre>"},{"location":"asyncio/en/c22/#225-\u5173\u95ed-http-\u8fde\u63a5","title":"22.5 \u5173\u95ed HTTP \u8fde\u63a5","text":"<p>22.5 Close HTTP Connection</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5173\u95ed StreamWriter \u6765\u5173\u95ed\u5957\u63a5\u5b57\u8fde\u63a5\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 close() \u65b9\u6cd5\u6765\u5b9e\u73b0\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u5173\u95ed\u8fde\u63a5\nwriter.close()\n</code></pre> <p>\u8fd9\u4e0d\u4f1a\u963b\u585e\u5e76\u4e14\u53ef\u80fd\u4e0d\u4f1a\u7acb\u5373\u5173\u95ed\u5957\u63a5\u5b57\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u5982\u4f55\u4f7f\u7528 asyncio \u53d1\u51fa HTTP \u8bf7\u6c42\u5e76\u8bfb\u53d6\u54cd\u5e94\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e9b\u68c0\u67e5\u7f51\u9875\u72b6\u6001\u7684\u793a\u4f8b\u3002</p> <p>We can close the socket connection by closing the StreamWriter.</p> <p>This can be achieved by calling the close() method.</p> <p>For example:</p> <pre><code>...\n# close the connection\nwriter.close()\n</code></pre> <p>This does not block and may not close the socket immediately.</p> <p>Now that we know how to make HTTP requests and read responses using asyncio, let\u2019s look at some worked examples of checking web page statuses.</p>"},{"location":"asyncio/en/c22/#226-\u6309\u987a\u5e8f\u68c0\u67e5-http-\u72b6\u6001\u7684\u793a\u4f8b","title":"22.6 \u6309\u987a\u5e8f\u68c0\u67e5 HTTP \u72b6\u6001\u7684\u793a\u4f8b","text":"<p>22.6 Example of Checking HTTP Status Sequentially</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u5f00\u53d1\u4e00\u4e2a\u793a\u4f8b\u6765\u4f7f\u7528 asyncio \u68c0\u67e5\u591a\u4e2a\u7f51\u7ad9\u7684 HTTP \u72b6\u6001\u3002</p> <p>\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u9996\u5148\u5f00\u53d1\u4e00\u4e2a\u534f\u7a0b\u6765\u68c0\u67e5\u7ed9\u5b9a URL \u7684\u72b6\u6001\u3002 \u7136\u540e\uff0c\u6211\u4eec\u5c06\u4e3a\u524d 10 \u4e2a\u7f51\u7ad9\u4e2d\u7684\u6bcf\u4e2a\u7f51\u7ad9\u8c03\u7528\u4e00\u6b21\u8be5\u534f\u7a0b\u3002</p> <p>\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u534f\u7a0b\uff0c\u5b83\u5c06\u63a5\u53d7 URL \u5b57\u7b26\u4e32\u5e76\u8fd4\u56de HTTP \u72b6\u6001\u3002</p> <pre><code># \u83b7\u53d6\u7f51\u9875\u7684 HTTP/S \u72b6\u6001\nasync def get_status(url):\n    # ...\n</code></pre> <p>URL \u5fc5\u987b\u88ab\u89e3\u6790\u4e3a\u5176\u7ec4\u6210\u90e8\u5206\u3002</p> <p>\u53d1\u51fa HTTP \u8bf7\u6c42\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4e3b\u673a\u540d\u548c\u6587\u4ef6\u8def\u5f84\u3002 \u6211\u4eec\u8fd8\u9700\u8981\u77e5\u9053 URL \u65b9\u6848\uff08HTTP \u6216 HTTPS\uff09\uff0c\u4ee5\u4fbf\u786e\u5b9a\u662f\u5426\u9700\u8981 SSL\u3002</p> <p>\u8fd9\u53ef\u4ee5\u4f7f\u7528 urllib.parse.urlsplit() \u51fd\u6570\u6765\u5b9e\u73b0\uff0c\u8be5\u51fd\u6570\u63a5\u53d7 URL \u5b57\u7b26\u4e32\u5e76\u8fd4\u56de\u6240\u6709 URL \u7684\u547d\u540d\u5143\u7ec4\u3002 \u7f51\u5740\u5143\u7d20\u3002</p> <pre><code>...\n# \u5c06 url \u62c6\u5206\u4e3a\u591a\u4e2a\u90e8\u5206\nurl_parsed = urlsplit(url)\n</code></pre> <p>\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u6839\u636e URL \u65b9\u6848\u6253\u5f00 HTTP \u8fde\u63a5\u5e76\u4f7f\u7528 URL \u4e3b\u673a\u540d\u3002</p> <pre><code>...\n# \u6253\u5f00\u8fde\u63a5\nif url_parsed.scheme == 'https':\n    reader, writer = await asyncio.open_connection(url_parsed.hostname, 443, ssl=True)\nelse:\n    reader, writer = await asyncio.open_connection(url_parsed.hostname, 80)\n</code></pre> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e3b\u673a\u540d\u548c\u6587\u4ef6\u8def\u5f84\u521b\u5efa HTTP GET \u8bf7\u6c42\uff0c\u5e76\u4f7f\u7528 StreamWriter \u5c06\u7f16\u7801\u5b57\u8282\u5199\u5165\u5957\u63a5\u5b57\u3002</p> <pre><code>...\n# send GET request\nquery = f'GET {url_parsed.path} HTTP/1.1\\r\\nHost: {url_parsed.hostname}\\r\\n\\r\\n'\n# write query to socket\nwriter.write(query.encode())\n# wait for the bytes to be written to the socket\nawait writer.drain()\n</code></pre> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u8bfb\u53d6 HTTP \u54cd\u5e94\u3002</p> <p>\u6211\u4eec\u53ea\u9700\u8981\u5305\u542b HTTP \u72b6\u6001\u7684\u54cd\u5e94\u7684\u7b2c\u4e00\u884c\u3002</p> <pre><code>...\n# \u8bfb\u53d6\u5355\u884c\u54cd\u5e94\nresponse = await reader.readline()\n</code></pre> <p>\u7136\u540e\u53ef\u4ee5\u5173\u95ed\u8fde\u63a5\u3002</p> <pre><code>...\n# \u5173\u95ed\u8fde\u63a5\nwriter.close()\n</code></pre> <p>\u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u89e3\u7801\u4ece\u670d\u52a1\u5668\u8bfb\u53d6\u7684\u5b57\u8282\u3001\u8fdc\u7a0b\u5c3e\u968f\u7a7a\u683c\uff0c\u5e76\u8fd4\u56de HTTP \u72b6\u6001\u3002</p> <pre><code>...\n# \u89e3\u7801\u5e76\u53bb\u9664\u7a7a\u767d\nstatus = response.decode().strip()\n# \u8fd4\u56de\u54cd\u5e94\nreturn status\n</code></pre> <p>\u5c06\u5b83\u4eec\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u4e0b\u9762\u5217\u51fa\u4e86\u5b8c\u6574\u7684 get_status() \u534f\u7a0b\u3002</p> <p>\u5b83\u6ca1\u6709\u4efb\u4f55\u9519\u8bef\u5904\u7406\uff0c\u4f8b\u5982\u65e0\u6cd5\u5230\u8fbe\u4e3b\u673a\u6216\u54cd\u5e94\u7f13\u6162\u7684\u60c5\u51b5\u3002</p> <p>\u8fd9\u4e9b\u8865\u5145\u5c06\u4e3a\u8bfb\u8005\u63d0\u4f9b\u4e00\u4e2a\u5f88\u597d\u7684\u6269\u5c55\u3002</p> <pre><code># \u83b7\u53d6\u7f51\u9875\u7684 HTTP/S \u72b6\u6001\nasync def get_status(url):\n    # \u5c06 url \u62c6\u5206\u4e3a\u591a\u4e2a\u7ec4\u4ef6\n    url_parsed = urlsplit(url)\n    # \u6253\u5f00\u8fde\u63a5\n    if url_parsed.scheme == 'https':\n        reader, writer = await asyncio.open_connection(url_parsed.hostname, 443, ssl=True)\n    else:\n        reader, writer = await asyncio.open_connection(url_parsed.hostname, 80)\n    # \u53d1\u9001GET\u8bf7\u6c42\n    query = f'GET {url_parsed.path} HTTP/1.1\\r\\nHost: {url_parsed.hostname}\\r\\n\\r\\n'\n    # \u5c06\u67e5\u8be2\u5199\u5165\u5957\u63a5\u5b57\n    writer.write(query.encode())\n    # \u7b49\u5f85\u5b57\u8282\u5199\u5165\u5957\u63a5\u5b57\n    await writer.drain()\n    # \u8bfb\u53d6\u5355\u884c\u54cd\u5e94\n    response = await reader.readline()\n    # \u5173\u95ed\u8fde\u63a5\n    writer.close()\n    # \u89e3\u7801\u5e76\u53bb\u9664\u7a7a\u767d\n    status = response.decode().strip()\n    # \u8fd4\u56de\u54cd\u5e94\n    return status\n</code></pre> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u6211\u4eec\u60f3\u8981\u68c0\u67e5\u7684\u591a\u4e2a\u7f51\u9875\u6216\u7f51\u7ad9\u8c03\u7528 get_status() \u534f\u7a0b\u3002</p> <p>\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u5b9a\u4e49\u4e16\u754c\u6392\u540d\u524d 10 \u7684\u7f51\u9875\u5217\u8868\u3002</p> <pre><code>...\n# \u8981\u68c0\u67e5\u7684\u524d 10 \u4e2a\u7f51\u7ad9\u5217\u8868\nsites = ['https://www.google.com/',\n    'https://www.youtube.com/',\n    'https://www.facebook.com/',\n    'https://twitter.com/',\n    'https://www.instagram.com/',\n    'https://www.baidu.com/',\n    'https://www.wikipedia.org/',\n    'https://yandex.ru/',\n    'https://yahoo.com/',\n    'https://www.whatsapp.com/'\n    ]\n</code></pre> <p>\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 get_status() \u534f\u7a0b\u4f9d\u6b21\u67e5\u8be2\u6bcf\u4e2a\u3002</p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c06\u5728\u5faa\u73af\u4e2d\u6309\u987a\u5e8f\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u5e76\u4f9d\u6b21\u62a5\u544a\u6bcf\u4e2a\u72b6\u6001\u3002</p> <pre><code>...\n# \u68c0\u67e5\u6240\u6709\u7f51\u7ad9\u7684\u72b6\u6001\nfor url in sites:\n    # \u83b7\u53d6 url \u7684\u72b6\u6001\n    status = await get_status(url)\n    # \u62a5\u544a url \u53ca\u5176\u72b6\u6001\n    print(f'{url:30}:\\t{status}')\n</code></pre> <p>\u4f7f\u7528 asyncio \u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u6bd4\u987a\u5e8f\u505a\u5f97\u66f4\u597d\uff0c\u4f46\u8fd9\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u8d77\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u4ee5\u540e\u8fdb\u884c\u6539\u8fdb\u3002</p> <p>\u5c06\u5b83\u4eec\u7ed3\u5408\u5728\u4e00\u8d77\uff0cmain() \u534f\u7a0b\u67e5\u8be2\u524d 10 \u4e2a\u7f51\u7ad9\u7684\u72b6\u6001\u3002</p> <pre><code># \u4e3b\u534f\u7a0b\nasync def main():\n    # \u8981\u68c0\u67e5\u7684\u524d 10 \u4e2a\u7f51\u7ad9\u5217\u8868\n    sites = ['https://www.google.com/',\n        'https://www.youtube.com/',\n        'https://www.facebook.com/',\n        'https://twitter.com/',\n        'https://www.instagram.com/',\n        'https://www.baidu.com/',\n        'https://www.wikipedia.org/',\n        'https://yandex.ru/',\n        'https://yahoo.com/',\n        'https://www.whatsapp.com/'\n        ]\n    # \u68c0\u67e5\u6240\u6709\u7f51\u7ad9\u7684\u72b6\u6001\n    for url in sites:\n        # \u83b7\u53d6 url \u7684\u72b6\u6001\n        status = await get_status(url)\n        # \u62a5\u544a url \u53ca\u5176\u72b6\u6001\n        print(f'{url:30}:\\t{status}')\n</code></pre> <p>\u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa main() \u534f\u7a0b\u5e76\u5c06\u5176\u7528\u4f5c asyncio \u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u3002</p> <pre><code>...\n# \u8fd0\u884c\u5f02\u6b65\u7a0b\u5e8f\nasyncio.run(main())\n</code></pre> <p>\u5c06\u5b83\u4eec\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u4e0b\u9762\u5217\u51fa\u4e86\u5b8c\u6574\u7684\u793a\u4f8b\u3002</p> <pre><code># SuperFastPython.com\n# \u68c0\u67e5\u8bb8\u591a\u7f51\u9875\u7684\u72b6\u6001\nimport asyncio\nfrom urllib.parse import urlsplit\n\n# \u83b7\u53d6\u7f51\u9875\u7684 HTTP/S \u72b6\u6001\nasync def get_status(url):\n    # \u5c06 url \u62c6\u5206\u4e3a\u591a\u4e2a\u7ec4\u4ef6\n    url_parsed = urlsplit(url)\n    # \u6253\u5f00\u8fde\u63a5\n    if url_parsed.scheme == 'https':\n        reader, writer = await asyncio.open_connection(url_parsed.hostname, 443, ssl=True)\n    else:\n        reader, writer = await asyncio.open_connection(url_parsed.hostname, 80)\n    # \u53d1\u9001 GET \u8bf7\u6c42\n    query = f'GET {url_parsed.path} HTTP/1.1\\r\\nHost: {url_parsed.hostname}\\r\\n\\r\\n'\n    # \u5c06\u67e5\u8be2\u5199\u5165\u5957\u63a5\u5b57\n    writer.write(query.encode())\n    # \u7b49\u5f85\u5b57\u8282\u5199\u5165\u5957\u63a5\u5b57\n    await writer.drain()\n    # \u8bfb\u53d6\u5355\u884c\u54cd\u5e94\n    response = await reader.readline()\n    # \u5173\u95ed\u8fde\u63a5\n    writer.close()\n    # \u89e3\u7801\u5e76\u53bb\u9664\u7a7a\u767d\n    status = response.decode().strip()\n    # \u8fd4\u56de\u54cd\u5e94\n    return status\n\n# \u4e3b\u534f\u7a0b\nasync def main():\n    # \u8981\u68c0\u67e5\u7684\u524d 10 \u4e2a\u7f51\u7ad9\u5217\u8868\n    sites = ['https://www.google.com/',\n        'https://www.youtube.com/',\n        'https://www.facebook.com/',\n        'https://twitter.com/',\n        'https://www.instagram.com/',\n        'https://www.baidu.com/',\n        'https://www.wikipedia.org/',\n        'https://yandex.ru/',\n        'https://yahoo.com/',\n        'https://www.whatsapp.com/'\n        ]\n    # \u68c0\u67e5\u6240\u6709\u7f51\u7ad9\u7684\u72b6\u6001\n    for url in sites:\n        # \u83b7\u53d6 url \u7684\u72b6\u6001\n        status = await get_status(url)\n        # \u62a5\u544a url \u53ca\u5176\u72b6\u6001\n        print(f'{url:30}:\\t{status}')\n\n# \u8fd0\u884c\u5f02\u6b65\u7a0b\u5e8f\nasyncio.run(main())\n</code></pre> <p>\u8fd0\u884c\u8be5\u793a\u4f8b\u9996\u5148\u521b\u5efa main() \u534f\u7a0b\u5e76\u5c06\u5176\u7528\u4f5c\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u3002</p> <p>main() \u534f\u7a0b\u8fd0\u884c\uff0c\u5b9a\u4e49\u524d 10 \u4e2a\u7f51\u7ad9\u7684\u5217\u8868\u3002</p> <p>\u7136\u540e\u6309\u987a\u5e8f\u904d\u5386\u7f51\u7ad9\u5217\u8868\u3002 main() \u534f\u7a0b\u6302\u8d77\u5e76\u8c03\u7528 get_status() \u534f\u7a0b\u6765\u67e5\u8be2\u67d0\u4e2a\u7f51\u7ad9\u7684\u72b6\u6001\u3002</p> <p>get_status() \u534f\u7a0b\u8fd0\u884c\u3001\u89e3\u6790 URL \u5e76\u6253\u5f00\u8fde\u63a5\u3002 \u5b83\u6784\u9020\u4e00\u4e2a HTTP GET \u67e5\u8be2\u5e76\u5c06\u5176\u5199\u5165\u4e3b\u673a\u3002 \u54cd\u5e94\u88ab\u8bfb\u53d6\u3001\u89e3\u7801\u5e76\u8fd4\u56de\u3002</p> <p>main() \u534f\u7a0b\u6062\u590d\u5e76\u62a5\u544a URL \u7684 HTTP \u72b6\u6001\u3002</p> <p>\u5bf9\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a URL \u91cd\u590d\u6b64\u64cd\u4f5c\u3002</p> <p>\u8be5\u7a0b\u5e8f\u5927\u7ea6\u9700\u8981 5.6 \u79d2\u624d\u80fd\u5b8c\u6210\uff0c\u6216\u8005\u5e73\u5747\u6bcf\u4e2a URL \u5927\u7ea6\u9700\u8981\u534a\u79d2\u3002</p> <p>\u8fd9\u7a81\u51fa\u663e\u793a\u4e86\u6211\u4eec\u5982\u4f55\u4f7f\u7528 asyncio \u6765\u67e5\u8be2\u7f51\u9875\u7684 HTTP \u72b6\u6001\u3002</p> <p>\u5c3d\u7ba1\u5982\u6b64\uff0c\u5b83\u5e76\u6ca1\u6709\u5145\u5206\u5229\u7528 asyncio \u6765\u5e76\u53d1\u6267\u884c\u4efb\u52a1\u3002</p> <pre><code>https://www.google.com/       : HTTP/1.1 200 OK\nhttps://www.youtube.com/      : HTTP/1.1 200 OK\nhttps://www.facebook.com/     : HTTP/1.1 302 Found\nhttps://twitter.com/          : HTTP/1.1 200 OK\nhttps://www.instagram.com/    : HTTP/1.1 200 OK\nhttps://www.baidu.com/        : HTTP/1.1 200 OK\nhttps://www.wikipedia.org/    : HTTP/1.1 200 OK\nhttps://yandex.ru/            : HTTP/1.1 302 Moved temporarily\nhttps://yahoo.com/            : HTTP/1.1 301 Moved Permanently\nhttps://www.whatsapp.com/     : HTTP/1.1 302 Found\n</code></pre> <p>\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u66f4\u65b0\u793a\u4f8b\u4ee5\u540c\u65f6\u6267\u884c\u534f\u7a0b\u3002</p> <p>We can develop an example to check the HTTP status for multiple websites using asyncio.</p> <p>In this example, we will first develop a coroutine that will check the status of a given URL. We will then call this coroutine once for each of the top 10 websites.</p> <p>Firstly, we can define a coroutine that will take a URL string and return the HTTP status.</p> <pre><code># get the HTTP/S status of a webpage\nasync def get_status(url):\n    # ...\n</code></pre> <p>The URL must be parsed into its constituent components.</p> <p>We require the hostname and file path when making the HTTP request. We also need to know the URL scheme (HTTP or HTTPS) in order to determine whether SSL is required nor not.</p> <p>This can be achieved using the urllib.parse.urlsplit() function that takes a URL string and returns a named tuple of all the URL elements.</p> <pre><code>...\n# split the url into components\nurl_parsed = urlsplit(url)\n</code></pre> <p>We can then open the HTTP connection based on the URL scheme and use the URL hostname.</p> <pre><code>...\n# open the connection\nif url_parsed.scheme == 'https':\n    reader, writer = await asyncio.open_connection(url_parsed.hostname, 443, ssl=True)\nelse:\n    reader, writer = await asyncio.open_connection(url_parsed.hostname, 80)\n</code></pre> <p>Next, we can create the HTTP GET request using the hostname and file path and write the encoded bytes to the socket using the StreamWriter.</p> <pre><code>...\n# send GET request\nquery = f'GET {url_parsed.path} HTTP/1.1\\r\\nHost: {url_parsed.hostname}\\r\\n\\r\\n'\n# write query to socket\nwriter.write(query.encode())\n# wait for the bytes to be written to the socket\nawait writer.drain()\n</code></pre> <p>Next, we can read the HTTP response.</p> <p>We only require the first line of the response that contains the HTTP status.</p> <pre><code>...\n# read the single line response\nresponse = await reader.readline()\n</code></pre> <p>The connection can then be closed.</p> <pre><code>...\n# close the connection\nwriter.close()\n</code></pre> <p>Finally, we can decode the bytes read from the server, remote trailing white space, and return the HTTP status.</p> <pre><code>...\n# decode and strip white space\nstatus = response.decode().strip()\n# return the response\nreturn status\n</code></pre> <p>Tying this together, the complete get_status() coroutine is listed below.</p> <p>It does not have any error handling, such as the case where the host cannot be reached or is slow to respond.</p> <p>These additions would make a nice extension for the reader.</p> <pre><code># get the HTTP/S status of a webpage\nasync def get_status(url):\n    # split the url into components\n    url_parsed = urlsplit(url)\n    # open the connection\n    if url_parsed.scheme == 'https':\n        reader, writer = await asyncio.open_connection(url_parsed.hostname, 443, ssl=True)\n    else:\n        reader, writer = await asyncio.open_connection(url_parsed.hostname, 80)\n    # send GET request\n    query = f'GET {url_parsed.path} HTTP/1.1\\r\\nHost: {url_parsed.hostname}\\r\\n\\r\\n'\n    # write query to socket\n    writer.write(query.encode())\n    # wait for the bytes to be written to the socket\n    await writer.drain()\n    # read the single line response\n    response = await reader.readline()\n    # close the connection\n    writer.close()\n    # decode and strip white space\n    status = response.decode().strip()\n    # return the response\n    return status\n</code></pre> <p>Next, we can call the get_status() coroutine for multiple web pages or websites we want to check.</p> <p>In this case, we will define a list of the top 10 web pages in the world.</p> <pre><code>...\n# list of top 10 websites to check\nsites = ['https://www.google.com/',\n    'https://www.youtube.com/',\n    'https://www.facebook.com/',\n    'https://twitter.com/',\n    'https://www.instagram.com/',\n    'https://www.baidu.com/',\n    'https://www.wikipedia.org/',\n    'https://yandex.ru/',\n    'https://yahoo.com/',\n    'https://www.whatsapp.com/'\n    ]\n</code></pre> <p>We can then query each, in turn, using our get_status() coroutine.</p> <p>In this case, we will do so sequentially in a loop, and report the status of each in turn.</p> <pre><code>...\n# check the status of all websites\nfor url in sites:\n    # get the status for the url\n    status = await get_status(url)\n    # report the url and its status\n    print(f'{url:30}:\\t{status}')\n</code></pre> <p>We can do better than sequential when using asyncio, but this provides a good starting point that we can improve upon later.</p> <p>Tying this together, the main() coroutine queries the status of the top 10 websites.</p> <pre><code># main coroutine\nasync def main():\n    # list of top 10 websites to check\n    sites = ['https://www.google.com/',\n        'https://www.youtube.com/',\n        'https://www.facebook.com/',\n        'https://twitter.com/',\n        'https://www.instagram.com/',\n        'https://www.baidu.com/',\n        'https://www.wikipedia.org/',\n        'https://yandex.ru/',\n        'https://yahoo.com/',\n        'https://www.whatsapp.com/'\n        ]\n    # check the status of all websites\n    for url in sites:\n        # get the status for the url\n        status = await get_status(url)\n        # report the url and its status\n        print(f'{url:30}:\\t{status}')\n</code></pre> <p>Finally, we can create the main() coroutine and use it as the entry point to the asyncio program.</p> <pre><code>...\n# run the asyncio program\nasyncio.run(main())\n</code></pre> <p>Tying this together, the complete example is listed below.</p> <pre><code># SuperFastPython.com\n# check the status of many webpages\nimport asyncio\nfrom urllib.parse import urlsplit\n\n# get the HTTP/S status of a webpage\nasync def get_status(url):\n    # split the url into components\n    url_parsed = urlsplit(url)\n    # open the connection\n    if url_parsed.scheme == 'https':\n        reader, writer = await asyncio.open_connection(url_parsed.hostname, 443, ssl=True)\n    else:\n        reader, writer = await asyncio.open_connection(url_parsed.hostname, 80)\n    # send GET request\n    query = f'GET {url_parsed.path} HTTP/1.1\\r\\nHost: {url_parsed.hostname}\\r\\n\\r\\n'\n    # write query to socket\n    writer.write(query.encode())\n    # wait for the bytes to be written to the socket\n    await writer.drain()\n    # read the single line response\n    response = await reader.readline()\n    # close the connection\n    writer.close()\n    # decode and strip white space\n    status = response.decode().strip()\n    # return the response\n    return status\n\n# main coroutine\nasync def main():\n    # list of top 10 websites to check\n    sites = ['https://www.google.com/',\n        'https://www.youtube.com/',\n        'https://www.facebook.com/',\n        'https://twitter.com/',\n        'https://www.instagram.com/',\n        'https://www.baidu.com/',\n        'https://www.wikipedia.org/',\n        'https://yandex.ru/',\n        'https://yahoo.com/',\n        'https://www.whatsapp.com/'\n        ]\n    # check the status of all websites\n    for url in sites:\n        # get the status for the url\n        status = await get_status(url)\n        # report the url and its status\n        print(f'{url:30}:\\t{status}')\n\n# run the asyncio program\nasyncio.run(main())\n</code></pre> <p>Running the example first creates the main() coroutine and uses it as the entry point into the program.</p> <p>The main() coroutine runs, defining a list of the top 10 websites.</p> <p>The list of websites is then traversed sequentially. The main() coroutine suspends and calls the get_status() coroutine to query the status of one website.</p> <p>The get_status() coroutine runs, parses the URL, and opens a connection. It constructs an HTTP GET query and writes it to the host. A response is read, decoded, and returned.</p> <p>The main() coroutine resumes and reports the HTTP status of the URL.</p> <p>This is repeated for each URL in the list.</p> <p>The program takes about 5.6 seconds to complete, or about half a second per URL on average.</p> <p>This highlights how we can use asyncio to query the HTTP status of webpages.</p> <p>Nevertheless, it does not take full advantage of the asyncio to execute tasks concurrently.</p> <pre><code>https://www.google.com/       : HTTP/1.1 200 OK\nhttps://www.youtube.com/      : HTTP/1.1 200 OK\nhttps://www.facebook.com/     : HTTP/1.1 302 Found\nhttps://twitter.com/          : HTTP/1.1 200 OK\nhttps://www.instagram.com/    : HTTP/1.1 200 OK\nhttps://www.baidu.com/        : HTTP/1.1 200 OK\nhttps://www.wikipedia.org/    : HTTP/1.1 200 OK\nhttps://yandex.ru/            : HTTP/1.1 302 Moved temporarily\nhttps://yahoo.com/            : HTTP/1.1 301 Moved Permanently\nhttps://www.whatsapp.com/     : HTTP/1.1 302 Found\n</code></pre> <p>Next, let\u2019s look at how we might update the example to execute the coroutines concurrently.</p>"},{"location":"asyncio/en/c22/#227-\u5e76\u53d1\u68c0\u67e5\u7f51\u7ad9\u72b6\u6001\u7684\u793a\u4f8b","title":"22.7 \u5e76\u53d1\u68c0\u67e5\u7f51\u7ad9\u72b6\u6001\u7684\u793a\u4f8b","text":"<p>22.7 Example of Checking Website Status Concurrently</p> \u4e2d\u6587\u82f1\u6587 <p>asyncio \u7684\u4e00\u4e2a\u597d\u5904\u662f\u6211\u4eec\u53ef\u4ee5\u540c\u65f6\u6267\u884c\u8bb8\u591a\u534f\u7a0b\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 asyncio.gather() \u51fd\u6570\u5728 asyncio \u4e2d\u540c\u65f6\u67e5\u8be2\u7f51\u7ad9\u7684\u72b6\u6001\u3002</p> <p>\u8be5\u51fd\u6570\u91c7\u7528\u4e00\u4e2a\u6216\u591a\u4e2a\u534f\u7a0b\uff0c\u6682\u505c\u6267\u884c\u6240\u63d0\u4f9b\u7684\u534f\u7a0b\uff0c\u5e76\u5c06\u6bcf\u4e2a\u534f\u7a0b\u7684\u7ed3\u679c\u4f5c\u4e3a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u8fd4\u56de\u3002 \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u904d\u5386\u534f\u7a0b\u7684 URL \u5217\u8868\u548c\u53ef\u8fed\u4ee3\u7684\u8fd4\u56de\u503c\u5e76\u62a5\u544a\u7ed3\u679c\u3002</p> <p>\u8fd9\u53ef\u80fd\u662f\u6bd4\u4e0a\u9762\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u3002</p> <p>\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u534f\u7a0b\u5217\u8868\u3002</p> <pre><code>...\n# \u521b\u5efa\u6240\u6709\u534f\u7a0b\u8bf7\u6c42\ncoros = [get_status(url) for url in sites]\n</code></pre> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u6267\u884c\u534f\u7a0b\u5e76\u4f7f\u7528 asyncio.gather() \u83b7\u53d6\u53ef\u8fed\u4ee3\u7684\u7ed3\u679c\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u65e0\u6cd5\u76f4\u63a5\u63d0\u4f9b\u534f\u7a0b\u5217\u8868\uff0c\u800c\u662f\u5fc5\u987b\u5c06\u5217\u8868\u89e3\u538b\u7f29\u4e3a\u5355\u72ec\u7684\u8868\u8fbe\u5f0f\uff0c\u8fd9\u4e9b\u8868\u8fbe\u5f0f\u4f5c\u4e3a\u51fd\u6570\u7684\u4f4d\u7f6e\u53c2\u6570\u63d0\u4f9b\u3002</p> <pre><code>...\n# \u6267\u884c\u6240\u6709\u534f\u7a0b\u5e76\u7b49\u5f85\nresults = await asyncio.gather(*coros)\n</code></pre> <p>\u8fd9\u5c06\u540c\u65f6\u6267\u884c\u6240\u6709\u534f\u7a0b\u5e76\u68c0\u7d22\u5b83\u4eec\u7684\u7ed3\u679c\u3002</p> <p>\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u904d\u5386 URL \u5217\u8868\u548c\u8fd4\u56de\u7684\u72b6\u6001\u5e76\u4f9d\u6b21\u62a5\u544a\u3002</p> <pre><code>...\n# \u5904\u7406\u6240\u6709\u7ed3\u679c\nfor url, status in zip(sites, results):\n    # \u62a5\u544a\u72b6\u6001\n    print(f'{url:30}:\\t{status}')\n</code></pre> <p>\u5c06\u5b83\u4eec\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u4e0b\u9762\u5217\u51fa\u4e86\u5b8c\u6574\u7684\u793a\u4f8b\u3002</p> <pre><code># SuperFastPython.com\n# \u68c0\u67e5\u8bb8\u591a\u7f51\u9875\u7684\u72b6\u6001\nimport asyncio\nfrom urllib.parse import urlsplit\n\n# \u83b7\u53d6\u7f51\u9875\u7684 HTTP/S \u72b6\u6001\nasync def get_status(url):\n    # \u5c06 url \u62c6\u5206\u4e3a\u591a\u4e2a\u7ec4\u4ef6\n    url_parsed = urlsplit(url)\n    # \u6253\u5f00\u8fde\u63a5\n    if url_parsed.scheme == 'https':\n        reader, writer = await asyncio.open_connection(url_parsed.hostname, 443, ssl=True)\n    else:\n        reader, writer = await asyncio.open_connection(url_parsed.hostname, 80)\n    # \u53d1\u9001 GET \u8bf7\u6c42\n    query = f'GET {url_parsed.path} HTTP/1.1\\r\\nHost: {url_parsed.hostname}\\r\\n\\r\\n'\n    # \u5c06\u67e5\u8be2\u5199\u5165\u5957\u63a5\u5b57\n    writer.write(query.encode())\n    # \u7b49\u5f85\u5b57\u8282\u5199\u5165\u5957\u63a5\u5b57\n    await writer.drain()\n    # \u8bfb\u53d6\u5355\u884c\u54cd\u5e94\n    response = await reader.readline()\n    # \u5173\u95ed\u8fde\u63a5\n    writer.close()\n    # \u89e3\u7801\u5e76\u53bb\u9664\u7a7a\u767d\u5b57\u7b26\n    status = response.decode().strip()\n    # \u8fd4\u56de\u54cd\u5e94\n    return status\n\n# \u4e3b\u534f\u7a0b\nasync def main():\n    # \u8981\u68c0\u67e5\u7684\u524d 10 \u4e2a\u7f51\u7ad9\u5217\u8868\n    sites = ['https://www.google.com/',\n        'https://www.youtube.com/',\n        'https://www.facebook.com/',\n        'https://twitter.com/',\n        'https://www.instagram.com/',\n        'https://www.baidu.com/',\n        'https://www.wikipedia.org/',\n        'https://yandex.ru/',\n        'https://yahoo.com/',\n        'https://www.whatsapp.com/'\n        ]\n    # \u521b\u5efa\u6240\u6709\u534f\u7a0b\u8bf7\u6c42\n    coros = [get_status(url) for url in sites]\n    # \u6267\u884c\u6240\u6709\u534f\u7a0b\u5e76\u7b49\u5f85\n    results = await asyncio.gather(*coros)\n    # \u5904\u7406\u6240\u6709\u7ed3\u679c\n    for url, status in zip(sites, results):\n        # \u62a5\u544a\u72b6\u6001\n        print(f'{url:30}:\\t{status}')\n\n# \u8fd0\u884c\u5f02\u6b65\u7a0b\u5e8f\nasyncio.run(main())\n</code></pre> <p>\u8fd0\u884c\u8be5\u793a\u4f8b\u4f1a\u50cf\u4ee5\u524d\u4e00\u6837\u6267\u884c main() \u534f\u7a0b\u3002</p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u534f\u7a0b\u5217\u8868\u662f\u5728\u5217\u8868\u63a8\u5bfc\u5f0f\u4e2d\u521b\u5efa\u7684\u3002</p> <p>\u7136\u540e\u8c03\u7528 asyncio.gather() \u51fd\u6570\uff0c\u4f20\u9012\u534f\u7a0b\u5e76\u6302\u8d77 main() \u534f\u7a0b\uff0c\u76f4\u5230\u5b83\u4eec\u5168\u90e8\u5b8c\u6210\u3002</p> <p>\u534f\u7a0b\u6267\u884c\uff0c\u540c\u65f6\u67e5\u8be2\u6bcf\u4e2a\u7f51\u7ad9\u5e76\u8fd4\u56de\u5176\u72b6\u6001\u3002</p> <p>main() \u534f\u7a0b\u6062\u590d\u5e76\u63a5\u6536\u53ef\u8fed\u4ee3\u7684\u72b6\u6001\u503c\u3002 \u7136\u540e\u4f7f\u7528 zip() \u5185\u7f6e\u51fd\u6570\u904d\u5386\u8be5\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4ee5\u53ca URL \u5217\u8868\uff0c\u5e76\u62a5\u544a\u72b6\u6001\u3002</p> <p>\u8fd9\u7a81\u51fa\u663e\u793a\u4e86\u4e00\u79cd\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u540c\u65f6\u6267\u884c\u534f\u7a0b\u5e76\u5728\u6240\u6709\u4efb\u52a1\u5b8c\u6210\u540e\u62a5\u544a\u7ed3\u679c\u3002</p> <p>\u5b83\u4e5f\u6bd4\u4e0a\u9762\u7684\u987a\u5e8f\u7248\u672c\u66f4\u5feb\uff0c\u5728\u6211\u7684\u7cfb\u7edf\u4e0a\u5927\u7ea6\u9700\u8981 1.4 \u79d2\u5373\u53ef\u5b8c\u6210\u3002</p> <pre><code>https://www.google.com/       : HTTP/1.1 200 OK\nhttps://www.youtube.com/      : HTTP/1.1 200 OK\nhttps://www.facebook.com/     : HTTP/1.1 302 Found\nhttps://twitter.com/          : HTTP/1.1 200 OK\nhttps://www.instagram.com/    : HTTP/1.1 200 OK\nhttps://www.baidu.com/        : HTTP/1.1 200 OK\nhttps://www.wikipedia.org/    : HTTP/1.1 200 OK\nhttps://yandex.ru/            : HTTP/1.1 302 Moved temporarily\nhttps://yahoo.com/            : HTTP/1.1 301 Moved Permanently\nhttps://www.whatsapp.com/     : HTTP/1.1 302 Found\n</code></pre> <p>\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u63a2\u8ba8\u4e00\u4e0b asyncio \u5165\u95e8\u65f6\u7684\u5e38\u89c1\u9519\u8bef\u3002</p> <p>A benefit of asyncio is that we can execute many coroutines concurrently.</p> <p>We can query the status of websites concurrently in asyncio using the asyncio.gather() function.</p> <p>This function takes one or more coroutines, suspends executing the provided coroutines, and returns the results from each as an iterable. We can then traverse the list of URLs and iterable of return values from the coroutines and report results.</p> <p>This may be a simpler approach than the above.</p> <p>First, we can create a list of coroutines.</p> <pre><code>...\n# create all coroutine requests\ncoros = [get_status(url) for url in sites]\n</code></pre> <p>Next, we can execute the coroutines and get the iterable of results using asyncio.gather().</p> <p>Note that we cannot provide the list of coroutines directly, but instead must unpack the list into separate expressions that are provided as positional arguments to the function.</p> <pre><code>...\n# execute all coroutines and wait\nresults = await asyncio.gather(*coros)\n</code></pre> <p>This will execute all of the coroutines concurrently and retrieve their results.</p> <p>We can then traverse the list of URLs and returned status and report each in turn.</p> <pre><code>...\n# process all results\nfor url, status in zip(sites, results):\n    # report status\n    print(f'{url:30}:\\t{status}')\n</code></pre> <p>Tying this together, the complete example is listed below.</p> <pre><code># SuperFastPython.com\n# check the status of many webpages\nimport asyncio\nfrom urllib.parse import urlsplit\n\n# get the HTTP/S status of a webpage\nasync def get_status(url):\n    # split the url into components\n    url_parsed = urlsplit(url)\n    # open the connection\n    if url_parsed.scheme == 'https':\n        reader, writer = await asyncio.open_connection(url_parsed.hostname, 443, ssl=True)\n    else:\n        reader, writer = await asyncio.open_connection(url_parsed.hostname, 80)\n    # send GET request\n    query = f'GET {url_parsed.path} HTTP/1.1\\r\\nHost: {url_parsed.hostname}\\r\\n\\r\\n'\n    # write query to socket\n    writer.write(query.encode())\n    # wait for the bytes to be written to the socket\n    await writer.drain()\n    # read the single line response\n    response = await reader.readline()\n    # close the connection\n    writer.close()\n    # decode and strip white space\n    status = response.decode().strip()\n    # return the response\n    return status\n\n# main coroutine\nasync def main():\n    # list of top 10 websites to check\n    sites = ['https://www.google.com/',\n        'https://www.youtube.com/',\n        'https://www.facebook.com/',\n        'https://twitter.com/',\n        'https://www.instagram.com/',\n        'https://www.baidu.com/',\n        'https://www.wikipedia.org/',\n        'https://yandex.ru/',\n        'https://yahoo.com/',\n        'https://www.whatsapp.com/'\n        ]\n    # create all coroutine requests\n    coros = [get_status(url) for url in sites]\n    # execute all coroutines and wait\n    results = await asyncio.gather(*coros)\n    # process all results\n    for url, status in zip(sites, results):\n        # report status\n        print(f'{url:30}:\\t{status}')\n\n# run the asyncio program\nasyncio.run(main())\n</code></pre> <p>Running the example executes the main() coroutine as before.</p> <p>In this case, a list of coroutines is created in a list comprehension.</p> <p>The asyncio.gather() function is then called, passing the coroutines and suspending the main() coroutine until they are all complete.</p> <p>The coroutines execute, querying each website concurrently and returning their status.</p> <p>The main() coroutine resumes and receives an iterable of status values. This iterable along with the list of URLs is then traversed using the zip() built-in function and the statuses are reported.</p> <p>This highlights a simpler approach to executing the coroutines concurrently and reporting the results after all tasks are completed.</p> <p>It is also faster than the sequential version above, completing in about 1.4 seconds on my system.</p> <pre><code>https://www.google.com/       : HTTP/1.1 200 OK\nhttps://www.youtube.com/      : HTTP/1.1 200 OK\nhttps://www.facebook.com/     : HTTP/1.1 302 Found\nhttps://twitter.com/          : HTTP/1.1 200 OK\nhttps://www.instagram.com/    : HTTP/1.1 200 OK\nhttps://www.baidu.com/        : HTTP/1.1 200 OK\nhttps://www.wikipedia.org/    : HTTP/1.1 200 OK\nhttps://yandex.ru/            : HTTP/1.1 302 Moved temporarily\nhttps://yahoo.com/            : HTTP/1.1 301 Moved Permanently\nhttps://www.whatsapp.com/     : HTTP/1.1 302 Found\n</code></pre> <p>Next, let\u2019s explore common errors when getting started with asyncio.</p>"},{"location":"asyncio/en/c23/","title":"23. Python Asyncio \u5e38\u89c1\u9519\u8bef","text":"<p>23. Python Asyncio Common Errors</p> \u4e2d\u6587\u82f1\u6587 <p>\u672c\u8282\u63d0\u4f9b\u4e86\u5f00\u53d1\u4eba\u5458\u5728 Python \u4e2d\u4f7f\u7528 asyncio \u65f6\u9047\u5230\u7684\u5e38\u89c1\u9519\u8bef\u7684\u793a\u4f8b\u3002</p> <p>5 \u4e2a\u6700\u5e38\u89c1\u7684\u5f02\u6b65\u9519\u8bef\u662f\uff1a</p> <ol> <li>\u5c1d\u8bd5\u901a\u8fc7\u8c03\u7528\u534f\u7a0b\u6765\u8fd0\u884c\u5b83\u4eec\u3002</li> <li>\u4e0d\u8ba9\u534f\u7a0b\u5728\u4e8b\u4ef6\u5faa\u73af\u4e2d\u8fd0\u884c\u3002</li> <li>\u4f7f\u7528 asyncio \u4f4e\u7ea7 API\u3002</li> <li>\u8fc7\u65e9\u9000\u51fa\u4e3b\u534f\u7a0b\u3002</li> <li>\u5047\u8bbe\u7ade\u4e89\u6761\u4ef6\u548c\u6b7b\u9501\u662f\u4e0d\u5b58\u5728\u7684\u3002</li> </ol> <p>\u8ba9\u6211\u4eec\u4f9d\u6b21\u4ed4\u7ec6\u770b\u770b\u6bcf\u4e00\u4e2a\u95ee\u9898\u3002</p> <p>This section gives examples of general errors encountered by developers when using asyncio in Python.</p> <p>The 5 most common asyncio errors are:</p> <ol> <li>Trying to run coroutines by calling them.</li> <li>Not letting coroutines run in the event loop.</li> <li>Using the asyncio low-level API.</li> <li>Exiting the main coroutine too early.</li> <li>Assuming race conditions and deadlocks are not possible.</li> </ol> <p>Let\u2019s take a closer look at each in turn.</p>"},{"location":"asyncio/en/c23/#231-\u9519\u8bef-1-\u5c1d\u8bd5\u901a\u8fc7\u51fd\u6570\u8c03\u7528\u7684\u65b9\u5f0f\u6765\u8fd0\u884c\u534f\u7a0b","title":"23.1 \u9519\u8bef 1: \u5c1d\u8bd5\u901a\u8fc7\u51fd\u6570\u8c03\u7528\u7684\u65b9\u5f0f\u6765\u8fd0\u884c\u534f\u7a0b","text":"<p>23.1 Error 1: Trying to Run Coroutines by Calling Them</p> \u4e2d\u6587\u82f1\u6587 <p>asyncio \u521d\u5b66\u8005\u9047\u5230\u7684\u6700\u5e38\u89c1\u9519\u8bef\u662f\u50cf\u51fd\u6570\u4e00\u6837\u8c03\u7528\u534f\u7a0b\u3002</p> <p>\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u201casync def\u201d\u8868\u8fbe\u5f0f\u5b9a\u4e49\u4e00\u4e2a\u534f\u7a0b\uff1a</p> <pre><code># \u81ea\u5b9a\u4e49\u534f\u7a0b\nasync def custom_coro():\n    print('hi there')\n</code></pre> <p>\u7136\u540e\uff0c\u521d\u5b66\u8005\u5c06\u5c1d\u8bd5\u50cf\u51fd\u6570\u4e00\u6837\u8c03\u7528\u8fd9\u4e2a\u534f\u7a0b\uff0c\u5e76\u671f\u671b\u62a5\u544a\u6253\u5370\u6d88\u606f\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u5c1d\u8bd5\u50cf\u51fd\u6570\u4e00\u6837\u8c03\u7528\u534f\u7a0b\u65f6\u51fa\u9519\ncustom_coro()\n</code></pre> <p>\u50cf\u51fd\u6570\u4e00\u6837\u8c03\u7528\u534f\u7a0b\u4e0d\u4f1a\u6267\u884c\u534f\u7a0b\u4e3b\u4f53\u3002</p> <p>\u76f8\u53cd\uff0c\u5b83\u5c06\u521b\u5efa\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61\u3002</p> <p>\u7136\u540e\u53ef\u4ee5\u5728 asyncio \u8fd0\u884c\u65f6\u4e2d\u7b49\u5f85\u8be5\u5bf9\u8c61\uff0c\u4f8b\u5982\uff1a\u4e8b\u4ef6\u5faa\u73af\uff08Event Loop\uff09\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>asyncio.run()</code> \u51fd\u6570\u542f\u52a8\u4e8b\u4ef6\u5faa\u73af\u6765\u8fd0\u884c\u534f\u7a0b\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u8fd0\u884c\u534f\u7a0b\nasyncio.run(custom_coro())\n</code></pre> <p>\u6216\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u6302\u8d77\u5f53\u524d\u534f\u7a0b\u5e76\u4f7f\u7528\u201cawait\u201d\u8868\u8fbe\u5f0f\u8c03\u5ea6\u53e6\u4e00\u4e2a\u534f\u7a0b\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u8c03\u5ea6\u4e00\u4e2a\u534f\u7a0b\nawait custom_coro()\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173\u8fd0\u884c\u534f\u7a0b\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>\u5982\u4f55\u5728 Python \u4e2d\u8fd0\u884c Asyncio \u534f\u7a0b</li> </ul> <p>The most common error encountered by beginners to asyncio is calling a coroutine like a function.</p> <p>For example, we can define a coroutine using the \u201casync def\u201d expression:</p> <pre><code># custom coroutine\nasync def custom_coro():\n    print('hi there')\n</code></pre> <p>The beginner will then attempt to call this coroutine like a function and expect the print message to be reported.</p> <p>For example:</p> <pre><code>...\n# error attempt at calling a coroutine like a function\ncustom_coro()\n</code></pre> <p>Calling a coroutine like a function will not execute the body of the coroutine.</p> <p>Instead, it will create a coroutine object.</p> <p>This object can then be awaited within the asyncio runtime, e.g. the event loop.</p> <p>We can start the event loop to run the coroutine using the asyncio.run() function.</p> <p>For example:</p> <pre><code>...\n# run a coroutine\nasyncio.run(custom_coro())\n</code></pre> <p>Alternatively, we can suspend the current coroutine and schedule the other coroutine using the \u201cawait\u201d expression.</p> <p>For example:</p> <pre><code>...\n# schedule a coroutine\nawait custom_coro()\n</code></pre> <p>You can learn more about running coroutines in the tutorial:</p> <ul> <li>How to Run an Asyncio Coroutine in Python</li> </ul>"},{"location":"asyncio/en/c23/#232-\u9519\u8bef-2-\u4e0d\u5728\u4e8b\u4ef6\u5faa\u73af\u4e2d\u8fd0\u884c\u534f\u7a0b","title":"23.2 \u9519\u8bef 2: \u4e0d\u5728\u4e8b\u4ef6\u5faa\u73af\u4e2d\u8fd0\u884c\u534f\u7a0b","text":"<p>23.2 Error 2: Not Letting Coroutines Run in the Event Loop</p> \u4e2d\u6587\u82f1\u6587 <p>\u5982\u679c\u534f\u7a0b\u672a\u8fd0\u884c\uff0c\u60a8\u5c06\u6536\u5230\u5982\u4e0b\u8fd0\u884c\u65f6\u8b66\u544a\uff1a</p> <pre><code>sys:1: RuntimeWarning: coroutine 'custom_coro' was never awaited\n</code></pre> <p>\u5982\u679c\u60a8\u521b\u5efa\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61\u4f46\u6ca1\u6709\u5b89\u6392\u5b83\u5728 asyncio \u4e8b\u4ef6\u5faa\u73af\u4e2d\u6267\u884c\uff0c\u5c31\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u3002</p> <p>\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u5c1d\u8bd5\u4ece\u5e38\u89c4 Python \u7a0b\u5e8f\u8c03\u7528\u534f\u7a0b\uff1a</p> <pre><code>...\n# \u5c1d\u8bd5\u8c03\u7528\u534f\u7a0b\ncustom_coro()\n</code></pre> <p>\u8fd9\u4e0d\u4f1a\u8c03\u7528\u534f\u7a0b\u3002</p> <p>\u76f8\u53cd\uff0c\u5b83\u5c06\u521b\u5efa\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61\ncoro = custom_coro()\n</code></pre> <p>\u5982\u679c\u60a8\u4e0d\u5141\u8bb8\u8be5\u534f\u7a0b\u8fd0\u884c\uff0c\u60a8\u5c06\u6536\u5230\u8fd0\u884c\u65f6\u9519\u8bef\u3002</p> <p>\u6b63\u5982\u6211\u4eec\u5728\u4e0a\u4e00\u8282\u4e2d\u770b\u5230\u7684\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u542f\u52a8 asyncio \u4e8b\u4ef6\u5faa\u73af\u5e76\u5411\u5176\u4f20\u9012\u534f\u7a0b\u5bf9\u8c61\u6765\u8ba9\u534f\u7a0b\u8fd0\u884c\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61\ncoro = custom_coro()\n# \u8fd0\u884c\u534f\u7a0b\nasyncio.run(coro)\n</code></pre> <p>\u6216\u8005\uff0c\u5728\u590d\u5408\u8bed\u53e5\u7684\u4e00\u884c\u4e2d\uff1a</p> <pre><code>...\n# \u8fd0\u884c\u534f\u7a0b\nasyncio.run(custom_coro())\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173\u8fd0\u884c\u534f\u7a0b\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>\u5982\u4f55\u5728 Python \u4e2d\u8fd0\u884c Asyncio \u534f\u7a0b</li> </ul> <p>\u5982\u679c\u60a8\u5728 asyncio \u7a0b\u5e8f\u4e2d\u6536\u5230\u6b64\u9519\u8bef\uff0c\u90a3\u662f\u56e0\u4e3a\u60a8\u521b\u5efa\u4e86\u4e00\u4e2a\u534f\u7a0b\u4f46\u5c1a\u672a\u5b89\u6392\u5176\u6267\u884c\u3002</p> <p>\u8fd9\u53ef\u4ee5\u4f7f\u7528 await \u8868\u8fbe\u5f0f\u6765\u5b9e\u73b0\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61\ncoro = custom_coro()\n# \u6302\u8d77\u5e76\u5141\u8bb8\u5176\u4ed6\u534f\u7a0b\u8fd0\u884c\nawait coro\n</code></pre> <p>\u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u5b89\u6392\u5b83\u4f5c\u4e3a\u4efb\u52a1\u72ec\u7acb\u8fd0\u884c\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61\ncoro = custom_coro()\n# \u5b89\u6392 coro \u4f5c\u4e3a\u4efb\u52a1\u76f8\u4e92\u4f9d\u8d56\u5730\u8fd0\u884c\ntask = asyncio.create_task(coro)\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173\u521b\u5efa\u4efb\u52a1\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>\u5982\u4f55\u5728 Python \u4e2d\u521b\u5efaAsyncio\u4efb\u52a1</li> </ul> <p>If a coroutine is not run, you will get a runtime warning as follows:</p> <pre><code>sys:1: RuntimeWarning: coroutine 'custom_coro' was never awaited\n</code></pre> <p>This will happen if you create a coroutine object but do not schedule it for execution within the asyncio event loop.</p> <p>For example, you may attempt to call a coroutine from a regular Python program:</p> <pre><code>...\n# attempt to call the coroutine\ncustom_coro()\n</code></pre> <p>This will not call the coroutine.</p> <p>Instead, it will create a coroutine object.</p> <p>For example:</p> <pre><code>...\n# create a coroutine object\ncoro = custom_coro()\n</code></pre> <p>If you do not allow this coroutine to run, you will get a runtime error.</p> <p>You can let the coroutine run, as we saw in the previous section, by starting the asyncio event loop and passing it the coroutine object.</p> <p>For example:</p> <pre><code>...\n# create a coroutine object\ncoro = custom_coro()\n# run a coroutine\nasyncio.run(coro)\n</code></pre> <p>Or, on one line in a compound statement:</p> <pre><code>...\n# run a coroutine\nasyncio.run(custom_coro())\n</code></pre> <p>You can learn more about running coroutines in the tutorial:</p> <ul> <li>How to Run an Asyncio Coroutine in Python</li> </ul> <p>If you get this error within an asyncio program, it is because you have created a coroutine and have not scheduled it for execution.</p> <p>This can be achieved using the await expression.</p> <p>For example:</p> <pre><code>...\n# create a coroutine object\ncoro = custom_coro()\n# suspend and allow the other coroutine to run\nawait coro\n</code></pre> <p>Or, you can schedule it to run independently as a task.</p> <p>For example:</p> <pre><code>...\n# create a coroutine object\ncoro = custom_coro()\n# schedule the coro to run as a task interdependently\ntask = asyncio.create_task(coro)\n</code></pre> <p>You can learn more about creating tasks in the tutorial:</p> <ul> <li>How to Create an Asyncio Task in Python</li> </ul>"},{"location":"asyncio/en/c23/#233-\u9519\u8bef-3-\u4f7f\u7528\u4f4e\u7ea7\u7684-asyncio-api","title":"23.3 \u9519\u8bef 3: \u4f7f\u7528\u4f4e\u7ea7\u7684 Asyncio API","text":"<p>23.3 Error 3: Using the Low-Level Asyncio API</p> \u4e2d\u6587\u82f1\u6587 <p>\u521d\u5b66\u8005\u7684\u4e00\u4e2a\u5927\u95ee\u9898\u662f\u4ed6\u4eec\u4f7f\u7528\u4e86\u9519\u8bef\u7684 asyncio API\u3002</p> <p>\u7531\u4e8e\u591a\u79cd\u539f\u56e0\uff0c\u8fd9\u79cd\u60c5\u51b5\u5f88\u5e38\u89c1\u3002</p> <ul> <li>API \u5728\u6700\u65b0\u7248\u672c\u7684 Python \u4e2d\u53d1\u751f\u4e86\u5f88\u5927\u53d8\u5316\u3002</li> <li>API \u6587\u6863\u9875\u9762\u663e\u793a\u4e86\u8fd9\u4e24\u4e2a API\uff0c\u8fd9\u8ba9\u4e8b\u60c5\u53d8\u5f97\u6df7\u4e71\u3002</li> <li>\u7f51\u7edc\u4e0a\u5176\u4ed6\u5730\u65b9\u7684\u793a\u4f8b\u6df7\u5408\u4f7f\u7528\u4e0d\u540c\u7684 API\u3002</li> </ul> <p>\u4f7f\u7528\u9519\u8bef\u7684 API \u4f1a\u4f7f\u4e8b\u60c5\u53d8\u5f97\u66f4\u52a0\u5197\u957f\uff08\u4f8b\u5982\u66f4\u591a\u4ee3\u7801\uff09\u3001\u66f4\u52a0\u56f0\u96be\u5e76\u4e14\u66f4\u96be\u4ee5\u7406\u89e3\u3002</p> <p>Asyncio \u63d0\u4f9b\u4e24\u4e2a API.</p> <ol> <li>\u9762\u5411\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\uff08\u6211\u4eec\uff09\u7684\u9ad8\u7ea7 API</li> <li>\u9762\u5411\u6846\u67b6\u548c\u5e93\u5f00\u53d1\u4eba\u5458\uff08\u4e0d\u662f\u6211\u4eec\uff09\u7684\u4f4e\u7ea7 API</li> </ol> <p>\u8f83\u4f4e\u7ea7\u522b\u7684 API \u4e3a\u9ad8\u7ea7 API \u63d0\u4f9b\u57fa\u7840\uff0c\u5305\u62ec\u4e8b\u4ef6\u5faa\u73af\u3001\u4f20\u8f93\u534f\u8bae\u3001\u7b56\u7565\u7b49\u7684\u5185\u90e8\u7ed3\u6784\u3002</p> <p>\u2026 \u6709\u4f9b\u5e93\u548c\u6846\u67b6\u5f00\u53d1\u4eba\u5458\u4f7f\u7528\u7684\u4f4e\u7ea7 API</p> <p>\u2014 ASYNCIO \u2014 ASYNCHRONOUS I/O</p> <p>\u6211\u4eec\u51e0\u4e4e\u5e94\u8be5\u59cb\u7ec8\u575a\u6301\u4f7f\u7528\u9ad8\u7ea7 API\u3002</p> <p>\u5f00\u59cb\u65f6\u6211\u4eec\u7edd\u5bf9\u5fc5\u987b\u575a\u6301\u4f7f\u7528\u9ad8\u7ea7 API\u3002</p> <p>\u6709\u65f6\u6211\u4eec\u53ef\u80fd\u4f1a\u5229\u7528\u4f4e\u7ea7 API \u6765\u5b9e\u73b0\u7279\u5b9a\u7684\u7ed3\u679c\u3002</p> <p>\u5982\u679c\u60a8\u5f00\u59cb\u83b7\u53d6\u4e8b\u4ef6\u5faa\u73af\u7684\u53e5\u67c4\u6216\u4f7f\u7528\u201cloop\u201d\u53d8\u91cf\u6765\u6267\u884c\u64cd\u4f5c\uff0c\u90a3\u4e48\u60a8\u5c31\u505a\u9519\u4e86\u3002</p> <p>\u6211\u5e76\u4e0d\u662f\u8bf4\u4e0d\u8981\u5b66\u4e60\u4f4e\u7ea7 API\u3002</p> <p>\u5927\u80c6\u8bd5\u8bd5\u5427\u3002 \u8fd9\u5f88\u68d2\u3002</p> <p>\u53ea\u662f\u4e0d\u8981\u4ece\u90a3\u91cc\u5f00\u59cb\u3002</p> <p>\u901a\u8fc7\u9ad8\u7ea7 API \u9a71\u52a8 asyncio \u4e00\u6bb5\u65f6\u95f4\u3002 \u5f00\u53d1\u4e00\u4e9b\u7a0b\u5e8f\u3002 \u719f\u6089\u5f02\u6b65\u7f16\u7a0b\u5e76\u968f\u610f\u8fd0\u884c\u534f\u7a0b\u3002</p> <p>\u7136\u540e\uff0c\u6df1\u5165\u770b\u770b\u76f8\u5173\u6280\u672f\u7ec6\u8282\u3002</p> <p>A big problem with beginners is that they use the wrong asyncio API.</p> <p>This is common for a number of reasons.</p> <ul> <li>The API has changed a lot with recent versions of Python.</li> <li>The API docs page makes things confusing, showing both APIs.</li> <li>Examples elsewhere on the web mix up using the different APIs.</li> </ul> <p>Using the wrong API makes things more verbose (e.g. more code), more difficult, and way less understandable.</p> <p>Asyncio offers two APIs.</p> <ol> <li>High-level API for application developers (us)</li> <li>Low-level API for framework and library developers (not us)</li> </ol> <p>The lower-level API provides the foundation for the high-level API and includes the internals of the event loop, transport protocols, policies, and more.</p> <p>\u2026 there are low-level APIs for library and framework developers</p> <p>\u2014 ASYNCIO \u2014 ASYNCHRONOUS I/O We should almost always stick to the high-level API.</p> <p>We absolutely must stick to the high-level API when getting started.</p> <p>We may dip into the low-level API to achieve specific outcomes on occasion.</p> <p>If you start getting a handle on the event loop or use a \u201cloop\u201d variable to do things, you are doing it wrong.</p> <p>I am not saying don\u2019t learn the low-level API.</p> <p>Go for it. It\u2019s great.</p> <p>Just don\u2019t start there.</p> <p>Drive asyncio via the high-level API for a while. Develop some programs. Get comfortable with asynchronous programming and running coroutines at will.</p> <p>Then later, dip in and have a look around.</p>"},{"location":"asyncio/en/c23/#234-\u9519\u8bef-4-\u9000\u51fa\u4e3b\u534f\u7a0b\u592a\u65e9","title":"23.4 \u9519\u8bef 4: \u9000\u51fa\u4e3b\u534f\u7a0b\u592a\u65e9","text":"<p>23.4 Error 4: Exiting the Main Coroutine Too Early</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f02\u6b65\u7a0b\u5e8f\u4e2d\u7684\u4e00\u4e2a\u4e3b\u8981\u6df7\u4e71\u70b9\u662f\u6ca1\u6709\u7ed9\u4efb\u52a1\u8db3\u591f\u7684\u65f6\u95f4\u6765\u5b8c\u6210\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 asyncio.create_task() \u65b9\u6cd5\u5b89\u6392\u8bb8\u591a\u534f\u7a0b\u5728 asyncio \u7a0b\u5e8f\u4e2d\u72ec\u7acb\u8fd0\u884c\u3002</p> <p>\u4e3b\u534f\u7a0b\uff08asyncio \u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\uff09\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\u5176\u4ed6\u6d3b\u52a8\u3002</p> <p>\u5982\u679c\u4e3b\u534f\u7a0b\u9000\u51fa\uff0c\u5219 asyncio \u7a0b\u5e8f\u5c06\u7ec8\u6b62\u3002</p> <p>\u5373\u4f7f\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u534f\u7a0b\u4f5c\u4e3a\u4efb\u52a1\u72ec\u7acb\u8fd0\u884c\uff0c\u7a0b\u5e8f\u4e5f\u4f1a\u7ec8\u6b62\u3002</p> <p>\u8fd9\u53ef\u80fd\u4f1a\u8ba9\u4f60\u63aa\u624b\u4e0d\u53ca\u3002</p> <p>\u60a8\u53ef\u4ee5\u53d1\u51fa\u8bb8\u591a\u4efb\u52a1\uff0c\u7136\u540e\u5141\u8bb8\u4e3b\u534f\u7a0b\u6062\u590d\uff0c\u5e76\u671f\u671b\u6240\u6709\u53d1\u51fa\u7684\u4efb\u52a1\u90fd\u80fd\u5728\u81ea\u5df1\u7684\u65f6\u95f4\u5185\u5b8c\u6210\u3002</p> <p>\u76f8\u53cd\uff0c\u5982\u679c\u4e3b\u534f\u7a0b\u6ca1\u6709\u5176\u4ed6\u4e8b\u60c5\u53ef\u505a\uff0c\u5b83\u5e94\u8be5\u7b49\u5f85\u5269\u4f59\u7684\u4efb\u52a1\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u9996\u5148\u901a\u8fc7 asyncio.all_tasks() \u51fd\u6570\u83b7\u53d6\u4e00\u7ec4\u6240\u6709\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\uff0c\u5c06\u5176\u81ea\u8eab\u4ece\u8be5\u7ec4\u4e2d\u5220\u9664\uff0c\u7136\u540e\u901a\u8fc7 asyncio.wait() \u51fd\u6570\u7b49\u5f85\u5269\u4f59\u4efb\u52a1\u6765\u5b9e\u73b0\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u83b7\u53d6\u6240\u6709\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u7684\u96c6\u5408\nall_tasks = asyncio.all_tasks()\n# \u83b7\u53d6\u5f53\u524d\u4efb\u52a1\ncurrent_task = asyncio.current_task()\n# \u4ece\u6240\u6709\u4efb\u52a1\u5217\u8868\u4e2d\u5220\u9664\u5f53\u524d\u4efb\u52a1\nall_tasks.remove(current_task)\n# \u6682\u505c\u76f4\u5230\u6240\u6709\u4efb\u52a1\u5b8c\u6210\nawait asyncio.wait(all_tasks)\n</code></pre> <p>A major point of confusion in asyncio programs is not giving tasks enough time to complete.</p> <p>We can schedule many coroutines to run independently within an asyncio program via the asyncio.create_task() method.</p> <p>The main coroutine, the entry point for the asyncio program, can then carry on with other activities.</p> <p>If the main coroutine exits, then the asyncio program will terminate.</p> <p>The program will terminate even if there are one or many coroutines running independently as tasks.</p> <p>This can catch you off guard.</p> <p>You may issue many tasks and then allow the main coroutine to resume, expecting all issued tasks to complete in their own time.</p> <p>Instead, if the main coroutine has nothing else to do, it should wait on the remaining tasks.</p> <p>This can be achieved by first getting a set of all running tasks via the asyncio.all_tasks() function, removing itself from this set, then waiting on the remaining tasks via the asyncio.wait() function.</p> <p>For example:</p> <pre><code>...\n# get a set of all running tasks\nall_tasks = asyncio.all_tasks()\n# get the current tasks\ncurrent_task = asyncio.current_task()\n# remove the current task from the list of all tasks\nall_tasks.remove(current_task)\n# suspend until all tasks are completed\nawait asyncio.wait(all_tasks)\n</code></pre>"},{"location":"asyncio/en/c23/#235-\u9519\u8bef-5-\u5047\u8bbe\u7ade\u4e89\u6761\u4ef6\u548c\u6b7b\u9501\u662f\u4e0d\u53ef\u80fd\u7684","title":"23.5 \u9519\u8bef 5: \u5047\u8bbe\u7ade\u4e89\u6761\u4ef6\u548c\u6b7b\u9501\u662f\u4e0d\u53ef\u80fd\u7684","text":"<p>23.5 Error 5: Assuming Race Conditions and Deadlocks are Impossible</p> \u4e2d\u6587\u82f1\u6587 <p>\u5e76\u53d1\u7f16\u7a0b\u5b58\u5728\u5e76\u53d1\u7279\u5b9a\u6545\u969c\u6a21\u5f0f\u7684\u5371\u9669\u3002</p> <p>\u8fd9\u5305\u62ec\u7ade\u4e89\u6761\u4ef6\u548c\u6b7b\u9501\u7b49\u95ee\u9898\u3002</p> <p>\u7ade\u4e89\u6761\u4ef6\u6d89\u53ca\u4e24\u4e2a\u6216\u591a\u4e2a\u5e76\u53d1\u5355\u5143\u540c\u65f6\u6267\u884c\u540c\u4e00\u5173\u952e\u90e8\u5206\uff0c\u5e76\u4f7f\u8d44\u6e90\u6216\u6570\u636e\u5904\u4e8e\u4e0d\u4e00\u81f4\u6216\u610f\u5916\u72b6\u6001\u3002 \u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6570\u636e\u635f\u574f\u548c\u6570\u636e\u4e22\u5931\u3002</p> <p>\u6b7b\u9501\u662f\u6307\u5e76\u53d1\u5355\u5143\u7b49\u5f85\u6c38\u8fdc\u4e0d\u4f1a\u53d1\u751f\u7684\u6761\u4ef6\uff0c\u4f8b\u5982\u8d44\u6e90\u53ef\u7528\u3002</p> <p>\u8bb8\u591a Python \u5f00\u53d1\u4eba\u5458\u8ba4\u4e3a asyncio \u4e2d\u7684\u534f\u7a0b\u4e0d\u53ef\u80fd\u51fa\u73b0\u8fd9\u4e9b\u95ee\u9898\u3002</p> <p>\u539f\u56e0\u662f\u4efb\u4e00\u65f6\u95f4\u53ea\u6709\u4e00\u4e2a\u534f\u7a0b\u53ef\u4ee5\u5728\u4e8b\u4ef6\u5faa\u73af\u5185\u8fd0\u884c\u3002</p> <p>\u786e\u5b9e\uff0c\u4e00\u6b21\u53ea\u80fd\u8fd0\u884c\u4e00\u4e2a\u534f\u7a0b\u3002</p> <p>\u95ee\u9898\u662f\uff0c\u534f\u7a0b\u53ef\u4ee5\u6302\u8d77\u548c\u6062\u590d\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u4f7f\u7528\u5171\u4eab\u8d44\u6e90\u6216\u5171\u4eab\u53d8\u91cf\u65f6\u6267\u884c\u6b64\u64cd\u4f5c\u3002</p> <p>\u5982\u679c\u4e0d\u4fdd\u62a4\u5173\u952e\u90e8\u5206\uff0c\u5f02\u6b65\u7a0b\u5e8f\u4e2d\u53ef\u80fd\u4f1a\u51fa\u73b0\u7ade\u4e89\u6761\u4ef6\u3002</p> <p>\u5982\u679c\u4e0d\u4ed4\u7ec6\u7ba1\u7406\u540c\u6b65\u539f\u8bed\uff0c\u53ef\u80fd\u4f1a\u53d1\u751f\u6b7b\u9501</p> <p>\u56e0\u6b64\uff0c\u521b\u5efa asyncio \u7a0b\u5e8f\u4ee5\u786e\u4fdd\u534f\u7a0b\u5b89\u5168\uff08\u7c7b\u4f3c\u4e8e\u7ebf\u7a0b\u5b89\u5168\u548c\u8fdb\u7a0b\u5b89\u5168\u7684\u6982\u5ff5\uff09\u975e\u5e38\u91cd\u8981\uff0c\u9002\u7528\u4e8e\u534f\u7a0b\u3002</p> <p>Concurrent programming has the hazard of concurrency-specific failure modes.</p> <p>This includes problems such as race conditions and deadlocks.</p> <p>A race condition involves two or more units of concurrency executing the same critical section at the same time and leaving a resource or data in an inconsistent or unexpected state. This can lead to data corruption and data loss.</p> <p>A deadlock is when a unit of concurrency waits for a condition that can never occur, such as for a resource to become available.</p> <p>Many Python developers believe these problems are not possible with coroutines in asyncio.</p> <p>The reason being that only one coroutine can run within the event loop at any one time.</p> <p>It is true that only one coroutine can run at a time.</p> <p>The problem is, coroutines can suspend and resume and may do so while using a shared resource or shared variable.</p> <p>Without protecting critical sections, race conditions can occur in asyncio programs.</p> <p>Without careful management of synchronization primitives, deadlocks can occur</p> <p>As such, it is important that asyncio programs are created ensuring coroutine-safety, a concept similar to thread-safety and process-safety, applied to coroutines.</p>"},{"location":"asyncio/en/c24/","title":"24. Python Asyncio \u5e38\u89c1\u95ee\u9898","text":"<p>24. Python Asyncio Common Questions</p> \u4e2d\u6587\u82f1\u6587 <p>\u672c\u8282\u56de\u7b54\u5f00\u53d1\u4eba\u5458\u5728 Python \u4e2d\u4f7f\u7528 asyncio \u65f6\u63d0\u51fa\u7684\u5e38\u89c1\u95ee\u9898\u3002</p> <p>\u60a8\u5bf9 asyncio \u6709\u7591\u95ee\u5417?</p> <p>\u5728\u4e0b\u9762\u7684\u8bc4\u8bba\u4e2d\u63d0\u51fa\u60a8\u7684\u95ee\u9898\uff0c\u6211\u4f1a\u5c3d\u529b\u56de\u7b54\u5b83\uff0c\u4e5f\u8bb8\u4f1a\u5c06\u5176\u6dfb\u52a0\u5230\u8fd9\u4e2a\u95ee\u9898\u5217\u8868\u4e2d\u3002</p> <p>This section answers common questions asked by developers when using asyncio in Python.</p> <p>Do you have a question about asyncio?</p> <p>Ask your question in the comments below and I will do my best to answer it and perhaps add it to this list of questions.</p>"},{"location":"asyncio/en/c24/#241-\u5982\u4f55\u505c\u6b62\u4efb\u52a1","title":"24.1 \u5982\u4f55\u505c\u6b62\u4efb\u52a1\uff1f","text":"<p>24.1 How to Stop a Task?</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 asyncio.Task \u5bf9\u8c61\u4e0a\u7684 cancel() \u65b9\u6cd5\u53d6\u6d88\u4efb\u52a1\u3002</p> <p>\u5982\u679c\u4efb\u52a1\u88ab\u53d6\u6d88\uff0c\u5219 cancel() \u65b9\u6cd5\u8fd4\u56de <code>True</code>\uff0c\u5426\u5219\u8fd4\u56de <code>False</code>\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u53d6\u6d88\u4efb\u52a1\nwas_cancelled = task.cancel()\n</code></pre> <p>\u5982\u679c\u4efb\u52a1\u5df2\u7ecf\u5b8c\u6210\uff0c\u5219\u65e0\u6cd5\u53d6\u6d88\uff0ccancel() \u65b9\u6cd5\u5c06\u8fd4\u56de <code>False</code>\uff0c\u4efb\u52a1\u4e0d\u4f1a\u5904\u4e8e\u5df2\u53d6\u6d88\u72b6\u6001\u3002</p> <p>\u4e0b\u6b21\u4efb\u52a1\u6709\u673a\u4f1a\u8fd0\u884c\u65f6\uff0c\u5b83\u5c06\u5f15\u53d1 CancelledError \u5f02\u5e38\u3002</p> <p>\u5982\u679c\u672a\u5728\u5305\u88c5\u7684\u534f\u7a0b\u5185\u5904\u7406 CancelledError \u5f02\u5e38\uff0c\u5219\u4efb\u52a1\u5c06\u88ab\u53d6\u6d88\u3002</p> <p>\u5426\u5219\uff0c\u5982\u679c\u5728\u5305\u88c5\u7684\u534f\u7a0b\u5185\u5904\u7406 CancelledError \u5f02\u5e38\uff0c\u5219\u4efb\u52a1\u5c06\u4e0d\u4f1a\u88ab\u53d6\u6d88\u3002</p> <p>cancel() \u65b9\u6cd5\u540c\u6837\u8fd8\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u6d88\u606f\u53c2\u6570\uff0c\u4f5c\u4e3a CancelledError \u5f02\u5e38\u7684\u5185\u5bb9\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u63a2\u8ba8\u5982\u4f55\u53d6\u6d88\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u3002</p> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4efb\u52a1\u534f\u7a0b\uff0c\u5b83\u62a5\u544a\u4e00\u6761\u6d88\u606f\uff0c\u7136\u540e\u963b\u585e\u4e00\u4f1a\u513f\u3002</p> <p>\u7136\u540e\uff0c\u6211\u4eec\u5b9a\u4e49\u7528\u4f5c asyncio \u7a0b\u5e8f\u5165\u53e3\u70b9\u7684\u4e3b\u534f\u7a0b\u3002 \u5b83\u62a5\u544a\u4e00\u6761\u6d88\u606f\uff0c\u521b\u5efa\u5e76\u5b89\u6392\u4efb\u52a1\uff0c\u7136\u540e\u7b49\u5f85\u7247\u523b\u3002</p> <p>\u7136\u540e\uff0c\u4e3b\u534f\u7a0b\u5728\u4efb\u52a1\u8fd0\u884c\u65f6\u6062\u590d\u5e76\u53d6\u6d88\u4efb\u52a1\u3002 \u5b83\u4f1a\u518d\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\uff0c\u4ee5\u4fbf\u4efb\u52a1\u54cd\u5e94\u53d6\u6d88\u8bf7\u6c42\u3002 \u7136\u540e\u4e3b\u534f\u7a0b\u62a5\u544a\u53d6\u6d88\u4efb\u52a1\u7684\u8bf7\u6c42\u662f\u5426\u6210\u529f\u3002</p> <p>\u4efb\u52a1\u88ab\u53d6\u6d88\uff0c\u7136\u540e\u5b8c\u6210\u3002</p> <p>\u7136\u540e\u4e3b\u534f\u7a0b\u5728\u5173\u95ed\u7a0b\u5e8f\u4e4b\u524d\u62a5\u544a\u4efb\u52a1\u7684\u72b6\u6001\u662f\u5426\u5df2\u53d6\u6d88\u3002</p> <p>\u4e0b\u9762\u5217\u51fa\u4e86\u5b8c\u6574\u7684\u793a\u4f8b\u3002</p> <pre><code># SuperFastPython.com\n# \u53d6\u6d88\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u7684\u4f8b\u5b50\nimport asyncio\n\n# \u4e3a\u4efb\u52a1\u5b9a\u4e49\u4e00\u4e2a\u534f\u7a0b\nasync def task_coroutine():\n    # \u62a5\u544a\u4e00\u6761\u6d88\u606f\n    print('executing the task')\n    # \u963b\u585e\u7247\u523b\n    await asyncio.sleep(1)\n\n# \u81ea\u5b9a\u4e49\u534f\u7a0b\nasync def main():\n    # \u62a5\u544a\u4e00\u6761\u6d88\u606f\n    print('main coroutine started')\n    # \u521b\u5efa\u5e76\u8c03\u5ea6\u4efb\u52a1\n    task = asyncio.create_task(task_coroutine())\n    # \u7b49\u5f85\u4e00\u4e0b\n    await asyncio.sleep(0.1)\n    # \u53d6\u6d88\u4efb\u52a1\n    was_cancelled = task.cancel()\n    # \u62a5\u544a\u53d6\u6d88\u8bf7\u6c42\u662f\u5426\u6210\u529f\n    print(f'was canceled: {was_cancelled}')\n    # \u7b49\u5f85\u4e00\u4e0b\n    await asyncio.sleep(0.1)\n    # \u68c0\u67e5\u4efb\u52a1\u7684\u72b6\u6001\n    print(f'canceled: {task.cancelled()}')\n    # \u62a5\u544a\u6700\u540e\u7684\u6d88\u606f\n    print('main coroutine done')\n\n# \u542f\u52a8\u5f02\u6b65\u7a0b\u5e8f\nasyncio.run(main())\n</code></pre> <p>\u8fd0\u884c\u8be5\u793a\u4f8b\u5c06\u542f\u52a8 asyncio \u4e8b\u4ef6\u5faa\u73af\u5e76\u6267\u884c main() \u534f\u7a0b\u3002</p> <p>main() \u534f\u7a0b\u62a5\u544a\u4e00\u6761\u6d88\u606f\uff0c\u7136\u540e\u521b\u5efa\u5e76\u8c03\u5ea6\u4efb\u52a1\u534f\u7a0b\u3002</p> <p>\u7136\u540e\u5b83\u4f1a\u6302\u8d77\u5e76\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\u4ee5\u5141\u8bb8\u4efb\u52a1\u534f\u7a0b\u5f00\u59cb\u8fd0\u884c\u3002</p> <p>\u8be5\u4efb\u52a1\u8fd0\u884c\uff0c\u62a5\u544a\u6d88\u606f\u5e76\u4f11\u7720\u4e00\u6bb5\u65f6\u95f4\u3002</p> <p>main() \u534f\u7a0b\u6062\u590d\u5e76\u53d6\u6d88\u4efb\u52a1\u3002 \u5b83\u62a5\u544a\u53d6\u6d88\u4efb\u52a1\u7684\u8bf7\u6c42\u5df2\u6210\u529f\u3002</p> <p>\u7136\u540e\u5b83\u4f1a\u4f11\u7720\u4e00\u4f1a\u513f\uff0c\u4ee5\u5141\u8bb8\u4efb\u52a1\u54cd\u5e94\u8981\u53d6\u6d88\u7684\u8bf7\u6c42\u3002</p> <p>task_coroutine() \u6062\u590d\u5e76\u5f15\u53d1 CancelledError \u5f02\u5e38\uff0c\u5bfc\u81f4\u4efb\u52a1\u5931\u8d25\u5e76\u5b8c\u6210\u3002</p> <p>main() \u534f\u7a0b\u6062\u590d\u5e76\u62a5\u544a\u4efb\u52a1\u662f\u5426\u5904\u4e8e\u5df2\u53d6\u6d88\u72b6\u6001\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u786e\u5b9e\u5982\u6b64\u3002</p> <p>\u6b64\u793a\u4f8b\u91cd\u70b9\u4ecb\u7ecd\u4e86\u53d6\u6d88\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u7684\u6b63\u5e38\u60c5\u51b5\u3002</p> <pre><code>main coroutine started\nexecuting the task\nwas canceled: True\ncanceled: True\nmain coroutine done\n</code></pre> <p>We can cancel a task via the cancel() method on an asyncio.Task object.</p> <p>The cancel() method returns True if the task was canceled, or False otherwise.</p> <p>For example:</p> <pre><code>...\n# cancel the task\nwas_cancelled = task.cancel()\n</code></pre> <p>If the task is already done, it cannot be canceled and the cancel() method will return False and the task will not have the status of canceled.</p> <p>The next time the task is given an opportunity to run, it will raise a CancelledError exception.</p> <p>If the CancelledError exception is not handled within the wrapped coroutine, the task will be canceled.</p> <p>Otherwise, if the CancelledError exception is handled within the wrapped coroutine, the task will not be canceled.</p> <p>The cancel() method can also take a message argument which will be used in the content of the CancelledError.</p> <p>We can explore how to cancel a running task.</p> <p>In this example, we define a task coroutine that reports a message and then blocks for a moment.</p> <p>We then define the main coroutine that is used as the entry point into the asyncio program. It reports a message, creates and schedules the task, then waits a moment.</p> <p>The main coroutine then resumes and cancels the task while it is running. It waits a moment more to allow the task to respond to the request to cancel. The main coroutine then reports whether the request to cancel the task was successful.</p> <p>The task is canceled and is then done.</p> <p>The main coroutine then reports whether the status of the task is canceled before closing the program.</p> <p>The complete example is listed below.</p> <pre><code># SuperFastPython.com\n# example of canceling a running task\nimport asyncio\n\n# define a coroutine for a task\nasync def task_coroutine():\n    # report a message\n    print('executing the task')\n    # block for a moment\n    await asyncio.sleep(1)\n\n# custom coroutine\nasync def main():\n    # report a message\n    print('main coroutine started')\n    # create and schedule the task\n    task = asyncio.create_task(task_coroutine())\n    # wait a moment\n    await asyncio.sleep(0.1)\n    # cancel the task\n    was_cancelled = task.cancel()\n    # report whether the cancel request was successful\n    print(f'was canceled: {was_cancelled}')\n    # wait a moment\n    await asyncio.sleep(0.1)\n    # check the status of the task\n    print(f'canceled: {task.cancelled()}')\n    # report a final message\n    print('main coroutine done')\n\n# start the asyncio program\nasyncio.run(main())\n</code></pre> <p>Running the example starts the asyncio event loop and executes the main() coroutine.</p> <p>The main() coroutine reports a message, then creates and schedules the task coroutine.</p> <p>It then suspends and awaits a moment to allow the task coroutine to begin running.</p> <p>The task runs, reports a message and sleeps for a while.</p> <p>The main() coroutine resumes and cancels the task. It reports that the request to cancel the task was successful.</p> <p>It then sleeps for a moment to allow the task to respond to the request to be canceled.</p> <p>The task_coroutine() resumes and a CancelledError exception is raised that causes the task to fail and be done.</p> <p>The main() coroutine resumes and reports whether the task has the status of canceled. In this case, it does.</p> <p>This example highlights the normal case of canceling a running task.</p> <pre><code>main coroutine started\nexecuting the task\nwas canceled: True\ncanceled: True\nmain coroutine done\n</code></pre>"},{"location":"asyncio/en/c24/#242-\u5982\u4f55\u7b49\u5f85\u4efb\u52a1\u5b8c\u6210","title":"24.2 \u5982\u4f55\u7b49\u5f85\u4efb\u52a1\u5b8c\u6210\uff1f","text":"<p>24.2 How to Wait for a Task To Finish?</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u76f4\u63a5\u7b49\u5f85 asyncio.Task \u5bf9\u8c61\u6765\u7b49\u5f85\u4efb\u52a1\u5b8c\u6210\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u7b49\u5f85\u4efb\u52a1\u5b8c\u6210\nawait task\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u5728\u4e00\u884c\u4e2d\u521b\u5efa\u5e76\u7b49\u5f85\u4efb\u52a1\u5b8c\u6210\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u521b\u5efa\u5e76\u7b49\u5f85\u4efb\u52a1\u5b8c\u6210\nawait asyncio.create_task(custom_coro())\n</code></pre> <p>We can wait for a task to finish by awaiting the asyncio.Task object directly.</p> <p>For example:</p> <pre><code>...\n# wait for the task to finish\nawait task\n</code></pre> <p>We may create and wait for the task in a single line.</p> <p>For example:</p> <pre><code>...\n# create and wait for the task to finish\nawait asyncio.create_task(custom_coro())\n</code></pre>"},{"location":"asyncio/en/c24/#243-\u5982\u4f55\u83b7\u53d6\u4efb\u52a1\u7684\u8fd4\u56de\u503c","title":"24.3 \u5982\u4f55\u83b7\u53d6\u4efb\u52a1\u7684\u8fd4\u56de\u503c\uff1f","text":"<p>24.3 How to Get a Return Value from a Task?</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u80fd\u9700\u8981\u5c06\u503c\u4ece\u534f\u7a0b\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7b49\u5f85\u534f\u7a0b\u6765\u68c0\u7d22\u8fd4\u56de\u503c\u3002</p> <p>\u5b83\u5047\u8bbe\u6b63\u5728\u7b49\u5f85\u7684\u53e6\u4e00\u4e2a\u534f\u7a0b\u8fd4\u56de\u4e00\u4e2a\u503c\u3002</p> <p>\u4f8b\u5982:</p> <pre><code># \u6709\u8fd4\u56de\u503c\u7684\u534f\u7a0b\nasync def other_coro():\n    return 100\n</code></pre> <p>\u7b49\u5f85\u53e6\u4e00\u4e2a\u534f\u7a0b\u5c06\u6302\u8d77\u8c03\u7528\u534f\u7a0b\u5e76\u5b89\u6392\u53e6\u4e00\u4e2a\u534f\u7a0b\u6267\u884c\u3002 \u4e00\u65e6\u5176\u4ed6\u534f\u7a0b\u5b8c\u6210\uff0c\u8c03\u7528\u534f\u7a0b\u5c06\u6062\u590d\u3002 \u8fd4\u56de\u503c\u5c06\u4ece\u53e6\u4e00\u4e2a\u534f\u7a0b\u4f20\u9012\u7ed9\u8c03\u7528\u8005\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u6267\u884c\u534f\u7a0b\u5e76\u83b7\u53d6\u8fd4\u56de\u503c\nvalue = await other_coro()\n</code></pre> <p>\u534f\u7a0b\u53ef\u4ee5\u5305\u88c5\u5728 asyncio.Task \u5bf9\u8c61\u4e2d\u3002</p> <p>\u8fd9\u5bf9\u4e8e\u72ec\u7acb\u6267\u884c\u534f\u7a0b\u5f88\u6709\u5e2e\u52a9\uff0c\u800c\u65e0\u9700\u5f53\u524d\u534f\u7a0b\u7b49\u5f85\u5b83\u3002</p> <p>\u8fd9\u53ef\u4ee5\u4f7f\u7528 asyncio.create_task() \u51fd\u6570\u6765\u5b9e\u73b0\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u5c06\u534f\u7a0b\u5305\u88c5\u5728\u4efb\u52a1\u4e2d\u5e76\u5b89\u6392\u5176\u6267\u884c\ntask = asyncio.create_task(other_coro())\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173\u5982\u4f55\u521b\u5efa\u4efb\u52a1\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>\u5728Python\u4e2d\u5982\u4f55\u521b\u5efa\u4e00\u4e2aAsyncio\u4efb\u52a1</li> </ul> <p>\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u4ece asyncio.Task \u4e2d\u68c0\u7d22\u8fd4\u56de\u503c\uff0c\u5b83\u4eec\u662f\uff1a</p> <ol> <li>\u7b49\u5f85\u4efb\u52a1.</li> <li>\u8c03\u7528 result() \u65b9\u6cd5.</li> </ol> <p>\u6211\u4eec\u53ef\u4ee5\u7b49\u5f85\u4efb\u52a1\u6765\u68c0\u7d22\u8fd4\u56de\u503c\u3002</p> <p>\u5982\u679c\u4efb\u52a1\u5df2\u8c03\u5ea6\u6216\u6b63\u5728\u8fd0\u884c\uff0c\u5219\u8c03\u7528\u8005\u5c06\u6302\u8d77\uff0c\u76f4\u5230\u4efb\u52a1\u5b8c\u6210\u5e76\u63d0\u4f9b\u8fd4\u56de\u503c\u3002</p> <p>\u5982\u679c\u4efb\u52a1\u5b8c\u6210\uff0c\u5c06\u7acb\u5373\u63d0\u4f9b\u8fd4\u56de\u503c\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u83b7\u53d6\u4efb\u52a1\u7684\u8fd4\u56de\u503c\nvalue = await task\n</code></pre> <p>\u4e0e\u534f\u7a0b\u4e0d\u540c\uff0c\u6211\u4eec\u53ef\u4ee5\u591a\u6b21\u7b49\u5f85\u4efb\u52a1\u800c\u4e0d\u4f1a\u5f15\u53d1\u9519\u8bef\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u83b7\u53d6\u4efb\u52a1\u7684\u8fd4\u56de\u503c\nvalue = await task\n# \u83b7\u53d6\u4efb\u52a1\u7684\u8fd4\u56de\u503c\nvalue = await task\n</code></pre> <p>\u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 asyncio.Task \u5bf9\u8c61\u4e0a\u7684 result() \u65b9\u6cd5\u6765\u83b7\u53d6\u4efb\u52a1\u7684\u8fd4\u56de\u503c\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u83b7\u53d6\u4efb\u52a1\u7684\u8fd4\u56de\u503c\nvalue = task.result()\n</code></pre> <p>\u8fd9\u5c31\u8981\u6c42\u4efb\u52a1\u5b8c\u6210\u3002 \u5982\u679c\u4e0d\u662f\uff0c\u5c06\u5f15\u53d1 InvalidStateError \u5f02\u5e38\u3002</p> <p>\u5982\u679c\u4efb\u52a1\u88ab\u53d6\u6d88\uff0c\u5219\u4f1a\u5f15\u53d1 CancelledError \u5f02\u5e38\u3002</p> <p>\u60a8\u53ef\u4ee5\u4e86\u89e3\u6709\u5173\u4ece\u6559\u7a0b\u4e2d\u7684\u4efb\u52a1\u83b7\u53d6\u7ed3\u679c\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>\u5982\u4f55\u83b7\u53d6 Asyncio \u4efb\u52a1\u7ed3\u679c</li> </ul> <p>We may need to return values from coroutines to the caller.</p> <p>We can retrieve a return value from a coroutine by awaiting it.</p> <p>It assumes that the other coroutine being awaited returns a value.</p> <p>For example:</p> <pre><code># coroutine that returns a value\nasync def other_coro():\n    return 100\n</code></pre> <p>Awaiting the other coroutine will suspend the calling coroutine and schedule the other coroutine for execution. Once the other coroutine has been completed, the calling coroutine will resume. The return value will be passed from the other coroutine to the caller.</p> <p>For example:</p> <pre><code>...\n# execute coroutine and retrieve return value\nvalue = await other_coro()\n</code></pre> <p>A coroutine can be wrapped in an asyncio.Task object.</p> <p>This is helpful for independently executing the coroutine without having the current coroutine await it.</p> <p>This can be achieved using the asyncio.create_task() function.</p> <p>For example:</p> <pre><code>...\n# wrap coroutine in a task and schedule it for execution\ntask = asyncio.create_task(other_coro())\n</code></pre> <p>You can learn more about how to create tasks in the tutorial:</p> <ul> <li>How to Create an Asyncio Task in Python</li> </ul> <p>There are two ways to retrieve the return value from an asyncio.Task, they are:</p> <ol> <li>Await the task.</li> <li>Call the result() method.</li> </ol> <p>We can await the task to retrieve the return value.</p> <p>If the task is scheduled or running, then the caller will suspend until the task is complete and the return value will be provided.</p> <p>If the task is completed, the return value will be provided immediately.</p> <p>For example:</p> <pre><code>...\n# get the return value from a task\nvalue = await task\n</code></pre> <p>Unlike a coroutine, we can await a task more than once without raising an error.</p> <p>For example:</p> <pre><code>...\n# get the return value from a task\nvalue = await task\n# get the return value from a task\nvalue = await task\n</code></pre> <p>We can also get the return value from the task by calling the result() method on the asyncio.Task object.</p> <p>For example:</p> <pre><code>...\n# get the return value from a task\nvalue = task.result()\n</code></pre> <p>This requires that the task is done. If not, an InvalidStateError exception will be raised.</p> <p>If the task was canceled a CancelledError exception will be raised.</p> <p>You can learn more about getting the result from tasks in the tutorial:</p> <ul> <li>How to Get Asyncio Task Results</li> </ul>"},{"location":"asyncio/en/c24/#244-\u5982\u4f55\u5728\u540e\u53f0\u8fd0\u884c\u4efb\u52a1","title":"24.4 \u5982\u4f55\u5728\u540e\u53f0\u8fd0\u884c\u4efb\u52a1\uff1f","text":"<p>24.4 How to Run a Task in the Background?</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06\u534f\u7a0b\u5305\u88c5\u5728 asyncio.Task \u5bf9\u8c61\u4e2d\u6765\u5728\u540e\u53f0\u8fd0\u884c\u534f\u7a0b\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 asyncio.create_task() \u51fd\u6570\u5e76\u5411\u5176\u4f20\u9012\u534f\u7a0b\u6765\u5b9e\u73b0\u3002</p> <p>\u534f\u7a0b\u5c06\u88ab\u5305\u88c5\u5728 Task \u5bf9\u8c61\u4e2d\u5e76\u88ab\u5b89\u6392\u6267\u884c\u3002 \u4efb\u52a1\u5bf9\u8c61\u5c06\u88ab\u8fd4\u56de\uff0c\u5e76\u4e14\u8c03\u7528\u8005\u4e0d\u4f1a\u6302\u8d77\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u8c03\u5ea6\u4efb\u52a1\u6267\u884c\ntask = asyncio.create_task(other_coroutine())\n</code></pre> <p>\u81f3\u5c11\u5728\u5f53\u524d\u534f\u7a0b\u51fa\u4e8e\u4efb\u4f55\u539f\u56e0\u88ab\u6302\u8d77\u4e4b\u524d\uff0c\u8be5\u4efb\u52a1\u4e0d\u4f1a\u5f00\u59cb\u6267\u884c\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6682\u505c\u7247\u523b\u4ee5\u5141\u8bb8\u4efb\u52a1\u5f00\u59cb\u8fd0\u884c\u6765\u5e2e\u52a9\u5b8c\u6210\u4efb\u52a1\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4f11\u7720\u96f6\u79d2\u6765\u5b9e\u73b0\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u6682\u505c\u7247\u523b\u4ee5\u5141\u8bb8\u4efb\u52a1\u5f00\u59cb\u8fd0\u884c\nawait asyncio.sleep(0)\n</code></pre> <p>\u8fd9\u53ea\u4f1a\u5c06\u8c03\u7528\u8005\u6682\u505c\u4e00\u5c0f\u4f1a\u513f\uff0c\u5e76\u5141\u8bb8\u6709\u673a\u4f1a\u8fd0\u884c\u3002</p> <p>\u8fd9\u4e0d\u662f\u5fc5\u9700\u7684\uff0c\u56e0\u4e3a\u8c03\u7528\u8005\u53ef\u80fd\u4f1a\u5728\u5c06\u6765\u7684\u67d0\u4e2a\u65f6\u95f4\u6302\u8d77\u6216\u4f5c\u4e3a\u6b63\u5e38\u6267\u884c\u7684\u4e00\u90e8\u5206\u7ec8\u6b62\u3002</p> <p>\u4e00\u65e6\u8c03\u7528\u8005\u6ca1\u6709\u4e8b\u60c5\u53ef\u505a\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7b49\u5f85\u4efb\u52a1\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u7b49\u5f85\u4efb\u52a1\u5b8c\u6210\nawait task\n</code></pre> <p>We can run a coroutine in the background by wrapping it in an asyncio.Task object.</p> <p>This can be achieved by calling the asyncio.create_task() function and passing it the coroutine.</p> <p>The coroutine will be wrapped in a Task object and will be scheduled for execution. The task object will be returned and the caller will not suspend.</p> <p>For example:</p> <pre><code>...\n# schedule the task for execution\ntask = asyncio.create_task(other_coroutine())\n</code></pre> <p>The task will not begin executing until at least the current coroutine is suspended, for any reason.</p> <p>We can help things along by suspending for a moment to allow the task to start running.</p> <p>This can be achieved by sleeping for zero seconds.</p> <p>For example:</p> <pre><code>...\n# suspend for a moment to allow the task to start running\nawait asyncio.sleep(0)\n</code></pre> <p>This will suspend the caller only for a brief moment and allow the ask an opportunity to run.</p> <p>This is not required as the caller may suspend at some future time or terminate as part of normal execution.</p> <p>We may also await the task directly once the caller has run out of things to do.</p> <p>For example:</p> <pre><code>...\n# wait for the task to complete\nawait task\n</code></pre>"},{"location":"asyncio/en/c24/#245-\u5982\u4f55\u7b49\u5f85\u6240\u6709\u540e\u53f0\u4efb\u52a1","title":"24.5 \u5982\u4f55\u7b49\u5f85\u6240\u6709\u540e\u53f0\u4efb\u52a1\uff1f","text":"<p>24.5 How to Wait for All Background Tasks?</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u7b49\u5f85 asyncio \u7a0b\u5e8f\u4e2d\u7684\u6240\u6709\u72ec\u7acb\u4efb\u52a1\u3002</p> <p>\u9996\u5148\u53ef\u4ee5\u901a\u8fc7 asyncio.all_tasks() \u51fd\u6570\u83b7\u53d6\u4e00\u7ec4\u6240\u6709\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u6765\u5b9e\u73b0\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u83b7\u53d6\u6240\u6709\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u7684\u96c6\u5408\nall_tasks = asyncio.all_tasks()\n</code></pre> <p>\u8fd9\u5c06\u8fd4\u56de\u4e00\u4e2a\u96c6\u5408\uff0c\u5176\u4e2d\u5305\u542b\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u6bcf\u4e2a\u4efb\u52a1\u7684\u4e00\u4e2a asyncio.Task \u5bf9\u8c61\uff0c\u5305\u62ec main() \u534f\u7a0b\u3002</p> <p>\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u7b49\u5f85\u8fd9\u4e2a\u96c6\u5408\uff0c\u56e0\u4e3a\u5b83\u4f1a\u6c38\u8fdc\u963b\u585e\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u5f53\u524d\u4efb\u52a1\u7684\u4efb\u52a1\u3002</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u7684 asyncio.Task \u5bf9\u8c61\u5e76\u5c06\u5176\u4ece\u96c6\u5408\u4e2d\u5220\u9664\u3002</p> <p>\u8fd9\u9996\u5148\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 asyncio.current_task() \u65b9\u6cd5\u6765\u83b7\u53d6\u5f53\u524d\u534f\u7a0b\u7684\u4efb\u52a1\uff0c\u7136\u540e\u901a\u8fc7 remove() \u65b9\u6cd5\u5c06\u5176\u4ece\u96c6\u5408\u4e2d\u5220\u9664\u6765\u5b9e\u73b0\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u83b7\u53d6\u5f53\u524d\u4efb\u52a1\ncurrent_task = asyncio.current_task()\n# \u4ece\u6240\u6709\u4efb\u52a1\u5217\u8868\u4e2d\u5220\u9664\u5f53\u524d\u4efb\u52a1\nall_tasks.remove(current_task)\n</code></pre> <p>\u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u7b49\u5f85\u5269\u4f59\u7684\u4efb\u52a1\u96c6\u3002</p> <p>\u8fd9\u5c06\u6302\u8d77\u8c03\u7528\u8005\uff0c\u76f4\u5230\u8be5\u7ec4\u4e2d\u7684\u6240\u6709\u4efb\u52a1\u5b8c\u6210\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u6302\u8d77\u76f4\u5230\u6240\u6709\u4efb\u52a1\u5b8c\u6210\nawait asyncio.wait(all_tasks)\n</code></pre> <p>\u5c06\u5b83\u4eec\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u6dfb\u52a0\u5230 main() \u534f\u7a0b\u672b\u5c3e\u7684\u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u5c06\u7b49\u5f85\u6240\u6709\u540e\u53f0\u4efb\u52a1\u5b8c\u6210\u3002</p> <pre><code>...\n# \u83b7\u53d6\u6240\u6709\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u7684\u96c6\u5408\nall_tasks = asyncio.all_tasks()\n# \u83b7\u53d6\u5f53\u524d\u4efb\u52a1\ncurrent_task = asyncio.current_task()\n# \u4ece\u6240\u6709\u4efb\u52a1\u5217\u8868\u4e2d\u5220\u9664\u5f53\u524d\u4efb\u52a1\nall_tasks.remove(current_task)\n# \u6302\u8d77\u76f4\u5230\u6240\u6709\u4efb\u52a1\u5b8c\u6210\nawait asyncio.wait(all_tasks)\n</code></pre> <p>We can wait for all independent tasks in an asyncio program.</p> <p>This can be achieved by first getting a set of all currently running tasks via the asyncio.all_tasks() function.</p> <p>For example:</p> <pre><code>...\n# get a set of all running tasks\nall_tasks = asyncio.all_tasks()\n</code></pre> <p>This will return a set that contains one asyncio.Task object for each task that is currently running, including the main() coroutine.</p> <p>We cannot wait on this set directly, as it will block forever as it includes the task that is the current task.</p> <p>Therefore we can get the asyncio.Task object for the currently running task and remove it from the set.</p> <p>This can be achieved by first calling the asyncio.current_task() method to get the task for the current coroutine and then remove it from the set via the remove() method.</p> <p>For example:</p> <pre><code>...\n# get the current tasks\ncurrent_task = asyncio.current_task()\n# remove the current task from the list of all tasks\nall_tasks.remove(current_task)\n</code></pre> <p>Finally, we can wait on the set of remaining tasks.</p> <p>This will suspend the caller until all tasks in the set are complete.</p> <p>For example:</p> <pre><code>...\n# suspend until all tasks are completed\nawait asyncio.wait(all_tasks)\n</code></pre> <p>Tying this together, the snippet below added to the end of the main() coroutine will wait for all background tasks to complete.</p> <pre><code>...\n# get a set of all running tasks\nall_tasks = asyncio.all_tasks()\n# get the current tasks\ncurrent_task = asyncio.current_task()\n# remove the current task from the list of all tasks\nall_tasks.remove(current_task)\n# suspend until all tasks are completed\nawait asyncio.wait(all_tasks)\n</code></pre>"},{"location":"asyncio/en/c24/#246-\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u662f\u5426\u4f1a\u963b\u6b62\u4e8b\u4ef6\u5faa\u73af\u9000\u51fa","title":"24.6 \u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u662f\u5426\u4f1a\u963b\u6b62\u4e8b\u4ef6\u5faa\u73af\u9000\u51fa\uff1f","text":"<p>24.6 Does a Running Task Stop the Event Loop from Exiting?</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e0d\u3002</p> <p>\u72ec\u7acb\u8c03\u5ea6\u548c\u8fd0\u884c\u7684\u4efb\u52a1\u4e0d\u4f1a\u963b\u6b62\u4e8b\u4ef6\u5faa\u73af\u9000\u51fa\u3002</p> <p>\u5982\u679c\u60a8\u7684\u4e3b\u534f\u7a0b\u6ca1\u6709\u5176\u4ed6\u6d3b\u52a8\u9700\u8981\u5b8c\u6210\uff0c\u5e76\u4e14\u6709\u72ec\u7acb\u4efb\u52a1\u5728\u540e\u53f0\u8fd0\u884c\uff0c\u60a8\u5e94\u8be5\u68c0\u7d22\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u5e76\u7b49\u5f85\u5b83\u4eec</p> <p>\u4e0a\u4e00\u4e2a\u95ee\u9898/\u7b54\u6848\u51c6\u786e\u5730\u5c55\u793a\u4e86\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u3002</p> <p>No.</p> <p>A task that is scheduled and run independently will not stop the event loop from exiting.</p> <p>If your main coroutine has no other activities to complete and there are independent tasks running in the background, you should retrieve the running tasks and wait on them</p> <p>The previous question/answer shows exactly how to do this.</p>"},{"location":"asyncio/en/c24/#247-\u5982\u4f55\u663e\u793a\u8fd0\u884c\u4efb\u52a1\u7684\u8fdb\u5ea6","title":"24.7 \u5982\u4f55\u663e\u793a\u8fd0\u884c\u4efb\u52a1\u7684\u8fdb\u5ea6\uff1f","text":"<p>24.7 How to Show Progress of Running Tasks?</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6bcf\u4e2a\u4efb\u52a1\u7684\u56de\u8c03\u51fd\u6570\u6765\u663e\u793a\u8fdb\u5ea6\u3002</p> <p>\u6267\u884c\u5b8c\u6210\u540e\u7684\u56de\u8c03\u51fd\u6570\u662f\u6211\u4eec\u53ef\u4ee5\u5728 asyncio.Task \u4e0a\u6ce8\u518c\u7684\u51fd\u6570\u3002</p> <p>\u4e00\u65e6\u4efb\u52a1\u6267\u884c\u5b8c\uff0c\u65e0\u8bba\u6b63\u5e38\u8fd8\u662f\u5931\u8d25\uff0c\u90fd\u4f1a\u8c03\u7528\u5b83\u3002</p> <p>done \u56de\u8c03\u51fd\u6570\u662f\u4e00\u4e2a\u5e38\u89c4\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u534f\u7a0b\uff0c\u5e76\u4e14\u5c06\u4e0e\u5176\u5173\u8054\u7684 asyncio.Task \u4f5c\u4e3a\u53c2\u6570\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u5bf9\u6240\u6709\u4efb\u52a1\u4f7f\u7528\u76f8\u540c\u7684\u56de\u8c03\u51fd\u6570\uff0c\u5e76\u4ee5\u901a\u7528\u65b9\u5f0f\u62a5\u544a\u8fdb\u5ea6\uff0c\u4f8b\u5982\u62a5\u544a\u6d88\u606f\u3002</p> <p>\u4f8b\u5982:</p> <pre><code># \u56de\u8c03\u51fd\u6570\u663e\u793a\u4efb\u52a1\u8fdb\u5ea6\ndef progress(task):\n    # \u62a5\u544a\u4efb\u52a1\u8fdb\u5ea6\n    print('.', end='')\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u5728\u6211\u4eec\u53d1\u51fa\u7684\u6bcf\u4e2a asyncio.Task \u4e0a\u6ce8\u518c\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5728\u6bcf\u4e2a\u4efb\u52a1\u4e0a\u4f7f\u7528 add_done_callback() \u65b9\u6cd5\u5e76\u5411\u5176\u4f20\u9012\u56de\u8c03\u51fd\u6570\u7684\u540d\u79f0\u6765\u5b9e\u73b0\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u5411\u4efb\u52a1\u6dfb\u52a0\u56de\u8c03\u51fd\u6570\ntask.add_done_callback(progress)\n</code></pre> <p>We can show progress using a done callback function on each task.</p> <p>A done callback is a function that we can register on an asyncio.Task.</p> <p>It is called once the task is done, either normally or if it fails.</p> <p>The done callback function is a regular function, not a coroutine, and takes the asyncio.Task that it is associated with as an argument.</p> <p>We can use the same callback function for all tasks and report progress in a general way, such as by reporting a message.</p> <p>For example:</p> <pre><code># callback function to show progress of tasks\ndef progress(task):\n    # report progress of the task\n    print('.', end='')\n</code></pre> <p>We can register a callback function on each asyncio.Task that we issue.</p> <p>This can be achieved using the add_done_callback() method on each task and passing it the name of the callback function.</p> <p>For example:</p> <pre><code>...\n# add a done callback to a task\ntask.add_done_callback(progress)\n</code></pre>"},{"location":"asyncio/en/c24/#248-\u5982\u4f55\u5728\u5ef6\u8fdf\u540e\u8fd0\u884c\u4efb\u52a1","title":"24.8 \u5982\u4f55\u5728\u5ef6\u8fdf\u540e\u8fd0\u884c\u4efb\u52a1\uff1f","text":"<p>24.8 How to Run a Task After a Delay?</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u5f00\u53d1\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5305\u88c5\u534f\u7a0b\u6765\u5728\u5ef6\u8fdf\u540e\u6267\u884c\u76ee\u6807\u534f\u7a0b\u3002</p> <p>\u5305\u88c5\u534f\u7a0b\u53ef\u4ee5\u91c7\u7528\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u534f\u7a0b\u548c\u4e00\u4e2a\u4ee5\u79d2\u4e3a\u5355\u4f4d\u7684\u65f6\u95f4\u3002</p> <p>\u5b83\u5c06\u4f11\u7720\u7ed9\u5b9a\u7684\u5ef6\u8fdf\u95f4\u9694\uff08\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff09\uff0c\u7136\u540e\u7b49\u5f85\u63d0\u4f9b\u7684\u534f\u7a0b\u6267\u884c\u5b8c\u6bd5\u3002</p> <p>\u4e0b\u9762\u7684 delay() \u534f\u7a0b\u5b9e\u73b0\u4e86\u8fd9\u4e00\u70b9\u3002</p> <pre><code># \u5ef6\u8fdf\u51e0\u79d2\u540e\u542f\u52a8\u53e6\u4e00\u4e2a\u534f\u7a0b\u7684\u534f\u7a0b\nasync def delay(coro, seconds):\n    # \u6682\u505c\u65f6\u95f4\u9650\u5236\uff08\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff09\n    await asyncio.sleep(seconds)\n    # \u6267\u884c\u53e6\u4e00\u4e2a\u534f\u7a0b\n    await coro\n</code></pre> <p>\u8981\u4f7f\u7528\u5305\u88c5\u534f\u7a0b\uff0c\u53ef\u4ee5\u521b\u5efa\u534f\u7a0b\u5bf9\u8c61\u5e76\u76f4\u63a5\u7b49\u5f85\u6216\u4f5c\u4e3a\u4efb\u52a1\u72ec\u7acb\u6267\u884c\u3002</p> <p>\u4f8b\u5982\uff0c\u8c03\u7528\u8005\u53ef\u4ee5\u6302\u8d77\u5e76\u8c03\u5ea6\u5ef6\u8fdf\u534f\u7a0b\u5e76\u7b49\u5f85\u5176\u5b8c\u6210\uff1a</p> <pre><code>...\n# \u5ef6\u8fdf\u540e\u6267\u884c\u534f\u7a0b\nawait delay(coro, 10)\n</code></pre> <p>\u6216\u8005\uff0c\u8c03\u7528\u8005\u53ef\u4ee5\u5b89\u6392\u5ef6\u8fdf\u534f\u7a0b\u72ec\u7acb\u8fd0\u884c\uff1a</p> <pre><code>...\n# \u5728\u5ef6\u8fdf\u540e\u72ec\u7acb\u6267\u884c\u534f\u7a0b\n_ = asyncio.create_task(delay(coro, 10))\n</code></pre> <p>We can develop a custom wrapper coroutine to execute a target coroutine after a delay.</p> <p>The wrapper coroutine may take two arguments, a coroutine and a time in seconds.</p> <p>It will sleep for the given delay interval in seconds, then await the provided coroutine.</p> <p>The delay() coroutine below implements this.</p> <pre><code># coroutine that will start another coroutine after a delay in seconds\nasync def delay(coro, seconds):\n    # suspend for a time limit in seconds\n    await asyncio.sleep(seconds)\n    # execute the other coroutine\n    await coro\n</code></pre> <p>To use the wrapper coroutine, a coroutine object can be created and either awaited directly or executed independently as a task.</p> <p>For example, the caller may suspend and schedule the delayed coroutine and wait for it to be done:</p> <pre><code>...\n# execute a coroutine after a delay\nawait delay(coro, 10)\n</code></pre> <p>Alternatively, the caller may schedule the delayed coroutine to run independently:</p> <pre><code>...\n# execute a coroutine after a delay independently\n_ = asyncio.create_task(delay(coro, 10))\n</code></pre>"},{"location":"asyncio/en/c24/#249-\u5982\u4f55\u8fd0\u884c\u540e\u7eed\u4efb\u52a1","title":"24.9 \u5982\u4f55\u8fd0\u884c\u540e\u7eed\u4efb\u52a1\uff1f","text":"<p>24.9 How to Run a Follow-Up Task?</p> \u4e2d\u6587\u82f1\u6587 <p>asyncio \u4e2d\u53d1\u51fa\u540e\u7eed\u4efb\u52a1(follow-up tasks)\u7684\u65b9\u5f0f\u4e3b\u8981\u6709\u4e09\u79cd\u3002</p> <p>\u4ed6\u4eec\u662f:</p> <ol> <li>\u4ece\u5df2\u5b8c\u6210\u7684\u4efb\u52a1\u672c\u8eab\u8c03\u5ea6\u540e\u7eed\u4efb\u52a1\u3002</li> <li>\u4ece\u8c03\u7528\u8005\u8c03\u5ea6\u540e\u7eed\u4efb\u52a1\u3002</li> <li>\u4f7f\u7528\u56de\u8c03\u51fd\u6570\u81ea\u52a8\u8c03\u5ea6\u540e\u7eed\u4efb\u52a1\u3002</li> </ol> <p>\u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b\u6bcf\u79cd\u65b9\u6cd5\u3002</p> <p>\u5b8c\u6210\u7684\u4efb\u52a1\u53ef\u4ee5\u53d1\u51fa\u81ea\u5df1\u7684\u540e\u7eed\u4efb\u52a1\u3002</p> <p>\u8fd9\u53ef\u80fd\u9700\u8981\u68c0\u67e5\u67d0\u4e9b\u72b6\u6001\u4ee5\u786e\u5b9a\u662f\u5426\u5e94\u8be5\u53d1\u51fa\u540e\u7eed\u4efb\u52a1\u3002</p> <p>\u7136\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 <code>asyncio.create_task()</code> \u6765\u5b89\u6392\u4efb\u52a1 .</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# schedule a follow-up task\ntask = asyncio.create_task(followup_task())\n</code></pre> <p>\u4efb\u52a1\u672c\u8eab\u53ef\u4ee5\u9009\u62e9\u7b49\u5f85\u540e\u7eed\u4efb\u52a1\u6216\u8ba9\u5b83\u5728\u540e\u53f0\u72ec\u7acb\u5b8c\u6210\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u7b49\u5f85\u540e\u7eed\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5\nawait task\n</code></pre> <p>\u4e0b\u53d1\u4efb\u52a1\u7684\u8c03\u7528\u8005\u53ef\u4ee5\u9009\u62e9\u4e0b\u53d1\u540e\u7eed\u4efb\u52a1\u3002</p> <p>\u4f8b\u5982\uff0c\u5f53\u8c03\u7528\u8005\u53d1\u51fa\u7b2c\u4e00\u4e2a\u4efb\u52a1\u65f6\uff0c\u5b83\u53ef\u80fd\u4f1a\u4fdd\u7559 <code>asyncio.Task</code> \u5bf9\u8c61\u3002</p> <p>\u7136\u540e\u5b83\u53ef\u4ee5\u68c0\u67e5\u4efb\u52a1\u7684\u7ed3\u679c\u6216\u4efb\u52a1\u662f\u5426\u6210\u529f\u5b8c\u6210\u3002</p> <p>\u7136\u540e\u8c03\u7528\u8005\u53ef\u4ee5\u51b3\u5b9a\u662f\u5426\u53d1\u51fa\u540e\u7eed\u4efb\u52a1\u3002</p> <p>\u5b83\u4e5f\u53ef\u4ee5\u76f4\u63a5\u9009\u62e9\u7b49\u5f85/\u4e0d\u7b49\u5f85\u540e\u7eed\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u53d1\u51fa\u5e76\u7b49\u5f85\u7b2c\u4e00\u4e2a\u4efb\u52a1\ntask = await asyncio.create_task(task())\n# \u68c0\u67e5\u4efb\u52a1\u7ed3\u679c\nif task.result():\n    # \u4e0b\u8fbe\u540e\u7eed\u4efb\u52a1\n    followup = await asyncio.create_task(followup_task())\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u56de\u8c03\u51fd\u6570\u81ea\u52a8\u6267\u884c\u540e\u7eed\u4efb\u52a1\u3002</p> <p>\u4f8b\u5982\uff0c\u53d1\u51fa\u4efb\u52a1\u7684\u8c03\u7528\u8005\u53ef\u4ee5\u5728\u4efb\u52a1\u672c\u8eab\u4e0a\u6ce8\u518c\u6267\u884c\u5b8c\u6210\u540e\u7684\u56de\u8c03\u51fd\u6570\u3002</p> <p>\u56de\u8c03\u51fd\u6570\u5fc5\u987b\u5c06 <code>asyncio.Task</code> \u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u4e14\u53ea\u6709\u5728\u4efb\u52a1\u5b8c\u6210\u540e\u624d\u4f1a\u88ab\u8c03\u7528\u3002 \u7136\u540e\u5b83\u53ef\u4ee5\u9009\u62e9\u662f\u5426\u53d1\u51fa\u540e\u7eed\u4efb\u52a1\u3002</p> <p>\u56de\u8c03\u51fd\u6570\u662f\u4e00\u4e2a\u5e38\u89c4\u7684Python\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u534f\u7a0b\uff0c\u56e0\u6b64\u5b83\u4e0d\u80fd\u7b49\u5f85\u540e\u7eed\u4efb\u52a1</p> <p>\u4f8b\u5982\uff0c\u56de\u8c03\u51fd\u6570\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code># \u56de\u8c03\u51fd\u6570\ndef callback(task):\n    # \u8c03\u5ea6\u5e76\u7b49\u5f85\u540e\u7eed\u4efb\u52a1\n    _ = asyncio.create_task(followup())\n</code></pre> <p>\u8c03\u7528\u8005\u53ef\u4ee5\u53d1\u51fa\u7b2c\u4e00\u4e2a\u4efb\u52a1\u5e76\u6ce8\u518c\u6267\u884c\u5b8c\u6210\u540e\u7684\u56de\u8c03\u51fd\u6570\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u8c03\u5ea6\u4efb\u52a1\ntask = asyncio.create_task(work())\n# \u6dfb\u52a0\u6267\u884c\u5b8c\u540e\u7684\u56de\u8c03\u51fd\u6570\ntask.add_done_callback(callback)\n</code></pre> <p>There are three main ways to issue follow-up tasks in asyncio.</p> <p>They are:</p> <ol> <li>Schedule the follow-up task from the completed task itself.</li> <li>Schedule the follow-up task from the caller.</li> <li>Schedule the follow-up task automatically using a done callback.</li> </ol> <p>Let\u2019s take a closer look at each approach.</p> <p>The task that is completed can issue its own follow-up task.</p> <p>This may require checking some state in order to determine whether the follow-up task should be issued or not.</p> <p>The task can then be scheduled via a call to <code>asyncio.create_task()</code>.</p> <p>For example:</p> <pre><code>...\n# schedule a follow-up task\ntask = asyncio.create_task(followup_task())\n</code></pre> <p>The task itself may choose to await the follow-up task or let it complete in the background independently.</p> <p>For example:</p> <pre><code>...\n# wait for the follow-up task to complete\nawait task\n</code></pre> <p>The caller that issued the task can choose to issue a follow-up task.</p> <p>For example, when the caller issues the first task, it may keep the asyncio.Task object.</p> <p>It can then check the result of the task or whether the task was completed successfully or not.</p> <p>The caller can then decide to issue a follow-up task.</p> <p>It may or may not await the follow-up task directly.</p> <p>For example:</p> <pre><code>...\n# issue and await the first task\ntask = await asyncio.create_task(task())\n# check the result of the task\nif task.result():\n    # issue the follow-up task\n    followup = await asyncio.create_task(followup_task())\n</code></pre> <p>We can execute a follow-up task automatically using a done callback function.</p> <p>For example, the caller that issues the task can register a done callback function on the task itself.</p> <p>The done callback function must take the asyncio.Task object as an argument and will be called only after the task is done. It can then choose to issue a follow-up task.</p> <p>The done callback function is a regular Python function, not a coroutine, so it cannot await the follow-up task</p> <p>For example, the callback function may look as follows:</p> <pre><code># callback function\ndef callback(task):\n    # schedule and await the follow-up task\n    _ = asyncio.create_task(followup())\n</code></pre> <p>The caller can issue the first task and register the done callback function.</p> <p>For example:</p> <pre><code>...\n# schedule and the task\ntask = asyncio.create_task(work())\n# add the done callback function\ntask.add_done_callback(callback)\n</code></pre>"},{"location":"asyncio/en/c24/#2410-\u5982\u4f55\u5728-asyncio-\u4e2d\u6267\u884c\u963b\u585e-io-\u6216-cpu-\u5bc6\u96c6\u578b\u51fd\u6570","title":"24.10 \u5982\u4f55\u5728 Asyncio \u4e2d\u6267\u884c\u963b\u585e I/O \u6216 CPU \u5bc6\u96c6\u578b\u51fd\u6570\uff1f","text":"<p>24.10 How to Execute a Blocking I/O or CPU-bound Function in Asyncio?</p> \u4e2d\u6587\u82f1\u6587 <p>asyncio \u6a21\u5757\u63d0\u4f9b\u4e86\u4e24\u79cd\u5728 asyncio \u7a0b\u5e8f\u4e2d\u6267\u884c\u963b\u585e\u8c03\u7528\u7684\u65b9\u6cd5\u3002</p> <p>\u7b2c\u4e00\u79cd\u662f\u4f7f\u7528 asyncio.to_thread() \u51fd\u6570\u3002</p> <p>\u8fd9\u662f\u9ad8\u7ea7 API \u4e2d\u7684\u5185\u5bb9\uff0c\u9002\u7528\u4e8e\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\u3002</p> <p><code>asyncio.to_thread()</code> \u51fd\u6570\u63a5\u53d7\u8981\u6267\u884c\u7684\u51fd\u6570\u540d\u79f0\u548c\u4efb\u4f55\u53c2\u6570\u3002</p> <p>\u8be5\u51fd\u6570\u5728\u5355\u72ec\u7684\u7ebf\u7a0b\u4e2d\u6267\u884c\u3002 \u5b83\u8fd4\u56de\u4e00\u4e2a\u53ef\u4ee5\u4f5c\u4e3a\u72ec\u7acb\u4efb\u52a1\u7b49\u5f85\u6216\u8c03\u5ea6\u7684\u534f\u7a0b\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u5728\u5355\u72ec\u7684\u7ebf\u7a0b\u4e2d\u6267\u884c\u51fd\u6570\nawait asyncio.to_thread(task)\n</code></pre> <p>\u4efb\u52a1\u4e00\u5f00\u59cb\u5e76\u4e0d\u4f1a\u6267\u884c\u3002\u76f4\u5230\u534f\u7a0b\u8fd4\u56de\u5e76\u4e14\u7ed9\u4e2a\u5728\u4e8b\u4ef6\u5faa\u73af\u4e2d\u8fd0\u884c\u7684\u673a\u4f1a\u65f6\uff0c\u624d\u4f1a\u8fd0\u884c\u3002</p> <p><code>asyncio.to_thread()</code> \u51fd\u6570\u5728\u540e\u53f0\u521b\u5efa\u4e00\u4e2a ThreadPoolExecutor \u6765\u6267\u884c\u963b\u585e\u8c03\u7528\u3002</p> <p>\u56e0\u6b64\uff0c<code>asyncio.to_thread()</code> \u51fd\u6570\u4ec5\u9002\u7528\u4e8e IO \u5bc6\u96c6\u578b\u4efb\u52a1\u3002</p> <p>\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528loop.run_in_executor()\u51fd\u6570\u3002</p> <p>\u8fd9\u662f\u5728\u4f4e\u7ea7 asyncio API \u4e2d\uff0c\u9996\u5148\u9700\u8981\u8bbf\u95ee\u4e8b\u4ef6\u5faa\u73af\uff0c\u4f8b\u5982\u901a\u8fc7 asyncio.get_running_loop() \u51fd\u6570\u3002</p> <p><code>Loop.run_in_executor()</code> \u51fd\u6570\u9700\u8981\u4e00\u4e2a\u6267\u884c\u5668\u548c\u4e00\u4e2a\u8981\u6267\u884c\u7684\u51fd\u6570\u3002</p> <p>\u5982\u679c\u6ca1\u6709\u4e3a\u6267\u884c\u5668\u63d0\u4f9b\u53c2\u6570\uff0c\u5219\u9ed8\u8ba4\u503c\u4e3a None\uff0c\u5c06\u4f7f\u7528\u9ed8\u8ba4\u6267\u884c\u5668\uff0c\u5373 ThreadPoolExecutor\u3002</p> <p><code>Loop.run_in_executor()</code> \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u53ef\u7b49\u5f85\u7684\u5bf9\u8c61\uff0c\u5982\u679c\u9700\u8981\u53ef\u4ee5\u7b49\u5f85\u3002 \u8be5\u4efb\u52a1\u5c06\u7acb\u5373\u5f00\u59cb\u6267\u884c\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u7b49\u5f85\u6216\u5b89\u6392\u8fd4\u56de\u7684\u53ef\u7b49\u5f85\u5bf9\u8c61\u6765\u5f00\u59cb\u6267\u884c\u963b\u585e\u8c03\u7528\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u83b7\u53d6\u4e8b\u4ef6\u5faa\u73af\nloop = asyncio.get_running_loop()\n# \u5728\u5355\u72ec\u7684\u7ebf\u7a0b\u4e2d\u6267\u884c\u51fd\u6570\nawait loop.run_in_executor(None, task)\n</code></pre> <p>\u6216\u8005\uff0c\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u6267\u884c\u5668\u5e76\u5c06\u5176\u4f20\u9012\u7ed9<code>loop.run_in_executor()</code>\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u5c06\u5728\u6267\u884c\u5668\u4e2d\u6267\u884c\u5f02\u6b65\u8c03\u7528\u3002</p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8c03\u7528\u8005\u5fc5\u987b\u7ba1\u7406\u6267\u884c\u5668\uff0c\u5728\u8c03\u7528\u8005\u5b8c\u6210\u540e\u5c06\u5176\u5173\u95ed\u3002</p> <p>\u4f8b\u5982:</p> <pre><code>...\n# \u521b\u5efa\u4e00\u4e2a\u8fdb\u7a0b\u6c60\nwith ProcessPoolExecutor as exe:\n    # \u83b7\u53d6\u4e8b\u4ef6\u5faa\u73af\n    loop = asyncio.get_running_loop()\n    # \u5728\u5355\u72ec\u7684\u7ebf\u7a0b\u4e2d\u6267\u884c\u51fd\u6570\n    # process pool is shutdown automatically...\n    # \u8fdb\u7a0b\u6c60\u81ea\u52a8\u5173\u95ed...\n</code></pre> <p>\u8fd9\u4e24\u79cd\u65b9\u6cd5\u5141\u8bb8\u963b\u585e\u8c03\u7528\u4f5c\u4e3a asyncio \u7a0b\u5e8f\u4e2d\u7684\u5f02\u6b65\u4efb\u52a1\u6267\u884c\u3002</p> <p>The asyncio module provides two approaches for executing blocking calls in asyncio programs.</p> <p>The first is to use the asyncio.to_thread() function.</p> <p>This is in the high-level API and is intended for application developers.</p> <p>The asyncio.to_thread() function takes a function name to execute and any arguments.</p> <p>The function is executed in a separate thread. It returns a coroutine that can be awaited or scheduled as an independent task.</p> <p>For example:</p> <pre><code>...\n# execute a function in a separate thread\nawait asyncio.to_thread(task)\n</code></pre> <p>The task will not begin executing until the returned coroutine is given an opportunity to run in the event loop.</p> <p>The asyncio.to_thread() function creates a ThreadPoolExecutor behind the scenes to execute blocking calls.</p> <p>As such, the <code>asyncio.to_thread()</code> function is only appropriate for IO-bound tasks.</p> <p>An alternative approach is to use the loop.run_in_executor() function.</p> <p>This is in the low-level asyncio API and first requires access to the event loop, such as via the asyncio.get_running_loop() function.</p> <p>The <code>loop.run_in_executor()</code> function takes an executor and a function to execute.</p> <p>If None is provided for the executor, then the default executor is used, which is a ThreadPoolExecutor.</p> <p>The <code>loop.run_in_executor()</code> function returns an awaitable that can be awaited if needed. The task will begin executing immediately, so the returned awaitable does not need to be awaited or scheduled for the blocking call to start executing.</p> <p>For example:</p> <pre><code>...\n# get the event loop\nloop = asyncio.get_running_loop()\n# execute a function in a separate thread\nawait loop.run_in_executor(None, task)\n</code></pre> <p>Alternatively, an executor can be created and passed to the loop.run_in_executor() function, which will execute the asynchronous call in the executor.</p> <p>The caller must manage the executor in this case, shutting it down once the caller is finished with it.</p> <p>For example:</p> <pre><code>...\n# create a process pool\nwith ProcessPoolExecutor as exe:\n    # get the event loop\n    loop = asyncio.get_running_loop()\n    # execute a function in a separate thread\n    await loop.run_in_executor(exe, task)\n    # process pool is shutdown automatically...\n</code></pre> <p>These two approaches allow a blocking call to be executed as an asynchronous task in an asyncio program.</p>"},{"location":"asyncio/en/c25/","title":"25. \u4f7f\u7528 Asyncio \u7684\u5e38\u89c1\u53cd\u5bf9\u610f\u89c1","text":"<p>25. Common Objections to Using Asyncio</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f02\u6b65\u548c\u534f\u7a0b\u53ef\u80fd\u4e0d\u662f\u89e3\u51b3\u7a0b\u5e8f\u4e2d\u6240\u6709\u5e76\u53d1\u95ee\u9898\u7684\u6700\u4f73\u89e3\u51b3\u65b9\u6848\u3002</p> <p>\u8bdd\u867d\u5982\u6b64\uff0c\u4e5f\u53ef\u80fd\u5b58\u5728\u4e00\u4e9b\u8bef\u89e3\uff0c\u963b\u788d\u60a8\u5145\u5206\u3001\u6700\u4f73\u5730\u5229\u7528 Python \u4e2d asyncio \u7684\u529f\u80fd\u3002</p> <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u56de\u987e\u5f00\u53d1\u4eba\u5458\u5728\u8003\u8651\u4f7f\u7528 asyncio \u65f6\u9047\u5230\u7684\u4e00\u4e9b\u5e38\u89c1\u53cd\u5bf9\u610f\u89c1\u3002</p> <p>Asyncio and coroutines may not be the best solution for all concurrency problems in your program.</p> <p>That being said, there may also be some misunderstandings that are preventing you from making full and best use of the capabilities of the asyncio in Python.</p> <p>In this section, we review some of the common objections seen by developers when considering using the asyncio.</p>"},{"location":"asyncio/en/c25/#251-\u5168\u5c40\u89e3\u91ca\u5668\u9501-gil-\u600e\u4e48\u6837","title":"25.1 \u5168\u5c40\u89e3\u91ca\u5668\u9501 (GIL) \u600e\u4e48\u6837\uff1f","text":"<p>25.1 What About the Global Interpreter Lock (GIL)?</p> \u4e2d\u6587\u82f1\u6587 <p>GIL \u4fdd\u62a4 Python \u89e3\u91ca\u5668\u7684\u5185\u90e8\u514d\u53d7\u591a\u4e2a\u7ebf\u7a0b\u7684\u5e76\u53d1\u8bbf\u95ee\u548c\u4fee\u6539\u3002</p> <p>asyncio \u4e8b\u4ef6\u5faa\u73af\u5728\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\u8fd0\u884c\u3002</p> <p>\u8fd9\u610f\u5473\u7740\u6240\u6709\u534f\u7a0b\u90fd\u5728\u5355\u4e2a\u7ebf\u7a0b\u4e2d\u8fd0\u884c\u3002</p> <p>\u56e0\u6b64\uff0c\u4f7f\u7528 asyncio \u548c\u534f\u7a0b\u65f6\uff0cGIL \u4e0d\u662f\u95ee\u9898\u3002</p> <p>The GIL protects the internals of the Python interpreter from concurrent access and modification from multiple threads.</p> <p>The asyncio event loop runs in one thread.</p> <p>This means that all coroutines run in a single thread.</p> <p>As such the GIL is not an issue when using asyncio and coroutine.</p>"},{"location":"asyncio/en/c25/#252-python-\u534f\u7a0b\u662f\u771f\u5b9e\u7684\u5417","title":"25.2 Python \u534f\u7a0b\u662f\u201c\u771f\u5b9e\u7684\u201d\u5417\uff1f","text":"<p>25.2 Are Python Coroutines \u201cReal\u201c?</p> \u4e2d\u6587\u82f1\u6587 <p>\u534f\u7a0b\u7531\u8f6f\u4ef6\u7ba1\u7406\u3002</p> <p>\u534f\u7a0b\u5728 Python \u8fd0\u884c\u65f6\u7684 asyncio \u4e8b\u4ef6\u5faa\u73af\u4e2d\u8fd0\u884c\u548c\u7ba1\u7406\uff08\u5207\u6362\uff09\u3002</p> <p>\u5b83\u4eec\u4e0d\u662f\u5e95\u5c42\u64cd\u4f5c\u7cfb\u7edf\u7ea7\u522b\u63d0\u4f9b\u7684\u529f\u80fd\u4ee5\u53ca\u8f6f\u4ef6\u8868\u793a\uff0c\u4f8b\u5982\u7ebf\u7a0b\u548c\u8fdb\u7a0b\u3002</p> <p>\u4ece\u8fd9\u4e2a\u610f\u4e49\u4e0a\u8bf4\uff0cPython \u4e0d\u652f\u6301\u201c\u539f\u751f\u534f\u7a0b\u201d\uff0c\u4f46\u6211\u4e0d\u786e\u5b9a\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u662f\u5426\u5b58\u5728\u8fd9\u6837\u7684\u4e1c\u897f\u3002</p> <p>Coroutines are managed in software.</p> <p>Coroutines run and are managed (switched) within the asyncio event loop in the Python runtime.</p> <p>They are not a software representation of a capability provided by the underlying operating system, like threads and processes.</p> <p>In this sense, Python does not have support for \u201cnative coroutines\u201d, but I\u2019m not sure such things exist in modern operating systems.</p>"},{"location":"asyncio/en/c25/#253-python-\u7684\u5e76\u53d1\u6027\u4e0d\u662f\u6709\u95ee\u9898\u5417","title":"25.3 Python \u7684\u5e76\u53d1\u6027\u4e0d\u662f\u6709\u95ee\u9898\u5417\uff1f","text":"<p>25.3 Isn\u2019t Python Concurrency Buggy?</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e0d\ud83d\ude45\ud83c\udffb\u200d\u2640\ufe0f\u3002</p> <p>Python \u901a\u8fc7\u534f\u7a0b\u3001\u7ebf\u7a0b\u548c\u8fdb\u7a0b\u63d0\u4f9b\u4e00\u6d41\u7684\u5e76\u53d1\u6027\u3002</p> <p>\u5b83\u5df2\u7ecf\u5b58\u5728\u5f88\u957f\u65f6\u95f4\u4e86\uff0c\u5e76\u4e14\u5e7f\u6cdb\u5e94\u7528\u4e8e\u5f00\u6e90\u548c\u5546\u4e1a\u9879\u76ee\u4e2d\u3002</p> <p>No.</p> <p>Python provides first-class concurrency with coroutines, threads, and processes.</p> <p>It has for a long time now and it is widely used in open source and commercial projects.</p>"},{"location":"asyncio/en/c25/#254-\u5bf9\u4e8e\u5e76\u53d1\u6765\u8bf4python-\u4e0d\u662f\u4e00\u4e2a\u7cdf\u7cd5\u7684\u9009\u62e9\u5417","title":"25.4 \u5bf9\u4e8e\u5e76\u53d1\u6765\u8bf4\uff0cPython \u4e0d\u662f\u4e00\u4e2a\u7cdf\u7cd5\u7684\u9009\u62e9\u5417\uff1f","text":"<p>25.4 Isn\u2019t Python a Bad Choice for Concurrency?</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f00\u53d1\u4eba\u5458\u559c\u7231 Python \u7684\u539f\u56e0\u6709\u5f88\u591a\uff0c\u6700\u5e38\u89c1\u7684\u662f\u56e0\u4e3a\u5b83\u6613\u4e8e\u4f7f\u7528\u4e14\u5f00\u53d1\u901f\u5ea6\u5feb\u3002</p> <p>Python \u901a\u5e38\u7528\u4e8e\u7c98\u5408\u4ee3\u7801\u3001\u4e00\u6b21\u6027\u811a\u672c\uff0c\u4f46\u8d8a\u6765\u8d8a\u591a\u5730\u7528\u4e8e\u5927\u578b\u8f6f\u4ef6\u7cfb\u7edf\u3002</p> <p>\u5982\u679c\u60a8\u4f7f\u7528 Python \u5e76\u4e14\u9700\u8981\u5e76\u53d1\u6027\uff0c\u90a3\u4e48\u60a8\u53ef\u4ee5\u4f7f\u7528\u73b0\u6709\u7684\u4e1c\u897f\u3002 \u8fd9\u4e2a\u95ee\u9898\u6beb\u65e0\u610f\u4e49\u3002</p> <p>\u5982\u679c\u60a8\u9700\u8981\u5e76\u53d1\u6027\u5e76\u4e14\u5c1a\u672a\u9009\u62e9\u4e00\u79cd\u8bed\u8a00\uff0c\u90a3\u4e48\u53e6\u4e00\u79cd\u8bed\u8a00\u53ef\u80fd\u66f4\u5408\u9002\uff0c\u4e5f\u53ef\u80fd\u4e0d\u5408\u9002\u3002 \u9700\u8981\u8003\u8651\u9879\u76ee\u7684\u5168\u90e8\u529f\u80fd\u548c\u975e\u529f\u80fd\u9700\u6c42\uff08\u6216\u7528\u6237\u7684\u9700\u6c42\u3001\u60f3\u6cd5\u548c\u613f\u671b\uff09\u4ee5\u53ca\u4e0d\u540c\u5f00\u53d1\u5e73\u53f0\u7684\u529f\u80fd\u3002</p> <p>Developers love python for many reasons, most commonly because it is easy to use and fast for development.</p> <p>Python is commonly used for glue code, one-off scripts, but more and more for large-scale software systems.</p> <p>If you are using Python and then you need concurrency, then you work with what you have. The question is moot.</p> <p>If you need concurrency and you have not chosen a language, perhaps another language would be more appropriate, or perhaps not. Consider the full scope of functional and non-functional requirements (or user needs, wants, and desires) for your project and the capabilities of different development platforms.</p>"},{"location":"asyncio/en/c25/#255-\u4e3a\u4ec0\u4e48\u4e0d\u4f7f\u7528\u7ebf\u7a0b\u6765\u4ee3\u66ff","title":"25.5 \u4e3a\u4ec0\u4e48\u4e0d\u4f7f\u7528\u7ebf\u7a0b\u6765\u4ee3\u66ff\uff1f","text":"<p>25.5 Why Not Use Threads Instead?</p> \u4e2d\u6587\u82f1\u6587 <ul> <li> <p>\u60a8\u53ef\u4ee5\u4f7f\u7528\u7ebf\u7a0b\u800c\u4e0d\u662f\u5f02\u6b65\u3002</p> </li> <li> <p>\u4efb\u4f55\u4f7f\u7528\u7ebf\u7a0b\u5f00\u53d1\u7684\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u4f7f\u7528 asyncio \u548c\u534f\u7a0b\u91cd\u5199\u3002</p> </li> <li> <p>\u4efb\u4f55\u4f7f\u7528\u534f\u7a0b\u548c asyncio \u5f00\u53d1\u7684\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u4f7f\u7528\u7ebf\u7a0b\u91cd\u5199\u3002</p> </li> <li> <p>\u5728\u9879\u76ee\u4e2d\u91c7\u7528 asyncio \u662f\u4e00\u79cd\u9009\u62e9\uff0c\u5176\u7406\u7531\u7531\u60a8\u51b3\u5b9a\u3002</p> </li> <li> <p>\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u5728\u529f\u80fd\u4e0a\u662f\u7b49\u6548\u7684\u3002</p> </li> <li> <p>\u8bb8\u591a\u7528\u4f8b\u4f7f\u7528\u7ebf\u7a0b\u5c06\u6267\u884c\u5f97\u66f4\u5feb\uff0c\u5e76\u4e14\u53ef\u80fd\u4e3a\u66f4\u5e7f\u6cdb\u7684 Python \u5f00\u53d1\u4eba\u5458\u6240\u719f\u6089\u3002</p> </li> <li> <p>\u4f7f\u7528 asyncio \u65f6\uff0c\u7f51\u7edc\u7f16\u7a0b\u548c\u6267\u884c\u7cfb\u7edf\u547d\u4ee4\u9886\u57df\u7684\u4e00\u4e9b\u7528\u4f8b\u53ef\u80fd\u4f1a\u66f4\u7b80\u5355\uff08\u6700\u7b80\u5355\uff09\uff08\u4ee3\u7801\u66f4\u5c11\uff09\uff0c\u5e76\u4e14\u6bd4\u4f7f\u7528\u7ebf\u7a0b\u66f4\u5177\u53ef\u6269\u5c55\u6027\u3002</p> </li> </ul> <p>You can use threads instead of asyncio.</p> <p>Any program developed using threads can be rewritten to use asyncio and coroutines.</p> <p>Any program developed using coroutines and asyncio can be rewritten to use threads.</p> <p>Adopting asyncio in a project is a choice, the rationale is yours.</p> <p>For the most part, they are functionally equivalent.\uff08\u529f\u80fd\u7b49\u6548\uff09</p> <p>Many use cases will execute faster using threads and may be more familiar(\u4eb2\u5207) to a wider array of Python developers.</p> <p>Some use cases in the areas of network programming and executing system commands may be simpler(\u6700\u7b80\u5355) (less code) when using asyncio, and significantly more scalable than using threads.</p>"},{"location":"asyncio/en/c26/","title":"26. \u8fdb\u4e00\u6b65\u9605\u8bfb","text":"<p>26. Further Reading</p> \u4e2d\u6587\u82f1\u6587 <p>\u672c\u8282\u5217\u51fa\u4e86\u6709\u5173\u8be5\u4e3b\u9898\u7684\u6709\u7528\u7684\u5176\u4ed6\u8d44\u6e90\u3002</p> <p>This section lists helpful additional resources on the topic.</p>"},{"location":"asyncio/en/c26/#261-python-\u5f02\u6b65\u4e66\u7c4d","title":"26.1 Python \u5f02\u6b65\u4e66\u7c4d","text":"<p>26.1 Python Asyncio Books</p> \u4e2d\u6587\u82f1\u6587 <p>\u672c\u8282\u5217\u51fa\u4e86\u6211\u6709\u5173 Python asyncio \u7684\u4e66\u7c4d\uff0c\u65e8\u5728\u5e2e\u52a9\u60a8\u5feb\u901f\u5165\u95e8\u5e76\u83b7\u5f97\u826f\u597d\u7684\u6548\u679c\u3002</p> <ul> <li>Python Asyncio Jump-Start, Jason Brownlee, 2022. (my book!)</li> <li>Python Asyncio Interview Questions</li> <li>Asyncio Module API Cheat Sheet</li> </ul> <p>\u5176\u4ed6\u5173\u4e8e asyncio \u7684\u4e66\u7c4d\u5305\u62ec\uff1a</p> <ul> <li>Python Concurrency with asyncio, Matthew Fowler, 2022.</li> <li>Using Asyncio in Python, Caleb Hattingh, 2020.</li> </ul> <p>This section lists my books on Python asyncio, designed to help you get started and get good, super fast.</p> <ul> <li>Python Asyncio Jump-Start, Jason Brownlee, 2022. (my book!)</li> <li>Python Asyncio Interview Questions</li> <li>Asyncio Module API Cheat Sheet</li> </ul> <p>Other books on asyncio include:</p> <ul> <li>Python Concurrency with asyncio, Matthew Fowler, 2022.</li> <li>Using Asyncio in Python, Caleb Hattingh, 2020.</li> </ul>"},{"location":"asyncio/en/c26/#262-apis","title":"26.2 APIs","text":"\u4e2d\u6587\u82f1\u6587 <ul> <li>asyncio \u2014 Asynchronous I/O</li> <li>Asyncio Coroutines and Tasks</li> <li>Asyncio Streams</li> <li>Asyncio Subprocesses</li> <li>Asyncio Queues</li> <li>Asyncio Synchronization Primitives</li> </ul> <ul> <li>asyncio \u2014 Asynchronous I/O</li> <li>Asyncio Coroutines and Tasks</li> <li>Asyncio Streams</li> <li>Asyncio Subprocesses</li> <li>Asyncio Queues</li> <li>Asyncio Synchronization Primitives</li> </ul>"},{"location":"asyncio/en/c26/#263-\u53c2\u8003","title":"26.3 \u53c2\u8003","text":"<p>26.3 References</p> \u4e2d\u6587\u82f1\u6587 <ul> <li>Asynchronous I/O, Wikipedia.</li> <li>Coroutine, Wikipedia.</li> </ul> <ul> <li>Asynchronous I/O, Wikipedia.</li> <li>Coroutine, Wikipedia.</li> </ul>"},{"location":"asyncio/en/c27/","title":"27. \u7ed3\u8bba","text":"<p>27. Conclusions</p> \u4e2d\u6587\u82f1\u6587 <p>\u8fd9\u662f\u4e00\u672c\u5f88\u5927\u7684\u6307\u5357\uff0c\u60a8\u5df2\u7ecf\u8be6\u7ec6\u4e86\u89e3\u4e86 asyncio \u548c\u534f\u7a0b\u5982\u4f55\u5728 Python \u4e2d\u5de5\u4f5c\u4ee5\u53ca\u5982\u4f55\u5728\u60a8\u7684\u9879\u76ee\u4e2d\u6700\u597d\u5730\u4f7f\u7528\u5b83\u4eec\u3002</p> <p>\u60a8\u89c9\u5f97\u672c\u6307\u5357\u6709\u7528\u5417\uff1f</p> <p>\u6211\u5f88\u60f3\u77e5\u9053\uff0c\u8bf7\u5728\u4e0b\u9762\u7684\u8bc4\u8bba\u4e2d\u5206\u4eab\u4e00\u53e5\u597d\u8bdd\u3002</p> <p>\u4f60\u5728\u9879\u76ee\u4e2d\u4f7f\u7528\u8fc7 asyncio \u5417\uff1f</p> <p>\u6211\u5f88\u60f3\u542c\u542c\uff0c\u8bf7\u5728\u8bc4\u8bba\u4e2d\u544a\u8bc9\u6211\u3002</p> <p>\u4f60\u6709\u4efb\u4f55\u95ee\u9898\u5417\uff1f</p> <p>\u5728\u4e0b\u9762\u7684\u8bc4\u8bba\u4e2d\u7559\u4e0b\u60a8\u7684\u95ee\u9898\uff0c\u6211\u4f1a\u5feb\u901f\u56de\u590d\u5e76\u63d0\u4f9b\u6211\u6700\u597d\u7684\u5efa\u8bae\u3002</p> <p>\u5728 reddit \u548c hackernews \u4e2d\u52a0\u5165\u8ba8\u8bba\u3002</p> <p>This is a large guide, and you have discovered in great detail how asyncio and coroutines work in Python and how to best use them in your project.</p> <p>Did you find this guide useful?</p> <p>I\u2019d love to know, please share a kind word in the comments below.</p> <p>Have you used asyncio on a project?</p> <p>I\u2019d love to hear about it, please let me know in the comments.</p> <p>Do you have any questions?</p> <p>Leave your question in a comment below and I will reply fast with my best advice.</p> <p>Join the discussion on reddit and hackernews.</p>"},{"location":"asyncio/en/c3/","title":"3. Asyncio \u5728\u4ec0\u4e48\u65f6\u5019\u4f7f\u7528","text":"<p>3. When to Use Asyncio</p> \u4e2d\u6587\u82f1\u6587 <p>\u4ece\u5e7f\u4e49\u4e0a\u8bb2\uff0cAsyncio \u662f\u65b0\u7684\u3001\u6d41\u884c\u7684\u3001\u8ba8\u8bba\u8f83\u591a\u4e14\u4ee4\u4eba\u5174\u594b\u7684\u3002</p> <p>\u7136\u800c\uff0c\u5bf9\u4e8e\u4f55\u65f6\u5e94\u8be5\u5728\u9879\u76ee\u4e2d\u91c7\u7528\u5b83\u5b58\u5728\u5f88\u591a\u56f0\u60d1\u3002</p> <p>\u6211\u4eec\u4ec0\u4e48\u65f6\u5019\u5e94\u8be5\u5728Python\u4e2d\u4f7f\u7528asyncio\uff1f</p> <p>Asyncio, broadly, is new, popular, much discussed, and exciting.</p> <p>Nevertheless, there is a lot of confusion over when it should be adopted in a project.</p> <p>When should we use asyncio in Python?</p>"},{"location":"asyncio/en/c3/#31-\u4f7f\u7528python-asyncio\u7684\u539f\u56e0","title":"3.1 \u4f7f\u7528Python Asyncio\u7684\u539f\u56e0","text":"<p>3.1 Reasons to Use Asyncio in Python</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728 Python \u9879\u76ee\u4e2d\u4f7f\u7528 asyncio \u53ef\u80fd\u6709 3 \u4e2a\u6700\u91cd\u8981\u7684\u539f\u56e0\u3002</p> <p>\u4ed6\u4eec\u662f:</p> <ol> <li>\u4f7f\u7528 asyncio \u4ee5\u4fbf\u5728\u7a0b\u5e8f\u4e2d\u91c7\u7528\u534f\u7a0b\u3002</li> <li>\u4f7f\u7528 asyncio \u4ee5\u4fbf\u4f7f\u7528\u5f02\u6b65\u7f16\u7a0b\u8303\u4f8b\u3002</li> <li>\u4f7f\u7528 asyncio \u4ee5\u4fbf\u4f7f\u7528\u975e\u963b\u585eI/O\u3002</li> </ol> <p>There are perhaps 3 top-level reasons to use asyncio in a Python project.</p> <p>They are:</p> <p>Use asyncio in order to adopt coroutines in your program. Use asyncio in order to use the asynchronous programming paradigm. Use asyncio in order to use non-blocking I/O.</p>"},{"location":"asyncio/en/c3/#311-\u539f\u56e0-1-\u4f7f\u7528\u534f\u7a0b","title":"3.1.1 \u539f\u56e0 1: \u4f7f\u7528\u534f\u7a0b","text":"<p>3.1.1 Reason 1: To Use Coroutines</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u80fd\u4f1a\u9009\u62e9\u4f7f\u7528 asyncio\uff0c\u56e0\u4e3a\u6211\u4eec\u60f3\u4f7f\u7528\u534f\u7a0b\u3002</p> <p>\u6211\u4eec\u53ef\u80fd\u60f3\u8981\u4f7f\u7528\u534f\u7a0b\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u7a0b\u5e8f\u4e2d\u53ef\u4ee5\u6709\u6bd4\u5e76\u53d1\u7ebf\u7a0b\u66f4\u591a\u7684\u5e76\u53d1\u534f\u7a0b\u3002</p> <p>\u534f\u7a0b\u662f\u53e6\u4e00\u4e2a\u5e76\u53d1\u5355\u5143\uff0c\u5c31\u50cf\u7ebf\u7a0b\u548c\u8fdb\u7a0b\u4e00\u6837\u3002</p> <p>\u57fa\u4e8e\u7ebf\u7a0b\u7684\u5e76\u53d1\u7531\u7ebf\u7a0b\u6a21\u5757\u63d0\u4f9b\uff0c\u5e76\u7531\u5e95\u5c42\u64cd\u4f5c\u7cfb\u7edf\u652f\u6301\u3002 \u5b83\u9002\u5408\u963b\u585e I/O \u4efb\u52a1\uff0c\u4f8b\u5982\u4ece\u6587\u4ef6\u3001\u5957\u63a5\u5b57\u548c\u8bbe\u5907\u8bfb\u53d6\u548c\u5199\u5165\u3002</p> <p>\u57fa\u4e8e\u8fdb\u7a0b\u7684\u5e76\u53d1\u6027\u7531\u591a\u5904\u7406\u6a21\u5757\u63d0\u4f9b\uff0c\u5e76\u4e14\u4e5f\u53d7\u5230\u5e95\u5c42\u64cd\u4f5c\u7cfb\u7edf\uff08\u5982\u7ebf\u7a0b\uff09\u7684\u652f\u6301\u3002 \u5b83\u9002\u7528\u4e8e\u4e0d\u9700\u8981\u592a\u591a\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684 CPU \u5bc6\u96c6\u578b\u4efb\u52a1\uff0c\u4f8b\u5982\u8ba1\u7b97\u4efb\u52a1\u3002</p> <p>\u534f\u7a0b\u662f\u7531 Python \u8bed\u8a00\u548c\u8fd0\u884c\u65f6\uff08\u6807\u51c6\u89e3\u91ca\u5668\uff09\u63d0\u4f9b\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u5e76\u7531 asyncio \u6a21\u5757\u8fdb\u4e00\u6b65\u652f\u6301\u3002 \u5b83\u4eec\u9002\u7528\u4e8e\u5e26\u6709\u5b50\u8fdb\u7a0b\u548c\u5957\u63a5\u5b57\u7684\u975e\u963b\u585e I/O\uff0c\u4f46\u662f\uff0c\u963b\u585e I/O \u548c CPU \u5bc6\u96c6\u578b\u4efb\u52a1\u53ef\u4ee5\u5728\u5e55\u540e\u4f7f\u7528\u7ebf\u7a0b\u548c\u8fdb\u7a0b\u4ee5\u6a21\u62df\u975e\u963b\u585e\u65b9\u5f0f\u4f7f\u7528\u3002</p> <p>\u6700\u540e\u4e00\u70b9\u662f\u5fae\u5999\u800c\u5173\u952e\u7684\u3002 \u5c3d\u7ba1\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u534f\u7a0b\u6765\u5b9e\u73b0 Python \u4e2d\u5f15\u5165\u7684\u975e\u963b\u585e\u529f\u80fd\uff0c\u4f46\u5b9e\u9645\u4e0a\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u4eec\u7528\u4e8e\u4efb\u4f55\u4efb\u52a1\u3002 \u5982\u679c\u6211\u4eec\u613f\u610f\uff0c\u4efb\u4f55\u4f7f\u7528\u7ebf\u7a0b\u6216\u8fdb\u7a0b\u7f16\u5199\u7684\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u91cd\u5199\u6216\u4f7f\u7528\u534f\u7a0b\u7f16\u5199\u3002</p> <p>\u7ebf\u7a0b\u548c\u8fdb\u7a0b\u901a\u8fc7\u64cd\u4f5c\u7cfb\u7edf\u9009\u62e9\u54ea\u4e9b\u7ebf\u7a0b\u548c\u8fdb\u7a0b\u5e94\u8be5\u8fd0\u884c\u3001\u4f55\u65f6\u8fd0\u884c\u4ee5\u53ca\u8fd0\u884c\u591a\u957f\u65f6\u95f4\u6765\u5b9e\u73b0\u591a\u4efb\u52a1\u5904\u7406\u3002 \u64cd\u4f5c\u5728\u7ebf\u7a0b\u548c\u8fdb\u7a0b\u4e4b\u95f4\u5feb\u901f\u5207\u6362\uff0c\u6682\u505c\u90a3\u4e9b\u672a\u8fd0\u884c\u7684\u7ebf\u7a0b\u548c\u8fdb\u7a0b\uff0c\u5e76\u6062\u590d\u90a3\u4e9b\u6388\u4e88\u65f6\u95f4\u8fd0\u884c\u7684\u7ebf\u7a0b\u548c\u8fdb\u7a0b\u3002 \u8fd9\u79f0\u4e3a\u62a2\u5360\u5f0f\u591a\u4efb\u52a1\u5904\u7406\u3002</p> <p>Python \u4e2d\u7684\u534f\u7a0b\u63d0\u4f9b\u4e86\u53e6\u4e00\u79cd\u591a\u4efb\u52a1\u5904\u7406\u7c7b\u578b\uff0c\u79f0\u4e3a\u534f\u4f5c\u591a\u4efb\u52a1\u5904\u7406(cooperating multitasking)\u3002</p> <p>\u534f\u7a0b\u662f\u53ef\u4ee5\u6682\u505c\u548c\u6062\u590d\u7684\u5b50\u4f8b\u7a0b\uff08\u51fd\u6570\uff09\u3002 \u5b83\u7531 await \u8868\u8fbe\u5f0f\u6302\u8d77\uff0c\u5e76\u5728 await \u8868\u8fbe\u5f0f\u89e3\u6790\u540e\u6062\u590d\u3002</p> <p>\u8fd9\u5141\u8bb8\u534f\u7a0b\u901a\u8fc7\u8bbe\u8ba1\u8fdb\u884c\u5408\u4f5c\uff0c\u9009\u62e9\u5982\u4f55\u4ee5\u53ca\u4f55\u65f6\u6682\u505c\u6267\u884c\u3002</p> <p>\u5b83\u662f\u4e00\u79cd\u66ff\u4ee3\u7684\u3001\u6709\u8da3\u7684\u3001\u5f3a\u5927\u7684\u5e76\u53d1\u65b9\u6cd5\uff0c\u4e0d\u540c\u4e8e\u57fa\u4e8e\u7ebf\u7a0b\u548c\u57fa\u4e8e\u8fdb\u7a0b\u7684\u5e76\u53d1\u3002</p> <p>\u4ec5\u6b64\u4e00\u70b9\u5c31\u53ef\u4ee5\u6210\u4e3a\u5728\u9879\u76ee\u4e2d\u91c7\u7528\u5b83\u7684\u7406\u7531\u3002</p> <p>\u534f\u7a0b\u7684\u53e6\u4e00\u4e2a\u5173\u952e\u65b9\u9762\u662f\u5b83\u4eec\u662f\u8f7b\u91cf\u7ea7\u7684\u3002</p> <p>\u5b83\u4eec\u6bd4\u7ebf\u7a0b\u66f4\u8f7b\u91cf\u3002 \u8fd9\u610f\u5473\u7740\u5b83\u4eec\u7684\u542f\u52a8\u901f\u5ea6\u66f4\u5feb\u5e76\u4e14\u4f7f\u7528\u7684\u5185\u5b58\u66f4\u5c11\u3002 \u672c\u8d28\u4e0a\uff0c\u534f\u7a0b\u662f\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684\u51fd\u6570\uff0c\u800c\u7ebf\u7a0b\u5219\u7531 Python \u5bf9\u8c61\u8868\u793a\uff0c\u5e76\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u5fc5\u987b\u4e0e\u8be5\u5bf9\u8c61\u4ea4\u4e92\u7684\u7ebf\u7a0b\u76f8\u5173\u8054\u3002</p> <p>\u56e0\u6b64\uff0cPython \u7a0b\u5e8f\u4e2d\u53ef\u80fd\u6709\u6570\u5343\u4e2a\u7ebf\u7a0b\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u5c06\u6570\u4e07\u6216\u6570\u5341\u4e07\u4e2a\u534f\u7a0b\u96c6\u4e2d\u5728\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\u3002</p> <p>\u6211\u4eec\u53ef\u80fd\u4f1a\u56e0\u4e3a\u534f\u7a0b\u7684\u53ef\u6269\u5c55\u6027\u800c\u9009\u62e9\u5b83\u4eec\u3002</p> <p>We may choose to use asyncio because we want to use coroutines.</p> <p>We may want to use coroutines because we can have many more concurrent coroutines in our program than concurrent threads.</p> <p>Coroutines are another unit of concurrency, like threads and processes.</p> <p>Thread-based concurrency is provided by the threading module and is supported by the underlying operating system. It is suited to blocking I/O tasks such reading and writing from files, sockets, and devices.</p> <p>Process-based concurrency is provided by the multiprocessing module and is also supported by the underlying operating system, like threads. It is suited to CPU-bound tasks that do not require much inter-process communication, such as compute tasks.</p> <p>Coroutines are an alternative that is provided by the Python language and runtime (standard interpreter) and further supported by the asyncio module. They are suited to non-blocking I/O with subprocesses and sockets, however, blocking I/O and CPU-bound tasks can be used in a simulated non-blocking manner using threads and processes under the covers.</p> <p>This last point is subtle and key. Although we can choose to use coroutines for the capability for which they were introduced into Python, non-blocking, we may in fact use them with any tasks. Any program written with threads or processes can be rewritten or instead written using coroutines if we so desire.</p> <p>Threads and processes achieve multitasking via the operating system that chooses which threads and processes should run, when, and for how long. The operating switches between threads and processes rapidly, suspending those that are not running and resuming those granted time to run. This is called preemptive multitasking.</p> <p>Coroutines in Python provide an alternative type of multitasking called cooperating multitasking.</p> <p>A coroutine is a subroutine (function) that can be suspended and resumed. It is suspended by the await expression and resumed once the await expression is resolved.</p> <p>This allows coroutines to cooperate by design, choosing how and when to suspend their execution.</p> <p>It is an alternate, interesting, and powerful approach to concurrency, different from thread-based and process-based concurrency.</p> <p>This alone may make it a reason to adopt it for a project.</p> <p>Another key aspect of coroutines is that they are lightweight.</p> <p>They are more lightweight than threads. This means they are faster to start and use less memory. Essentially a coroutine is a special type of function, whereas a thread is represented by a Python object and is associated with a thread in the operating system with which the object must interact.</p> <p>As such, we may have thousands of threads in a Python program, but we could easily have tens or hundreds of thousands of coroutines all in one thread.</p> <p>We may choose coroutines for their scalability.</p>"},{"location":"asyncio/en/c3/#312-\u539f\u56e0-2-\u4f7f\u7528\u5f02\u6b65\u7f16\u7a0b","title":"3.1.2 \u539f\u56e0 2: \u4f7f\u7528\u5f02\u6b65\u7f16\u7a0b","text":"<p>3.1.2 Reason 2: To Use Asynchronous Programming</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u80fd\u4f1a\u9009\u62e9\u4f7f\u7528asyncio\uff0c\u56e0\u4e3a\u6211\u4eec\u60f3\u5728\u6211\u4eec\u7684\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5f02\u6b65\u7f16\u7a0b\u3002</p> <p>\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u8981\u5f00\u53d1\u4e00\u4e2a\u4f7f\u7528\u5f02\u6b65\u7f16\u7a0b\u8303\u5f0f\u7684Python\u7a0b\u5e8f\u3002</p> <p>\u5f02\u6b65\u610f\u5473\u7740\u4e0d\u540c\u65f6\uff0c\u4e0e\u540c\u6b65\u6216\u540c\u65f6\u76f8\u5bf9\u3002</p> <p>\u7f16\u7a0b\u65f6\uff0c\u5f02\u6b65\u610f\u5473\u7740\u8bf7\u6c42\u64cd\u4f5c\uff0c\u4f46\u672a\u5728\u8bf7\u6c42\u65f6\u6267\u884c\u3002 \u8fd9\u662f\u7a0d\u540e\u6267\u884c\u7684\u3002</p> <p>\u5f02\u6b65\u7f16\u7a0b\u901a\u5e38\u610f\u5473\u7740\u56f4\u7ed5\u5f02\u6b65\u51fd\u6570\u8c03\u7528\u548c\u4efb\u52a1\u7684\u6982\u5ff5\u5168\u529b\u4ee5\u8d74\u5e76\u8bbe\u8ba1\u7a0b\u5e8f\u3002</p> <p>\u5c3d\u7ba1\u8fd8\u6709\u5176\u4ed6\u65b9\u6cd5\u53ef\u4ee5\u5b9e\u73b0\u5f02\u6b65\u7f16\u7a0b\u7684\u5143\u7d20\uff0c\u4f46 Python \u4e2d\u7684\u5b8c\u5168\u5f02\u6b65\u7f16\u7a0b\u9700\u8981\u4f7f\u7528\u534f\u7a0b\u548c asyncio \u6a21\u5757\u3002</p> <p>\u5b83\u662f\u4e00\u4e2a Python \u5e93\uff0c\u5141\u8bb8\u6211\u4eec\u4f7f\u7528\u5f02\u6b65\u7f16\u7a0b\u6a21\u578b\u8fd0\u884c\u4ee3\u7801\u3002</p> <p>\u2014 PAGE 3, PYTHON CONCURRENCY WITH ASYNCIO, 2022.</p> <p>\u6211\u4eec\u53ef\u80fd\u4f1a\u9009\u62e9\u4f7f\u7528asyncio\uff0c\u56e0\u4e3a\u6211\u4eec\u60f3\u5728\u6211\u4eec\u7684\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5f02\u6b65\u7f16\u7a0b\u6a21\u5757\uff0c\u8fd9\u662f\u4e00\u4e2a\u6709\u9053\u7406\u7684\u7406\u7531\u3002</p> <p>\u660e\u786e\u5730\u8bf4\uff0c\u8fd9\u4e2a\u539f\u56e0\u4e0e\u4f7f\u7528\u975e\u963b\u585e I/O \u65e0\u5173\u3002 \u5f02\u6b65\u7f16\u7a0b\u53ef\u4ee5\u72ec\u7acb\u4e8e\u975e\u963b\u585e I/O \u4f7f\u7528\u3002</p> <p>\u6b63\u5982\u6211\u4eec\u4e4b\u524d\u6240\u770b\u5230\u7684\uff0c\u534f\u7a0b\u53ef\u4ee5\u5f02\u6b65\u6267\u884c\u975e\u963b\u585e I/O\uff0c\u4f46 asyncio \u6a21\u5757\u8fd8\u63d0\u4f9b\u4e86\u4ee5\u5f02\u6b65\u65b9\u5f0f\u6267\u884c\u963b\u585e I/O \u548c CPU \u5bc6\u96c6\u578b\u4efb\u52a1\u7684\u5de5\u5177\uff0c\u901a\u8fc7\u7ebf\u7a0b\u548c \u6d41\u7a0b\u3002</p> <p>We may choose to use asyncio because we want to use asynchronous programming in our program.</p> <p>That is, we want to develop a Python program that uses the asynchronous programming paradigm.</p> <p>Asynchronous means not at the same time, as opposed to synchronous or at the same time.</p> <p>When programming, asynchronous means that the action is requested, although not performed at the time of the request. It is performed later.</p> <p>Asynchronous programming often means going all in and designing the program around the concept of asynchronous function calls and tasks.</p> <p>Although there are other ways to achieve elements of asynchronous programming, full asynchronous programming in Python requires the use of coroutines and the asyncio module.</p> <p>It is a Python library that allows us to run code using an asynchronous programming model.</p> <p>\u2014 PAGE 3, PYTHON CONCURRENCY WITH ASYNCIO, 2022.</p> <p>We may choose to use asyncio because we want to use the asynchronous programming module in our program, and that is a defensible reason.</p> <p>To be crystal clear, this reason is independent of using non-blocking I/O. Asynchronous programming can be used independently of non-blocking I/O.</p> <p>As we saw previously, coroutines can execute non-blocking I/O asynchronously, but the asyncio module also provides the facility for executing blocking I/O and CPU-bound tasks in an asynchronous manner, simulating non-blocking under the covers via threads and processes.</p>"},{"location":"asyncio/en/c3/#313-\u539f\u56e0-3-\u4f7f\u7528\u975e\u963b\u585eio","title":"3.1.3 \u539f\u56e0 3: \u4f7f\u7528\u975e\u963b\u585eI/O","text":"<p>3.1.3 Reason 3: To Use Non-Blocking I/O</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u80fd\u4f1a\u9009\u62e9\u4f7f\u7528 asyncio\uff0c\u56e0\u4e3a\u6211\u4eec\u5e0c\u671b\u6216\u9700\u8981\u5728\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u975e\u963b\u585e I/O\u3002</p> <p>\u8f93\u5165/\u8f93\u51fa\u6216\u7b80\u79f0 I/O \u8868\u793a\u4ece\u8d44\u6e90\u4e2d\u8bfb\u53d6\u6216\u5199\u5165\u3002</p> <p>\u5e38\u89c1\u7684\u4f8b\u5b50\u5305\u62ec\uff1a</p> <ul> <li>\u786c\u76d8\u9a71\u52a8\u5668\uff1a\u8bfb\u53d6\u3001\u5199\u5165\u3001\u8ffd\u52a0\u3001\u91cd\u547d\u540d\u3001\u5220\u9664\u7b49\u6587\u4ef6\u3002</li> <li>\u5916\u8bbe\uff1a\u9f20\u6807\u3001\u952e\u76d8\u3001\u5c4f\u5e55\u3001\u6253\u5370\u673a\u3001\u4e32\u53e3\u3001\u6444\u50cf\u5934\u7b49\u3002</li> <li>\u4e92\u8054\u7f51\uff1a\u4e0b\u8f7d\u548c\u4e0a\u4f20\u6587\u4ef6\u3001\u83b7\u53d6\u7f51\u9875\u3001\u67e5\u8be2RSS\u7b49\u3002</li> <li>\u6570\u636e\u5e93\uff1a\u67e5\u8be2\u3001\u66f4\u65b0\u3001\u5220\u9664\u7b49SQL\u67e5\u8be2\u3002</li> <li>\u7535\u5b50\u90ae\u4ef6\uff1a\u53d1\u9001\u90ae\u4ef6\u3001\u63a5\u6536\u90ae\u4ef6\u3001\u67e5\u8be2\u6536\u4ef6\u7bb1\u7b49\u3002</li> </ul> <p>\u4e0e\u4f7f\u7528 CPU \u8fdb\u884c\u8ba1\u7b97\u76f8\u6bd4\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u901f\u5ea6\u5f88\u6162\u3002</p> <p>\u5728\u7a0b\u5e8f\u4e2d\u5b9e\u73b0\u8fd9\u4e9b\u64cd\u4f5c\u7684\u5e38\u89c1\u65b9\u5f0f\u662f\u53d1\u51fa\u8bfb\u6216\u5199\u8bf7\u6c42\uff0c\u7136\u540e\u7b49\u5f85\u6570\u636e\u53d1\u9001\u6216\u63a5\u6536\u3002</p> <p>\u56e0\u6b64\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u901a\u5e38\u79f0\u4e3a\u963b\u585e I/O \u4efb\u52a1\u3002</p> <p>\u64cd\u4f5c\u7cfb\u7edf\u53ef\u4ee5\u770b\u5230\u8c03\u7528\u7ebf\u7a0b\u88ab\u963b\u585e\uff0c\u5e76\u5c06\u4e0a\u4e0b\u6587\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u5c06\u4f7f\u7528 CPU \u7684\u7ebf\u7a0b\u3002</p> <p>\u8fd9\u610f\u5473\u7740\u963b\u585e\u8c03\u7528\u4e0d\u4f1a\u51cf\u6162\u6574\u4e2a\u7cfb\u7edf\u7684\u901f\u5ea6\u3002 \u4f46\u5b83\u786e\u5b9e\u4f1a\u505c\u6b62\u6216\u963b\u6b62\u8fdb\u884c\u963b\u585e\u8c03\u7528\u7684\u7ebf\u7a0b\u6216\u7a0b\u5e8f\u3002</p> <p>\u8fd9\u610f\u5473\u7740\u963b\u585e\u8c03\u7528\u4e0d\u4f1a\u51cf\u6162\u6574\u4e2a\u7cfb\u7edf\u7684\u901f\u5ea6\u3002 \u4f46\u5b83\u786e\u5b9e\u4f1a\u505c\u6b62\u6216\u963b\u6b62\u8fdb\u884c\u963b\u585e\u8c03\u7528\u7684\u7ebf\u7a0b\u6216\u7a0b\u5e8f\u3002</p> <ul> <li>Python \u4e2d\u7684\u7ebf\u7a0b\u963b\u585e\u8c03\u7528</li> </ul> <p>\u975e\u963b\u585e I/O \u662f\u963b\u585e I/O \u7684\u66ff\u4ee3\u65b9\u6848\u3002</p> <p>\u5b83\u9700\u8981\u5e95\u5c42\u64cd\u4f5c\u7cfb\u7edf\u7684\u652f\u6301\uff0c\u5c31\u50cf\u963b\u585e I/O \u4e00\u6837\uff0c\u6240\u6709\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u90fd\u63d0\u4f9b\u5bf9\u67d0\u79cd\u5f62\u5f0f\u7684\u975e\u963b\u585e I/O \u7684\u652f\u6301\u3002</p> <p>\u975e\u963b\u585e I/O \u5141\u8bb8\u5c06\u8bfb\u53d6\u548c\u5199\u5165\u8c03\u7528\u4f5c\u4e3a\u5f02\u6b65\u8bf7\u6c42\u8fdb\u884c\u3002</p> <p>\u64cd\u4f5c\u7cfb\u7edf\u5c06\u5904\u7406\u8bf7\u6c42\u5e76\u5728\u7ed3\u679c\u53ef\u7528\u65f6\u901a\u77e5\u8c03\u7528\u7a0b\u5e8f\u3002</p> <ul> <li>\u975e\u963b\u585e I/O\uff1a\u901a\u8fc7\u5f02\u6b65\u8bf7\u6c42\u548c\u54cd\u5e94\u6267\u884c I/O \u64cd\u4f5c\uff0c\u800c\u4e0d\u662f\u7b49\u5f85\u64cd\u4f5c\u5b8c\u6210\u3002</li> </ul> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u975e\u963b\u585e I/O \u4e0e\u5f02\u6b65\u7f16\u7a0b\u7684\u5173\u7cfb\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u901a\u8fc7\u5f02\u6b65\u7f16\u7a0b\u6765\u4f7f\u7528\u975e\u963b\u585eI/O\uff0c\u6216\u8005\u8bf4\u975e\u963b\u585eI/O\u662f\u901a\u8fc7\u5f02\u6b65\u7f16\u7a0b\u6765\u5b9e\u73b0\u7684\u3002</p> <p>\u975e\u963b\u585e I/O \u4e0e\u5f02\u6b65\u7f16\u7a0b\u7684\u7ed3\u5408\u975e\u5e38\u5e38\u89c1\uff0c\u56e0\u6b64\u901a\u5e38\u7b80\u79f0\u4e3a\u5f02\u6b65 I/O\u3002</p> <ul> <li>\u5f02\u6b65 I/O\uff1a\u4e00\u79cd\u7b80\u5199\uff0c\u6307\u7684\u662f\u5f02\u6b65\u7f16\u7a0b\u4e0e\u975e\u963b\u585e I/O \u7684\u7ed3\u5408\u3002</li> </ul> <p>Python \u4e2d\u7684 asyncio \u6a21\u5757\u662f\u4e13\u95e8\u4e3a Python \u6807\u51c6\u5e93\u6dfb\u52a0\u5bf9\u5e26\u6709\u5b50\u8fdb\u7a0b\uff08\u4f8b\u5982\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u6267\u884c\u547d\u4ee4\uff09\u548c\u6d41\uff08\u4f8b\u5982 TCP \u5957\u63a5\u5b57\u7f16\u7a0b\uff09\u7684\u975e\u963b\u585e I/O \u7684\u652f\u6301\u800c\u6dfb\u52a0\u7684\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7ebf\u7a0b\u4ee5\u53caPython\u7ebf\u7a0b\u6c60\u6216\u7ebf\u7a0b\u6c60\u6267\u884c\u5668\u63d0\u4f9b\u7684\u5f02\u6b65\u7f16\u7a0b\u529f\u80fd\u6765\u6a21\u62df\u975e\u963b\u585eI/O\u3002</p> <p>asyncio \u6a21\u5757\u901a\u8fc7\u534f\u7a0b\u3001\u4e8b\u4ef6\u5faa\u73af\u548c\u5bf9\u8c61\u6765\u8868\u793a\u975e\u963b\u585e\u5b50\u8fdb\u7a0b\u548c\u6d41\uff0c\u4e3a\u975e\u963b\u585e I/O \u63d0\u4f9b\u4e00\u6d41\u7684\u5f02\u6b65\u7f16\u7a0b\u3002</p> <p>\u6211\u4eec\u53ef\u80fd\u4f1a\u9009\u62e9\u4f7f\u7528 asyncio\uff0c\u56e0\u4e3a\u6211\u4eec\u60f3\u5728\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5f02\u6b65 I/O\uff0c\u8fd9\u662f\u4e00\u4e2a\u5408\u7406\u7684\u7406\u7531\u3002</p> <p>We may choose to use asyncio because we want or require non-blocking I/O in our program.</p> <p>Input/Output or I/O for short means reading or writing from a resource.</p> <p>Common examples include:</p> <ul> <li>Hard disk drives: Reading, writing, appending, renaming, deleting, etc. files.</li> <li>Peripherals: mouse, keyboard, screen, printer, serial, camera, etc.</li> <li>Internet: Downloading and uploading files, getting a webpage, querying RSS, etc.</li> <li>Database: Select, update, delete, etc. SQL queries.</li> <li>Email: Send mail, receive mail, query inbox, etc.</li> </ul> <p>These operations are slow, compared to calculating things with the CPU.</p> <p>The common way these operations are implemented in programs is to make the read or write request and then wait for the data to be sent or received.</p> <p>As such, these operations are commonly referred to as blocking I/O tasks.</p> <p>The operating system can see that the calling thread is blocked and will context switch to another thread that will make use of the CPU.</p> <p>This means that the blocking call does not slow down the entire system. But it does halt or block the thread or program making the blocking call.</p> <p>You can learn more about blocking calls in the tutorial:</p> <ul> <li>Thread Blocking Call in Python</li> </ul> <p>Non-blocking I/O is an alternative to blocking I/O.</p> <p>It requires support in the underlying operating system, just like blocking I/O, and all modern operating systems provide support for some form of non-blocking I/O.</p> <p>Non-blocking I/O allows read and write calls to be made as asynchronous requests.</p> <p>The operating system will handle the request and notify the calling program when the results are available.</p> <ul> <li>Non-blocking I/O: Performing I/O operations via asynchronous requests and responses, rather than waiting for operations to complete.</li> </ul> <p>As such, we can see how non-blocking I/O is related to asynchronous programming. In fact, we use non-blocking I/O via asynchronous programming, or non-blocking I/O is implemented via asynchronous programming.</p> <p>The combination of non-blocking I/O with asynchronous programming is so common that it is commonly referred to by the shorthand of asynchronous I/O.</p> <ul> <li>Asynchronous I/O: A shorthand that refers to combining asynchronous programming with non-blocking I/O. T he asyncio module in Python was added specifically to add support for non-blocking I/O with subprocesses (e.g. executing commands on the operating system) and with streams (e.g. TCP socket programming) to the Python standard library.</li> </ul> <p>We could simulate non-blocking I/O using threads and the asynchronous programming capability provided by Python thread pools or thread pool executors.</p> <p>The asyncio module provides first-class asynchronous programming for non-blocking I/O via coroutines, event loops, and objects to represent non-blocking subprocesses and streams.</p> <p>We may choose to use asyncio because we want to use asynchronous I/O in our program, and that is a defensible reason.</p>"},{"location":"asyncio/en/c3/#32-\u4f7f\u7528asyncio\u7684\u5176\u4ed6\u539f\u56e0","title":"3.2 \u4f7f\u7528Asyncio\u7684\u5176\u4ed6\u539f\u56e0","text":"<p>3.2 Other Reasons to Use Asyncio</p> \u4e2d\u6587\u82f1\u6587 <p>\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f1a\u9009\u62e9\u4e00\u4e2a\u5728\u9879\u76ee\u8981\u6c42\u7684\u80cc\u666f\u4e0b\u5f97\u5230\u8fa9\u62a4\u7684\u7406\u7531\u3002</p> <p>\u6709\u65f6\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u51fd\u6570\u548c\u975e\u51fd\u6570\u9700\u6c42\uff0c\u6709\u65f6\u5219\u4e0d\u80fd\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u51fa\u4e8e\u4e0a\u8ff0\u539f\u56e0\u4e4b\u4e00\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u9009\u62e9\u4f7f\u7528 asyncio\u3002 \u5728\u6211\u4eec\u4e0d\u8fd9\u6837\u505a\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u9009\u62e9 asyncio \u6765\u4ea4\u4ed8\u89e3\u51b3\u7279\u5b9a\u95ee\u9898\u7684\u7a0b\u5e8f\u3002</p> <p>\u6211\u4eec\u53ef\u80fd\u4f7f\u7528 asyncio \u7684\u5176\u4ed6\u4e00\u4e9b\u539f\u56e0\u5305\u62ec\uff1a</p> <ol> <li>\u4f7f\u7528 asyncio \u56e0\u4e3a\u5176\u4ed6\u4eba\u5df2\u7ecf\u4e3a\u4f60\u505a\u51fa\u4e86\u51b3\u5b9a\u3002</li> <li>\u4f7f\u7528 asyncio\uff0c\u56e0\u4e3a\u60a8\u52a0\u5165\u7684\u9879\u76ee\u5df2\u7ecf\u5728\u4f7f\u7528\u5b83\u3002</li> <li>\u4f7f\u7528 asyncio \u56e0\u4e3a\u60a8\u60f3\u4e86\u89e3\u66f4\u591a\u6709\u5173\u5b83\u7684\u4fe1\u606f\u3002</li> </ol> <p>\u6211\u4eec\u5e76\u4e0d\u603b\u662f\u80fd\u591f\u5b8c\u5168\u63a7\u5236\u6211\u4eec\u6240\u4ece\u4e8b\u7684\u9879\u76ee\u3002</p> <p>\u5f00\u59cb\u4e00\u9879\u65b0\u5de5\u4f5c\u3001\u65b0\u89d2\u8272\u6216\u65b0\u9879\u76ee\u5e76\u7531\u76f4\u7ebf\u7ecf\u7406\u6216\u9996\u5e2d\u67b6\u6784\u5e08\u544a\u77e5\u5177\u4f53\u8bbe\u8ba1\u548c\u6280\u672f\u51b3\u7b56\u662f\u5f88\u5e38\u89c1\u7684\u3002</p> <p>\u4f7f\u7528 asyncio \u53ef\u80fd\u662f\u8fd9\u4e9b\u51b3\u5b9a\u4e4b\u4e00\u3002</p> <p>\u6211\u4eec\u53ef\u80fd\u5728\u9879\u76ee\u4e0a\u4f7f\u7528 asyncio\uff0c\u56e0\u4e3a\u8be5\u9879\u76ee\u5df2\u7ecf\u5728\u4f7f\u7528\u5b83\u3002 \u4f60\u5fc5\u987b\u4f7f\u7528asyncio\uff0c\u800c\u4e0d\u662f\u4f60\u9009\u62e9\u4f7f\u7528asyncio\u3002</p> <p>\u4e00\u4e2a\u76f8\u5173\u7684\u793a\u4f8b\u53ef\u80fd\u662f\u4f7f\u7528\u60a8\u5e0c\u671b\u91c7\u7528\u7684 asyncio \u89e3\u51b3\u95ee\u9898\u7684\u60c5\u51b5\u3002</p> <p>\u4f8b\u5982\uff1a</p> <ul> <li>\u4e5f\u8bb8\u60a8\u9700\u8981\u4f7f\u7528\u7b2c\u4e09\u65b9 API\uff0c\u5e76\u4e14\u4ee3\u7801\u793a\u4f8b\u4f7f\u7528 asyncio\u3002</li> <li>\u4e5f\u8bb8\u60a8\u9700\u8981\u96c6\u6210\u4f7f\u7528 asyncio \u7684\u73b0\u6709\u5f00\u6e90\u89e3\u51b3\u65b9\u6848\u3002</li> <li>\u4e5f\u8bb8\u60a8\u5076\u7136\u53d1\u73b0\u4e00\u4e9b\u4ee3\u7801\u7247\u6bb5\u53ef\u4ee5\u6ee1\u8db3\u60a8\u7684\u9700\u8981\uff0c\u4f46\u5b83\u4eec\u4f7f\u7528 asyncio\u3002</li> </ul> <p>\u7531\u4e8e\u7f3a\u4e4f\u66ff\u4ee3\u89e3\u51b3\u65b9\u6848\uff0casyncio \u53ef\u80fd\u4f1a\u56e0\u60a8\u9009\u62e9\u7684\u89e3\u51b3\u65b9\u6848\u800c\u5f3a\u52a0\u7ed9\u60a8\u3002</p> <p>\u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u6211\u4eec\u7684Python\u9879\u76ee\u9009\u62e9asyncio\u6765\u4e86\u89e3\u66f4\u591a\u3002</p> <p>\u4f60\u53ef\u80fd\u4f1a\u5632\u7b11\uff0c\u201c\u90a3\u8981\u6c42\u5462\uff1f\u201d</p> <p>\u60a8\u53ef\u80fd\u9009\u62e9\u91c7\u7528 asyncio \u53ea\u662f\u56e0\u4e3a\u60a8\u60f3\u5c1d\u8bd5\u4e00\u4e0b\uff0c\u5e76\u4e14\u8fd9\u662f\u4e00\u4e2a\u5408\u7406\u7684\u7406\u7531\u3002</p> <p>\u5728\u9879\u76ee\u4e2d\u4f7f\u7528 asyncio \u5c06\u4f7f\u60a8\u7684\u5de5\u4f5c\u66f4\u52a0\u5177\u4f53\u3002</p> <p>Ideally, we would choose a reason that is defended in the context of the requirements of the project.</p> <p>Sometimes we have control over the function and non-functional requirements and other times not. In the cases we do, we may choose to use asyncio for one of the reasons listed above. In the cases we don\u2019t, we may be led to choose asyncio in order to deliver a program that solves a specific problem.</p> <p>Some other reasons we may use asyncio include:</p> <ol> <li>Use asyncio because someone else made the decision for you.</li> <li>Use asyncio because the project you have joined is already using it.</li> <li>Use asyncio because you want to learn more about it.</li> </ol> <p>We don\u2019t always have full control over the projects we work on.</p> <p>It is common to start a new job, new role, or new project and be told by the line manager or lead architect of specific design and technology decisions.</p> <p>Using asyncio may be one of these decisions.</p> <p>We may use asyncio on a project because the project is already using it. You must use asyncio, rather than you choose to use asyncio.</p> <p>A related example might be the case of a solution to a problem that uses asyncio that you wish to adopt.</p> <p>For example:</p> <ul> <li>Perhaps you need to use a third-party API and the code examples use asyncio.</li> <li>Perhaps you need to integrate an existing open-source solution that uses asyncio.</li> <li>Perhaps you stumble across some code snippets that do what you need, yet they use asyncio.</li> </ul> <p>For lack of alternate solutions, asyncio may be thrust upon you by your choice of solution.</p> <p>Finally, we may choose asyncio for our Python project to learn more about.</p> <p>You may scoff, \u201cwhat about the requirements?\u201d</p> <p>You may choose to adopt asyncio just because you want to try it out and it can be a defensible reason.</p> <p>Using asyncio in a project will make its workings concrete for you.</p>"},{"location":"asyncio/en/c3/#33-asyncio\u5728\u4ec0\u4e48\u65f6\u5019\u4e0d\u9002\u7528","title":"3.3 Asyncio\u5728\u4ec0\u4e48\u65f6\u5019\u4e0d\u9002\u7528","text":"<p>3.3 When to Not Use Asyncio</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u82b1\u4e86\u5f88\u591a\u65f6\u95f4\u6765\u89e3\u91ca\u4e3a\u4ec0\u4e48\u5e94\u8be5\u4f7f\u7528 asyncio\u3002</p> <p>\u81f3\u5c11\u82b1\u4e00\u70b9\u65f6\u95f4\u6765\u89e3\u91ca\u4e3a\u4ec0\u4e48\u6211\u4eec\u4e0d\u5e94\u8be5\u4f7f\u7528\u5b83\u53ef\u80fd\u662f\u4e2a\u597d\u4e3b\u610f\u3002</p> <p>\u4e0d\u4f7f\u7528 asyncio \u7684\u539f\u56e0\u4e4b\u4e00\u662f\u60a8\u65e0\u6cd5\u4f7f\u7528\u4e0a\u8ff0\u539f\u56e0\u4e4b\u4e00\u6765\u634d\u536b\u5b83\u7684\u4f7f\u7528\u3002</p> <p>\u8fd9\u5e76\u4e0d\u662f\u4e07\u65e0\u4e00\u5931\u7684\u3002 \u53ef\u80fd\u8fd8\u6709\u5176\u4ed6\u672a\u5728\u4e0a\u9762\u5217\u51fa\u7684\u539f\u56e0\u4f7f\u7528\u5b83\u3002</p> <p>\u4f46\u662f\uff0c\u5982\u679c\u60a8\u9009\u62e9\u4f7f\u7528 asyncio \u7684\u539f\u56e0\uff0c\u5e76\u4e14\u5bf9\u4e8e\u60a8\u7684\u5177\u4f53\u60c5\u51b5\u6765\u8bf4\uff0c\u8fd9\u4e2a\u539f\u56e0\u611f\u89c9\u5f88\u8584\u5f31\u6216\u5145\u6ee1\u6f0f\u6d1e\u3002 \u4e5f\u8bb8 asyncio \u4e0d\u662f\u6b63\u786e\u7684\u89e3\u51b3\u65b9\u6848\u3002</p> <p>\u6211\u8ba4\u4e3a\u4e0d\u4f7f\u7528 asyncio \u7684\u4e3b\u8981\u539f\u56e0\u662f\u5b83\u6ca1\u6709\u63d0\u4f9b\u60a8\u8ba4\u4e3a\u7684\u597d\u5904\u3002</p> <p>\u5173\u4e8e Python \u5e76\u53d1\uff0c\u5c24\u5176\u662f asyncio\uff0c\u5b58\u5728\u8bb8\u591a\u8bef\u89e3\u3002</p> <p>\u4f8b\u5982:</p> <ul> <li>Asyncio \u5c06\u89e3\u51b3\u5168\u5c40\u89e3\u91ca\u5668\u9501\u95ee\u9898\u3002</li> <li>\u5f02\u6b65\u6bd4\u7ebf\u7a0b\u66f4\u5feb\u3002</li> <li>Asyncio \u907f\u514d\u4e86\u5bf9\u4e92\u65a5\u9501\u548c\u5176\u4ed6\u540c\u6b65\u539f\u8bed\u7684\u9700\u8981\u3002</li> <li>Asyncio \u6bd4\u7ebf\u7a0b\u66f4\u5bb9\u6613\u4f7f\u7528\u3002</li> </ul> <p>\u8fd9\u4e9b\u90fd\u662f\u5047\u7684\u3002</p> <p>\u6309\u7167\u8bbe\u8ba1\uff0c\u4e00\u6b21\u53ea\u80fd\u8fd0\u884c\u4e00\u4e2a\u534f\u7a0b\uff0c\u5b83\u4eec\u534f\u4f5c\u6267\u884c\u3002 \u8fd9\u5c31\u50cf GIL \u4e0b\u7684\u7ebf\u7a0b\u4e00\u6837\u3002 \u4e8b\u5b9e\u4e0a\uff0cGIL \u662f\u4e00\u4e2a\u6b63\u4ea4\u95ee\u9898\uff0c\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4f7f\u7528 asyncio \u65f6\u53ef\u80fd\u662f\u4e0d\u76f8\u5173\u7684\u3002</p> <p>\u4efb\u4f55\u53ef\u4ee5\u4f7f\u7528 asyncio \u7f16\u5199\u7684\u7a0b\u5e8f\uff0c\u90fd\u53ef\u4ee5\u4f7f\u7528\u7ebf\u7a0b\u7f16\u5199\uff0c\u5e76\u4e14\u901f\u5ea6\u53ef\u80fd\u4f1a\u4e00\u6837\u5feb\uff0c\u751a\u81f3\u66f4\u5feb\u3002 \u5b83\u4e5f\u53ef\u80fd\u4f1a\u66f4\u7b80\u5355\u3001\u66f4\u5bb9\u6613\u88ab\u5176\u4ed6\u5f00\u53d1\u4eba\u5458\u9605\u8bfb\u548c\u89e3\u91ca\u3002</p> <p>\u60a8\u53ef\u80fd\u4f1a\u5728\u7ebf\u7a0b\u4e2d\u9047\u5230\u4efb\u4f55\u5e76\u53d1\u6545\u969c\u6a21\u5f0f\uff0c\u60a8\u53ef\u80fd\u4f1a\u5728\u534f\u7a0b\u4e2d\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\u3002 \u60a8\u5fc5\u987b\u4f7f\u534f\u7a0b\u514d\u53d7\u6b7b\u9501\u548c\u7ade\u4e89\u6761\u4ef6\u7684\u5f71\u54cd\uff0c\u5c31\u50cf\u7ebf\u7a0b\u4e00\u6837\u3002</p> <p>\u4e0d\u4f7f\u7528 asyncio \u7684\u53e6\u4e00\u4e2a\u539f\u56e0\u662f\u60a8\u4e0d\u559c\u6b22\u5f02\u6b65\u7f16\u7a0b\u3002</p> <p>\u5f02\u6b65\u7f16\u7a0b\u5728\u8bb8\u591a\u4e0d\u540c\u7684\u7f16\u7a0b\u793e\u533a\uff08\u5c24\u5176\u662f JavaScript \u793e\u533a\uff09\u4e2d\u5df2\u7ecf\u6d41\u884c\u4e86\u4e00\u6bb5\u65f6\u95f4\u3002</p> <p>\u5b83\u4e0d\u540c\u4e8e\u8fc7\u7a0b\u5f0f\u3001\u9762\u5411\u5bf9\u8c61\u548c\u51fd\u6570\u5f0f\u7f16\u7a0b\uff0c\u6709\u4e9b\u5f00\u53d1\u4eba\u5458\u5c31\u662f\u4e0d\u559c\u6b22\u5b83\u3002</p> <p>\u6ca1\u95ee\u9898\u3002 \u5982\u679c\u60a8\u4e0d\u559c\u6b22\u5b83\uff0c\u8bf7\u4e0d\u8981\u4f7f\u7528\u5b83\u3002 \u8fd9\u662f\u4e00\u4e2a\u5408\u7406\u7684\u7406\u7531\u3002</p> <p>\u60a8\u53ef\u4ee5\u901a\u8fc7\u591a\u79cd\u65b9\u5f0f\u5b9e\u73b0\u76f8\u540c\u7684\u6548\u679c\uff0c\u7279\u522b\u662f\u6839\u636e\u9700\u8981\u901a\u8fc7\u7ebf\u7a0b\u6216\u8fdb\u7a0b\u6267\u884c\u5668\u8fdb\u884c\u4e00\u4e9b\u5f02\u6b65\u8c03\u7528\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u719f\u6089\u4e86\u4f55\u65f6\u4f7f\u7528 asyncio\uff0c\u8ba9\u6211\u4eec\u66f4\u8be6\u7ec6\u5730\u4e86\u89e3\u4e00\u4e0b\u534f\u7a0b\u3002</p> <p>We have spent a lot of time on reasons why we should use asyncio.</p> <p>It is probably a good idea to spend at least a moment on why we should not use it.</p> <p>One reason to not use asyncio is that you cannot defend its use using one of the reasons above.</p> <p>This is not foolproof. There may be other reasons to use it, not listed above.</p> <p>But, if you pick a reason to use asyncio and the reason feels thin or full of holes for your specific case. Perhaps asyncio is not the right solution.</p> <p>I think the major reason to not use asyncio is that it does not deliver the benefit that you think it does.</p> <p>There are many misconceptions about Python concurrency, especially around asyncio.</p> <p>For example:</p> <ul> <li>Asyncio will work around the global interpreter lock.</li> <li>Asyncio is faster than threads.</li> <li>Asyncio avoids the need for mutex locks and other synchronization primitives.</li> <li>Asyncio is easier to use than threads.</li> </ul> <p>These are all false.</p> <p>Only a single coroutine can run at a time by design, they cooperate to execute. This is just like threads under the GIL. In fact, the GIL is an orthogonal concern and probably irrelevant in most cases when using asyncio.</p> <p>Any program you can write with asyncio, you can write with threads and it will probably be as fast or faster. It will also probably be simpler and easier to read and interpret by fellow developers.</p> <p>Any concurrency failure mode you might expect with threads, you can encounter with coroutines. You must make coroutines safe from deadlocks and race conditions, just like threads.</p> <p>Another reason to not use asyncio is that you don\u2019t like asynchronous programming.</p> <p>Asynchronous programming has been popular for some time now in a number of different programming communities, most notably the JavaScript community.</p> <p>It is different from procedural, object-oriented, and functional programming, and some developers just don\u2019t like it.</p> <p>No problem. If you don\u2019t like it, don\u2019t use it. It\u2019s a fair reason.</p> <p>You can achieve the same effect in many ways, notably by sprinkling a few asynchronous calls in via thread or process executors as needed.</p> <p>Now that we are familiar with when to use asyncio, let\u2019s look at coroutines in more detail.</p>"},{"location":"asyncio/en/c4/","title":"4. Python \u4e2d\u7684\u534f\u7a0b","text":"<p>4. Coroutines in Python</p> \u4e2d\u6587\u82f1\u6587 <p>Python \u63d0\u4f9b\u4e86\u4e00\u6d41\u7684\u534f\u7a0b\uff0c\u5177\u6709 \u201ccoroutine\u201d \u7c7b\u578b\u548c\u65b0\u8868\u8fbe\u5f0f\uff0c\u4f8b\u5982 \u201casync def\u201d \u548c \u201cawait\u201d\u3002</p> <p>\u5b83\u63d0\u4f9b\u4e86\u201casyncio\u201d\u6a21\u5757\u6765\u8fd0\u884c\u534f\u7a0b\u548c\u5f00\u53d1\u5f02\u6b65\u7a0b\u5e8f\u3002</p> <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u66f4\u4ed4\u7ec6\u5730\u4e86\u89e3\u534f\u7a0b\u3002</p> <p>Python provides first-class coroutines with a \u201ccoroutine\u201d type and new expressions like \u201casync def\u201d and \u201cawait\u201c.</p> <p>It provides the \u201casyncio\u201d module for running coroutines and developing asynchronous programs.</p> <p>In this section, we will take a much closer look at coroutines.</p>"},{"location":"asyncio/en/c4/#41-\u4ec0\u4e48\u662f\u534f\u7a0b","title":"4.1 \u4ec0\u4e48\u662f\u534f\u7a0b","text":"<p>4.1 What is a Coroutine</p> \u4e2d\u6587\u82f1\u6587 <p>\u534f\u7a0b\u662f\u4e00\u4e2a\u53ef\u4ee5\u6682\u505c\u548c\u6062\u590d\u7684\u51fd\u6570\u3002</p> <p>\u5b83\u901a\u5e38\u88ab\u5b9a\u4e49\u4e3a\u5e7f\u4e49\u5b50\u4f8b\u7a0b\u3002</p> <p>\u53ef\u4ee5\u6267\u884c\u5b50\u4f8b\u7a0b\uff0c\u4ece\u4e00\u70b9\u5f00\u59cb\u5e76\u5728\u53e6\u4e00\u70b9\u7ed3\u675f\u3002 \u7136\u800c\uff0c\u534f\u7a0b\u53ef\u4ee5\u6267\u884c\u7136\u540e\u6302\u8d77\uff0c\u5e76\u5728\u6700\u7ec8\u7ec8\u6b62\u4e4b\u524d\u6062\u590d\u591a\u6b21\u3002</p> <p>\u5177\u4f53\u6765\u8bf4\uff0c\u534f\u7a0b\u53ef\u4ee5\u63a7\u5236\u4f55\u65f6\u6682\u505c\u6267\u884c\u3002</p> <p>\u8fd9\u53ef\u80fd\u6d89\u53ca\u7279\u5b9a\u8868\u8fbe\u5f0f\u7684\u4f7f\u7528\uff0c\u4f8b\u5982Python\u4e2d\u7684\u201cawait\u201d\u8868\u8fbe\u5f0f\uff0c\u5c31\u50cfPython\u751f\u6210\u5668\u4e2d\u7684yield\u8868\u8fbe\u5f0f\u4e00\u6837\u3002</p> <p>\u534f\u7a0b\u662f\u4e00\u79cd\u53ef\u4ee5\u5728\u6211\u4eec\u6709\u53ef\u80fd\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u4efb\u52a1\u65f6\u6682\u505c\u5e76\u5728\u8be5\u4efb\u52a1\u5b8c\u6210\u65f6\u6062\u590d\u7684\u65b9\u6cd5\u3002 \u5728Python 3.5\u7248\u672c\u4e2d\uff0c\u5f53\u5173\u952e\u5b57async\u548cawait\u88ab\u663e\u5f0f\u6dfb\u52a0\u5230\u8bed\u8a00\u4e2d\u65f6\uff0c\u8be5\u8bed\u8a00\u5b9e\u73b0\u4e86\u5bf9\u534f\u7a0b\u548c\u5f02\u6b65\u7f16\u7a0b\u7684\u4e00\u6d41\u652f\u6301\u3002</p> <p>\u2014 PAGE 3, PYTHON CONCURRENCY WITH ASYNCIO, 2022.</p> <p>\u534f\u7a0b\u53ef\u80fd\u4f1a\u56e0\u591a\u79cd\u539f\u56e0\u800c\u6302\u8d77\uff0c\u4f8b\u5982\u6267\u884c\u53e6\u4e00\u4e2a\u534f\u7a0b\uff0c\u4f8b\u5982 \u7b49\u5f85\u53e6\u4e00\u4e2a\u4efb\u52a1\uff0c\u6216\u8005\u7b49\u5f85\u4e00\u4e9b\u5916\u90e8\u8d44\u6e90\uff0c\u4f8b\u5982\u5957\u63a5\u5b57\u8fde\u63a5\u6216\u8fdb\u7a0b\u8fd4\u56de\u6570\u636e\u3002</p> <p>\u534f\u7a0b\u7528\u4e8e\u5e76\u53d1\u3002</p> <p>\u534f\u7a0b\u8ba9\u60a8\u53ef\u4ee5\u5728 Python \u7a0b\u5e8f\u4e2d\u62e5\u6709\u5927\u91cf\u770b\u4f3c\u540c\u65f6\u5b58\u5728\u7684\u51fd\u6570\u3002</p> <p>\u2014 PAGE 267, EFFECTIVE PYTHON, 2019.</p> <p>\u53ef\u4ee5\u540c\u65f6\u521b\u5efa\u548c\u6267\u884c\u8bb8\u591a\u534f\u7a0b\u3002 \u5b83\u4eec\u53ef\u4ee5\u63a7\u5236\u4f55\u65f6\u6302\u8d77\u548c\u6062\u590d\uff0c\u4ece\u800c\u5141\u8bb8\u5b83\u4eec\u5728\u6267\u884c\u5e76\u53d1\u4efb\u52a1\u65f6\u8fdb\u884c\u5408\u4f5c\u3002</p> <p>\u8fd9\u79f0\u4e3a\u201c\u534f\u4f5c\u591a\u4efb\u52a1\u5904\u7406\u201d(https://en.wikipedia.org/wiki/Cooperative_multitasking)\uff0c\u4e0e\u901a\u5e38\u4e0e\u7ebf\u7a0b\u4e00\u8d77\u4f7f\u7528\u7684\u591a\u4efb\u52a1\u5904\u7406\uff08\u79f0\u4e3a\u62a2\u5360\u5f0f\u591a\u4efb\u52a1\u5904\u7406\uff09\u4e0d\u540c\u3002</p> <p>\u2026 \u4e3a\u4e86\u540c\u65f6\u8fd0\u884c\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff0c\u8fdb\u7a0b\u4f1a\u5b9a\u671f\u6216\u5728\u7a7a\u95f2\u6216\u903b\u8f91\u963b\u585e\u65f6\u81ea\u613f\u653e\u5f03\u63a7\u5236\u6743\u3002 \u8fd9\u79cd\u7c7b\u578b\u7684\u591a\u4efb\u52a1\u5904\u7406\u79f0\u4e3a\u534f\u4f5c\uff0c\u56e0\u4e3a\u6240\u6709\u7a0b\u5e8f\u90fd\u5fc5\u987b\u534f\u4f5c\u624d\u80fd\u4f7f\u8c03\u5ea6\u65b9\u6848\u53d1\u6325\u4f5c\u7528\u3002</p> <p>\u2014 COOPERATIVE MULTITASKING, WIKIPEDIA</p> <p>\u62a2\u5360\u5f0f\u591a\u4efb\u52a1\u5904\u7406\u6d89\u53ca\u64cd\u4f5c\u7cfb\u7edf\u9009\u62e9\u8981\u6302\u8d77\u548c\u6062\u590d\u7684\u7ebf\u7a0b\u4ee5\u53ca\u4f55\u65f6\u6267\u884c\uff0c\u800c\u4e0d\u662f\u5728\u534f\u4f5c\u591a\u4efb\u52a1\u5904\u7406\u7684\u60c5\u51b5\u4e0b\u7531\u4efb\u52a1\u672c\u8eab\u51b3\u5b9a\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86\u4ec0\u4e48\u662f\u534f\u7a0b\uff0c\u8ba9\u6211\u4eec\u901a\u8fc7\u5c06\u5b83\u4eec\u4e0e\u5176\u4ed6\u719f\u6089\u7684\u7f16\u7a0b\u7ed3\u6784\u8fdb\u884c\u6bd4\u8f83\u6765\u52a0\u6df1\u7406\u89e3\u3002</p> <p>A coroutine is a function that can be suspended and resumed.</p> <p>It is often defined as a generalized subroutine.</p> <p>A subroutine can be executed, starting at one point and finishing at another point. Whereas, a coroutine can be executed then suspended, and resumed many times before finally terminating.</p> <p>Specifically, coroutines have control over when exactly they suspend their execution.</p> <p>This may involve the use of a specific expression, such as an \u201cawait\u201d expression in Python, like a yield expression in a Python generator.</p> <p>A coroutine is a method that can be paused when we have a potentially long-running task and then resumed when that task is finished. In Python version 3.5, the language implemented first-class support for coroutines and asynchronous programming when the keywords async and await were explicitly added to the language.</p> <p>\u2014 PAGE 3, PYTHON CONCURRENCY WITH ASYNCIO, 2022.</p> <p>A coroutine may suspend for many reasons, such as executing another coroutine, e.g. awaiting another task, or waiting for some external resources, such as a socket connection or process to return data.</p> <p>Coroutines are used for concurrency.</p> <p>Coroutines let you have a very large number of seemingly simultaneous functions in your Python programs.</p> <p>\u2014 PAGE 267, EFFECTIVE PYTHON, 2019.</p> <p>Many coroutines can be created and executed at the same time. They have control over when they will suspend and resume, allowing them to cooperate as to when concurrent tasks are executed.</p> <p>This is called cooperative multitasking and is different from the multitasking typically used with threads called preemptive multitasking tasking.</p> <p>\u2026 in order to run multiple applications concurrently, processes voluntarily yield control periodically or when idle or logically blocked. This type of multitasking is called cooperative because all programs must cooperate for the scheduling scheme to work.</p> <p>\u2014 COOPERATIVE MULTITASKING, WIKIPEDIA</p> <p>Preemptive multitasking involves the operating system choosing what threads to suspend and resume and when to do so, as opposed to the tasks themselves deciding in the case of cooperative multitasking.</p> <p>Now that we have some idea of what a coroutine is, let\u2019s deepen this understanding by comparing them to other familiar programming constructs.</p>"},{"location":"asyncio/en/c4/#42-\u534f\u7a0b\u4e0e\u4f8b\u7a0b\u548c\u5b50\u4f8b\u7a0b","title":"4.2 \u534f\u7a0b\u4e0e\u4f8b\u7a0b\u548c\u5b50\u4f8b\u7a0b","text":"<p>4.2 Coroutine vs Routine and Subroutine</p> \u4e2d\u6587\u82f1\u6587 <p>\u5728\u73b0\u4ee3\u7f16\u7a0b\u4e2d\uff0c\u201c\u4f8b\u7a0b\u201d\u548c\u201c\u5b50\u4f8b\u7a0b\u201d\u901a\u5e38\u6307\u540c\u4e00\u4e8b\u7269\u3002</p> <p>\u4e5f\u8bb8\u66f4\u6b63\u786e\u7684\u662f\uff0c\u4f8b\u7a0b\u662f\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u800c\u5b50\u4f8b\u7a0b\u662f\u7a0b\u5e8f\u4e2d\u7684\u4e00\u4e2a\u51fd\u6570\u3002</p> <p>\u4f8b\u7a0b\u6709\u5b50\u4f8b\u7a0b\u3002</p> <p>\u5b83\u662f\u4e00\u4e2a\u79bb\u6563\u7684\u8868\u8fbe\u5f0f\u6a21\u5757\uff0c\u88ab\u5206\u914d\u4e86\u4e00\u4e2a\u540d\u79f0\uff0c\u53ef\u4ee5\u63a5\u53d7\u53c2\u6570\u5e76\u4e14\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u503c\u3002</p> <ul> <li>\u5b50\u4f8b\u7a0b(Subroutine): A module of instructions that can be executed on demand, typically named, and may take arguments and return a value. also called a function</li> </ul> <p>\u6267\u884c\u5b50\u4f8b\u7a0b\uff0c\u8fd0\u884c\u8868\u8fbe\u5f0f\uff0c\u7136\u540e\u4ee5\u67d0\u79cd\u65b9\u5f0f\u8fd4\u56de\u3002 \u901a\u5e38\uff0c\u4e00\u4e2a\u5b50\u4f8b\u7a0b\u88ab\u53e6\u4e00\u4e2a\u5b50\u4f8b\u7a0b\u8c03\u7528\u3002</p> <p>\u534f\u7a0b\u662f\u5b50\u7a0b\u5e8f\u7684\u6269\u5c55\u3002 \u8fd9\u610f\u5473\u7740\u5b50\u4f8b\u7a0b\u662f\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684\u534f\u7a0b\u3002</p> <p>\u534f\u7a0b\u5728\u5f88\u591a\u65b9\u9762\u90fd\u7c7b\u4f3c\u4e8e\u5b50\u4f8b\u7a0b\uff0c\u4f8b\u5982\uff1a</p> <ul> <li>\u5b83\u4eec\u90fd\u662f\u79bb\u6563\u7684\u547d\u540d\u8868\u8fbe\u5f0f\u6a21\u5757\u3002</li> <li>\u4ed6\u4eec\u90fd\u53ef\u4ee5\u63a5\u53d7\u4e89\u8bba\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u63a5\u53d7\u4e89\u8bba\u3002</li> <li>\u5b83\u4eec\u90fd\u53ef\u4ee5\u8fd4\u56de\u503c\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u8fd4\u56de\u503c\u3002</li> </ul> <p>\u4e3b\u8981\u533a\u522b\u5728\u4e8e\uff0c\u5b83\u5728\u8fd4\u56de\u548c\u9000\u51fa\u4e4b\u524d\u591a\u6b21\u9009\u62e9\u6682\u505c\u548c\u6062\u590d\u6267\u884c\u3002</p> <p>\u534f\u7a0b\u548c\u5b50\u4f8b\u7a0b\u90fd\u53ef\u4ee5\u8c03\u7528\u5b83\u4eec\u81ea\u5df1\u7684\u5176\u4ed6\u793a\u4f8b\u3002 \u4e00\u4e2a\u5b50\u7a0b\u5e8f\u53ef\u4ee5\u8c03\u7528\u5176\u4ed6\u5b50\u7a0b\u5e8f\u3002 \u534f\u7a0b\u6267\u884c\u5176\u4ed6\u534f\u7a0b\u3002 \u7136\u800c\uff0c\u534f\u7a0b\u4e5f\u53ef\u4ee5\u6267\u884c\u5176\u4ed6\u5b50\u4f8b\u7a0b\u3002</p> <p>\u5f53\u4e00\u4e2a\u534f\u7a0b\u6267\u884c\u53e6\u4e00\u4e2a\u534f\u7a0b\u65f6\uff0c\u5b83\u5fc5\u987b\u6682\u505c\u6267\u884c\uff0c\u5e76\u5728\u53e6\u4e00\u4e2a\u534f\u7a0b\u5b8c\u6210\u540e\u5141\u8bb8\u53e6\u4e00\u4e2a\u534f\u7a0b\u6062\u590d\u3002</p> <p>\u8fd9\u5c31\u50cf\u4e00\u4e2a\u5b50\u4f8b\u7a0b\u8c03\u7528\u53e6\u4e00\u4e2a\u5b50\u4f8b\u7a0b\u3002 \u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u534f\u7a0b\u7684\u6302\u8d77\u53ef\u80fd\u5141\u8bb8\u4efb\u610f\u6570\u91cf\u7684\u5176\u4ed6\u534f\u7a0b\u8fd0\u884c\u3002</p> <p>\u8fd9\u4f7f\u5f97\u8c03\u7528\u53e6\u4e00\u4e2a\u534f\u7a0b\u7684\u534f\u7a0b\u6bd4\u8c03\u7528\u53e6\u4e00\u4e2a\u5b50\u4f8b\u7a0b\u7684\u5b50\u4f8b\u7a0b\u66f4\u5f3a\u5927\u3002 \u5b83\u662f\u534f\u7a0b\u4fc3\u8fdb\u7684\u534f\u4f5c\u591a\u4efb\u52a1\u5904\u7406\u7684\u6838\u5fc3\u3002</p> <p>A \u201croutine\u201d and \u201csubroutine\u201d often refer to the same thing in modern programming.</p> <p>Perhaps more correctly, a routine is a program, whereas a subroutine is a function in the program.</p> <p>A routine has subroutines.</p> <p>It is a discrete module of expressions that is assigned a name, may take arguments and may return a value.</p> <ul> <li>Subroutine: A module of instructions that can be executed on demand, typically named, and may take arguments and return a value. also called a function</li> </ul> <p>A subroutine is executed, runs through the expressions, and returns somehow. Typically, a subroutine is called by another subroutine.</p> <p>A coroutine is an extension of a subroutine. This means that a subroutine is a special type of a coroutine.</p> <p>A coroutine is like a subroutine in many ways, such as:</p> <ul> <li>They both are discrete named modules of expressions.</li> <li>They both can take arguments, or not.</li> <li>They both can return a value, or not.</li> </ul> <p>The main difference is that it chooses to suspend and resume its execution many times before returning and exiting.</p> <p>Both coroutines and subroutines can call other examples of themselves. A subroutine can call other subroutines. A coroutine executes other coroutines. However, a coroutine can also execute other subroutines.</p> <p>When a coroutine executes another coroutine, it must suspend its execution and allow the other coroutine to resume once the other coroutine has completed.</p> <p>This is like a subroutine calling another subroutine. The difference is the suspension of the coroutine may allow any number of other coroutines to run as well.</p> <p>This makes a coroutine calling another coroutine more powerful than a subroutine calling another subroutine. It is central to the cooperating multitasking facilitated by coroutines.</p>"},{"location":"asyncio/en/c4/#43-\u534f\u7a0b\u4e0e\u751f\u6210\u5668","title":"4.3 \u534f\u7a0b\u4e0e\u751f\u6210\u5668","text":"<p>4.3 Coroutine vs Generator</p> \u4e2d\u6587\u82f1\u6587 <p>\u751f\u6210\u5668\u662f\u4e00\u4e2a\u53ef\u4ee5\u6682\u505c\u5176\u6267\u884c\u7684\u7279\u6b8a\u51fd\u6570\u3002</p> <p>generator: \u8fd4\u56de\u751f\u6210\u5668\u8fed\u4ee3\u5668\u7684\u51fd\u6570\u3002 \u5b83\u770b\u8d77\u6765\u50cf\u4e00\u4e2a\u666e\u901a\u51fd\u6570\uff0c\u53ea\u4e0d\u8fc7\u5b83\u5305\u542b\u7528\u4e8e\u751f\u6210\u4e00\u7cfb\u5217\u53ef\u5728 for \u5faa\u73af\u4e2d\u4f7f\u7528\u7684\u503c\u7684yield \u8868\u8fbe\u5f0f\uff0c\u6216\u8005\u53ef\u4ee5\u4f7f\u7528 next() \u51fd\u6570\u4e00\u6b21\u68c0\u7d22\u4e00\u4e2a\u503c\u3002</p> <p>\u2014 PYTHON GLOSSARY</p> <p>\u751f\u6210\u5668\u51fd\u6570\u53ef\u4ee5\u50cf\u666e\u901a\u51fd\u6570\u4e00\u6837\u5b9a\u4e49\uff0c\u5c3d\u7ba1\u5b83\u5728\u6682\u505c\u6267\u884c\u5e76\u8fd4\u56de\u503c\u65f6\u4f7f\u7528\u4e86yield \u8868\u8fbe\u5f0f\u3002</p> <p>\u751f\u6210\u5668\u51fd\u6570\u5c06\u8fd4\u56de\u4e00\u4e2a\u53ef\u4ee5\u904d\u5386\u7684\u751f\u6210\u5668\u8fed\u4ee3\u5668\u5bf9\u8c61\uff0c\u4f8b\u5982\u901a\u8fc7 for \u5faa\u73af\u3002 \u6bcf\u6b21\u6267\u884c\u751f\u6210\u5668\u65f6\uff0c\u5b83\u90fd\u4f1a\u4ece\u6700\u540e\u4e00\u4e2a\u6682\u505c\u70b9\u8fd0\u884c\u5230\u4e0b\u4e00\u4e2ayield \u8bed\u53e5\u3002</p> <p>generator iterator: \u7531\u751f\u6210\u5668\u51fd\u6570\u521b\u5efa\u7684\u5bf9\u8c61\u3002 \u6bcf\u4e2ayield\u90fd\u4f1a\u6682\u65f6\u6302\u8d77\u5904\u7406\uff0c\u8bb0\u4f4f\u4f4d\u7f6e\u6267\u884c\u72b6\u6001\uff08\u5305\u62ec\u5c40\u90e8\u53d8\u91cf\u548c\u6302\u8d77\u7684try\u8bed\u53e5\uff09\u3002 \u5f53\u751f\u6210\u5668\u8fed\u4ee3\u5668\u6062\u590d\u65f6\uff0c\u5b83\u4f1a\u4ece\u4e0a\u6b21\u505c\u6b62\u7684\u5730\u65b9\u7ee7\u7eed\uff08\u4e0e\u6bcf\u6b21\u8c03\u7528\u65f6\u91cd\u65b0\u5f00\u59cb\u7684\u51fd\u6570\u76f8\u53cd\uff09\u3002</p> <p>\u2014 PYTHON GLOSSARY</p> <p>\u534f\u7a0b\u53ef\u4ee5\u4f7f\u7528 \u201cawait\u201d \u8868\u8fbe\u5f0f\u6302\u8d77\u6216\u5c48\u670d\u4e8e\u53e6\u4e00\u4e2a\u534f\u7a0b\u3002 \u4e00\u65e6\u7b49\u5f85\u7684\u534f\u7a0b\u5b8c\u6210\uff0c\u5b83\u5c06\u4ece\u6b64\u65f6\u5f00\u59cb\u6062\u590d\u3002</p> <p>\u4f7f\u7528\u8fd9\u79cd\u8303\u4f8b\uff0cawait \u8bed\u53e5\u5728\u529f\u80fd\u4e0a\u7c7b\u4f3c\u4e8eyield \u8bed\u53e5\uff1b \u5f53\u5176\u4ed6\u4ee3\u7801\u8fd0\u884c\u65f6\uff0c\u5f53\u524d\u51fd\u6570\u7684\u6267\u884c\u4f1a\u6682\u505c\u3002 \u4e00\u65e6 await \u6216 yield \u89e3\u6790\u51fa\u6570\u636e\uff0c\u8be5\u51fd\u6570\u5c31\u4f1a\u6062\u590d\u3002</p> <p>\u2014 PAGE 218, HIGH PERFORMANCE PYTHON, 2020.</p> <p>\u6211\u4eec\u53ef\u4ee5\u5c06\u751f\u6210\u5668\u89c6\u4e3a\u5faa\u73af\u4e2d\u4f7f\u7528\u7684\u7279\u6b8a\u7c7b\u578b\u7684\u534f\u7a0b\u548c\u534f\u4f5c\u591a\u4efb\u52a1\u5904\u7406\u3002</p> <p>\u751f\u6210\u5668\uff0c\u4e5f\u79f0\u4e3a\u534a\u534f\u7a0b\uff0c\u662f\u534f\u7a0b\u7684\u5b50\u96c6\u3002</p> <p>\u2014 COROUTINE, WIKIPEDIA.</p> <p>\u5728\u5f00\u53d1\u534f\u7a0b\u4e4b\u524d\uff0c\u751f\u6210\u5668\u5df2\u88ab\u6269\u5c55\uff0c\u4ee5\u4fbf\u5b83\u4eec\u53ef\u4ee5\u50cf Python \u7a0b\u5e8f\u4e2d\u7684\u534f\u7a0b\u4e00\u6837\u4f7f\u7528\u3002</p> <p>\u8fd9\u9700\u8981\u5927\u91cf\u7684\u751f\u6210\u5668\u6280\u672f\u77e5\u8bc6\u548c\u81ea\u5b9a\u4e49\u4efb\u52a1\u8c03\u5ea6\u7a0b\u5e8f\u7684\u5f00\u53d1\u3002</p> <p>\u8981\u4f7f\u7528\u751f\u6210\u5668\u5b9e\u73b0\u60a8\u81ea\u5df1\u7684\u5e76\u53d1\uff0c\u60a8\u9996\u5148\u9700\u8981\u5bf9\u751f\u6210\u5668\u51fd\u6570\u548cyield \u8bed\u53e5\u6709\u57fa\u672c\u7684\u4e86\u89e3\u3002 \u5177\u4f53\u6765\u8bf4\uff0cyield \u7684\u57fa\u672c\u884c\u4e3a\u662f\u5b83\u5bfc\u81f4\u751f\u6210\u5668\u6682\u505c\u5176\u6267\u884c\u3002 \u901a\u8fc7\u6682\u505c\u6267\u884c\uff0c\u53ef\u4ee5\u7f16\u5199\u4e00\u4e2a\u8c03\u5ea6\u7a0b\u5e8f\uff0c\u5c06\u751f\u6210\u5668\u89c6\u4e3a\u4e00\u79cd\u201c\u4efb\u52a1\u201d\uff0c\u5e76\u4f7f\u7528\u4e00\u79cd\u534f\u4f5c\u4efb\u52a1\u5207\u6362\u6765\u4ea4\u66ff\u6267\u884c\u5b83\u4eec\u3002</p> <p>\u2014 PAGE 524, PYTHON COOKBOOK, 2013.</p> <p>\u8fd9\u662f\u901a\u8fc7\u5bf9\u751f\u6210\u5668\u7684\u66f4\u6539\u548c\u5f15\u5165 \u201cyield from\u201d \u8868\u8fbe\u5f0f\u5b9e\u73b0\u7684\u3002</p> <p>\u8fd9\u4e9b\u540e\u6765\u88ab\u5f03\u7528\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u73b0\u4ee3\u7684 async/await \u8868\u8fbe\u5f0f\u3002</p> <p>A generator is a special function that can suspend its execution.</p> <p>generator: A function which returns a generator iterator. It looks like a normal function except that it contains yield expressions for producing a series of values usable in a for-loop or that can be retrieved one at a time with the next() function.</p> <p>\u2014 PYTHON GLOSSARY</p> <p>A generator function can be defined like a normal function although it uses a yield expression at the point it will suspend its execution and return a value.</p> <p>A generator function will return a generator iterator object that can be traversed, such as via a for-loop. Each time the generator is executed, it runs from the last point it was suspended to the next yield statement.</p> <p>generator iterator: An object created by a generator function. Each yield temporarily suspends processing, remembering the location execution state (including local variables and pending try-statements). When the generator iterator resumes, it picks up where it left off (in contrast to functions which start fresh on every invocation).</p> <p>\u2014 PYTHON GLOSSARY</p> <p>A coroutine can suspend or yield to another coroutine using an \u201cawait\u201d expression. It will then resume from this point once the awaited coroutine has been completed.</p> <p>Using this paradigm, an await statement is similar in function to a yield statement; the execution of the current function gets paused while other code is run. Once the await or yield resolves with data, the function is resumed.</p> <p>\u2014 PAGE 218, HIGH PERFORMANCE PYTHON, 2020.</p> <p>We might think of a generator as a special type of coroutine and cooperative multitasking used in loops.</p> <p>Generators, also known as semicoroutines, are a subset of coroutines.</p> <p>\u2014 COROUTINE, WIKIPEDIA.</p> <p>Before coroutines were developed, generators were extended so that they might be used like coroutines in Python programs.</p> <p>This required a lot of technical knowledge of generators and the development of custom task schedulers.</p> <p>To implement your own concurrency using generators, you first need a fundamental insight concerning generator functions and the yield statement. Specifically, the fundamental behavior of yield is that it causes a generator to suspend its execution. By suspending execution, it is possible to write a scheduler that treats generators as a kind of \u201ctask\u201d and alternates their execution using a kind of cooperative task switching.</p> <p>\u2014 PAGE 524, PYTHON COOKBOOK, 2013.</p> <p>This was made possible via changes to the generators and the introduction of the \u201cyield from\u201d expression.</p> <p>These were later deprecated in favor of the modern async/await expressions.</p>"},{"location":"asyncio/en/c4/#44-\u534f\u7a0b\u4e0e\u4efb\u52a1","title":"4.4 \u534f\u7a0b\u4e0e\u4efb\u52a1","text":"<p>4.4 Coroutine vs Task</p> \u4e2d\u6587\u82f1\u6587 <p>\u5b50\u4f8b\u7a0b\u548c\u534f\u7a0b\u53ef\u4ee5\u4ee3\u8868\u7a0b\u5e8f\u4e2d\u7684\u201c\u4efb\u52a1\u201d\u3002</p> <p>\u4f46\u662f\uff0c\u5728 Python \u4e2d\uff0c\u6709\u4e00\u4e2a\u79f0\u4e3a asyncio.Task \u5bf9\u8c61\u7684\u7279\u5b9a\u5bf9\u8c61\u3002</p> <p>\u8fd0\u884c Python \u534f\u7a0b\u7684\u7c7b\u4f3c Future \u7684\u5bf9\u8c61\u3002 [...] \u4efb\u52a1\u7528\u4e8e\u5728\u4e8b\u4ef6\u5faa\u73af\u4e2d\u8fd0\u884c\u534f\u7a0b\u3002</p> <p>\u2014 ASYNCIO TASK OBJECT</p> <p>\u534f\u7a0b\u53ef\u4ee5\u5305\u88c5\u5728 asyncio.Task \u5bf9\u8c61\u4e2d\u5e76\u72ec\u7acb\u6267\u884c\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5728\u534f\u7a0b\u5185\u6267\u884c\u3002 Task \u5bf9\u8c61\u63d0\u4f9b\u5f02\u6b65\u6267\u884c\u534f\u7a0b\u7684\u53e5\u67c4\u3002</p> <ul> <li>Task: \u53ef\u4ee5\u72ec\u7acb\u6267\u884c\u7684\u5305\u88c5\u534f\u7a0b\u3002</li> </ul> <p>\u8fd9\u5141\u8bb8\u5305\u88c5\u7684\u534f\u7a0b\u5728\u540e\u53f0\u6267\u884c\u3002 \u8c03\u7528\u534f\u7a0b\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\u6307\u4ee4\uff0c\u800c\u4e0d\u662f\u7b49\u5f85\u53e6\u4e00\u4e2a\u534f\u7a0b\u3002</p> <p>\u4efb\u52a1\u4e0d\u80fd\u5355\u72ec\u5b58\u5728\uff0c\u5b83\u5fc5\u987b\u5305\u88c5\u4e00\u4e2a\u534f\u7a0b\u3002</p> <p>\u56e0\u6b64\uff0c\u4efb\u52a1\u662f\u534f\u7a0b\uff0c\u4f46\u534f\u7a0b\u4e0d\u662f\u4efb\u52a1\u3002</p> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173 asyncio.Task \u5bf9\u8c61\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <p>A subroutine and a coroutine may represent a \u201ctask\u201d in a program.</p> <p>However, in Python, there is a specific object called an asyncio.Task object.</p> <p>A Future-like object that runs a Python coroutine. [\u2026] Tasks are used to run coroutines in event loops.</p> <p>\u2014 ASYNCIO TASK OBJECT</p> <p>A coroutine can be wrapped in an asyncio.Task object and executed independently, as opposed to being executed directly within a coroutine. The Task object provides a handle on the asynchronously execute coroutine.</p> <ul> <li>Task: A wrapped coroutine that can be executed independently.</li> </ul> <p>This allows the wrapped coroutine to execute in the background. The calling coroutine can continue executing instructions rather than awaiting another coroutine.</p> <p>A Task cannot exist on its own, it must wrap a coroutine.</p> <p>Therefore a Task is a coroutine, but a coroutine is not a task.</p> <p>You can learn more about asyncio.Task objects in the tutorial:</p>"},{"location":"asyncio/en/c4/#45-\u534f\u7a0b\u4e0e\u7ebf\u7a0b","title":"4.5 \u534f\u7a0b\u4e0e\u7ebf\u7a0b","text":"<p>4.5 Coroutine vs Thread</p> \u4e2d\u6587\u82f1\u6587 <p>\u534f\u7a0b\u6bd4\u7ebf\u7a0b\u66f4\u8f7b\u91cf\u3002</p> <ul> <li>Thread: \u4e0e\u534f\u7a0b\u76f8\u6bd4\u91cd\u91cf\u7ea7</li> <li>Coroutine: \u4e0e\u7ebf\u7a0b\u76f8\u6bd4\u8f7b\u91cf\u7ea7\u3002</li> </ul> <p>\u534f\u7a0b\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u51fd\u6570\u3002</p> <p>\u7ebf\u7a0b\u662f\u7531\u5e95\u5c42\u64cd\u4f5c\u7cfb\u7edf\u521b\u5efa\u548c\u7ba1\u7406\u7684\u5bf9\u8c61\uff0c\u5728 Python \u4e2d\u8868\u793a\u4e3a threading.Thread \u5bf9\u8c61\u3002</p> <ul> <li>Thread: \u7531\u64cd\u4f5c\u7cfb\u7edf\u7ba1\u7406\uff0c\u7531Python\u5bf9\u8c61\u8868\u793a\u3002</li> </ul> <p>\u8fd9\u610f\u5473\u7740\u534f\u7a0b\u7684\u521b\u5efa\u548c\u5f00\u59cb\u6267\u884c\u901f\u5ea6\u901a\u5e38\u66f4\u5feb\uff0c\u5e76\u4e14\u5360\u7528\u7684\u5185\u5b58\u66f4\u5c11\u3002 \u76f8\u53cd\uff0c\u7ebf\u7a0b\u7684\u521b\u5efa\u548c\u542f\u52a8\u901f\u5ea6\u6bd4\u534f\u7a0b\u6162\uff0c\u5e76\u4e14\u5360\u7528\u66f4\u591a\u5185\u5b58\u3002</p> <p>\u542f\u52a8\u534f\u7a0b\u7684\u6210\u672c\u662f\u51fd\u6570\u8c03\u7528\u3002 \u4e00\u65e6\u534f\u7a0b\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\uff0c\u5b83\u5c31\u4f1a\u4f7f\u7528\u4e0d\u5230 1 KB \u7684\u5185\u5b58\uff0c\u76f4\u5230\u8017\u5c3d\u4e3a\u6b62\u3002</p> <p>\u2014 PAGE 267, EFFECTIVE PYTHON, 2019.</p> <p>\u534f\u7a0b\u5728\u4e00\u4e2a\u7ebf\u7a0b\u5185\u6267\u884c\uff0c\u56e0\u6b64\u5355\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u6267\u884c\u591a\u4e2a\u534f\u7a0b\u3002</p> <p>\u8bb8\u591a\u5355\u72ec\u7684\u5f02\u6b65\u51fd\u6570\u4f3c\u4e4e\u90fd\u662f\u540c\u65f6\u8fd0\u884c\u7684\uff0c\u6a21\u4eff\u4e86 Python \u7ebf\u7a0b\u7684\u5e76\u53d1\u884c\u4e3a\u3002 \u7136\u800c\uff0c\u534f\u7a0b\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u65e0\u9700\u5185\u5b58\u5f00\u9500\u3001\u542f\u52a8\u548c\u4e0a\u4e0b\u6587\u5207\u6362\u6210\u672c\uff0c\u4e5f\u65e0\u9700\u7ebf\u7a0b\u6240\u9700\u7684\u590d\u6742\u9501\u5b9a\u548c\u540c\u6b65\u4ee3\u7801\u3002</p> <p>\u2014 PAGE 267, EFFECTIVE PYTHON, 2019.</p> <p>\u60a8\u53ef\u4ee5\u5728\u6307\u5357\u4e2d\u4e86\u89e3\u6709\u5173\u7ebf\u7a0b\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>Python Threading: \u5b8c\u6574\u6307\u5357</li> </ul> <p>A coroutine is more lightweight than a thread.</p> <ul> <li>Thread: heavyweight compared to a coroutine</li> <li>Coroutine: lightweight compared to a thread.</li> </ul> <p>A coroutine is defined as a function.</p> <p>A thread is an object created and managed by the underlying operating system and represented in Python as a threading.Thread object.</p> <ul> <li>Thread: Managed by the operating system, represented by a Python object.</li> </ul> <p>This means that coroutines are typically faster to create and start executing and take up less memory. Conversely, threads are slower than coroutines to create and start and take up more memory.</p> <p>The cost of starting a coroutine is a function call. Once a coroutine is active, it uses less than 1 KB of memory until it\u2019s exhausted.</p> <p>\u2014 PAGE 267, EFFECTIVE PYTHON, 2019.</p> <p>Coroutines execute within one thread, therefore a single thread may execute many coroutines.</p> <p>Many separate async functions advanced in lockstep all seem to run simultaneously, mimicking the concurrent behavior of Python threads. However, coroutines do this without the memory overhead, startup and context switching costs, or complex locking and synchronization code that\u2019s required for threads.</p> <p>\u2014 PAGE 267, EFFECTIVE PYTHON, 2019.</p> <p>You can learn more about threads in the guide:</p> <ul> <li>Python Threading: The Complete Guide</li> </ul>"},{"location":"asyncio/en/c4/#46-\u534f\u7a0b\u4e0e\u8fdb\u7a0b","title":"4.6 \u534f\u7a0b\u4e0e\u8fdb\u7a0b","text":"<p>4.6 Coroutine vs Process</p> \u4e2d\u6587\u82f1\u6587 <p>\u534f\u7a0b\u6bd4\u8fdb\u7a0b\u66f4\u8f7b\u91cf\u3002</p> <p>\u4e8b\u5b9e\u4e0a\uff0c\u7ebf\u7a0b\u6bd4\u8fdb\u7a0b\u66f4\u8f7b\u91cf\u3002</p> <p>\u8fdb\u7a0b\u662f\u4e00\u4e2a\u8ba1\u7b97\u673a\u7a0b\u5e8f\u3002 \u5b83\u53ef\u80fd\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u7ebf\u7a0b\u3002</p> <p>Python \u8fdb\u7a0b\u5b9e\u9645\u4e0a\u662f Python \u89e3\u91ca\u5668\u7684\u4e00\u4e2a\u5355\u72ec\u5b9e\u4f8b\u3002</p> <p>\u8fdb\u7a0b\u4e0e\u7ebf\u7a0b\u4e00\u6837\uff0c\u7531\u5e95\u5c42\u64cd\u4f5c\u7cfb\u7edf\u521b\u5efa\u548c\u7ba1\u7406\uff0c\u5e76\u7531 multiprocessing.Process \u5bf9\u8c61\u8868\u793a\u3002</p> <ul> <li>Process: \u7531\u64cd\u4f5c\u7cfb\u7edf\u7ba1\u7406\uff0c\u7531Python\u5bf9\u8c61\u8868\u793a\u3002</li> </ul> <p>\u8fd9\u610f\u5473\u7740\u534f\u7a0b\u7684\u521b\u5efa\u548c\u542f\u52a8\u901f\u5ea6\u660e\u663e\u5feb\u4e8e\u8fdb\u7a0b\uff0c\u5e76\u4e14\u5360\u7528\u7684\u5185\u5b58\u4e5f\u5c11\u5f97\u591a\u3002</p> <p>\u534f\u7a0b\u53ea\u662f\u4e00\u79cd\u7279\u6b8a\u51fd\u6570\uff0c\u800c\u8fdb\u7a0b\u662f\u81f3\u5c11\u5177\u6709\u4e00\u4e2a\u7ebf\u7a0b\u7684\u89e3\u91ca\u5668\u7684\u5b9e\u4f8b\u3002</p> <p>\u60a8\u53ef\u4ee5\u5728\u6307\u5357\u4e2d\u4e86\u89e3\u6709\u5173 Python \u8fdb\u7a0b\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>Python Multiprocessing: \u5b8c\u6574\u6307\u5357</li> </ul> <p>A coroutine is more lightweight than a process.</p> <p>In fact, a thread is more lightweight than a process.</p> <p>A process is a computer program. It may have one or many threads.</p> <p>A Python process is in fact a separate instance of the Python interpreter.</p> <p>Processes, like threads, are created and managed by the underlying operating system and are represented by a multiprocessing.Process object.</p> <ul> <li>Process: Managed by the operating system, represented by a Python object.</li> </ul> <p>This means that coroutines are significantly faster than a process to create and start and take up much less memory.</p> <p>A coroutine is just a special function, whereas a Process is an instance of the interpreter that has at least one thread.</p> <p>You can learn more about Python processes in the guide:</p> <ul> <li>Python Multiprocessing: The Complete Guide</li> </ul>"},{"location":"asyncio/en/c4/#47-python-\u4f55\u65f6\u6dfb\u52a0\u4e86\u534f\u7a0b","title":"4.7 Python \u4f55\u65f6\u6dfb\u52a0\u4e86\u534f\u7a0b","text":"<p>4.7 When Were Coroutines Added to Python</p> \u4e2d\u6587\u82f1\u6587 <p>\u534f\u7a0b\u6269\u5c55\u4e86 Python \u4e2d\u7684\u751f\u6210\u5668\u3002</p> <p>\u957f\u671f\u4ee5\u6765\uff0c\u751f\u6210\u5668\u4e00\u76f4\u5728\u6162\u6162\u5730\u671d\u7740\u6210\u4e3a\u4e00\u6d41\u534f\u7a0b\u7684\u65b9\u5411\u53d1\u5c55\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u63a2\u7d22 Python \u7684\u4e00\u4e9b\u4e3b\u8981\u53d8\u5316\u6765\u6dfb\u52a0\u534f\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a asyncio \u6982\u7387\u6dfb\u52a0\u7684\u5b50\u96c6\u3002</p> <p>\u50cf send() \u548c close() \u8fd9\u6837\u7684\u65b0\u65b9\u6cd5\u88ab\u6dfb\u52a0\u5230\u751f\u6210\u5668\u5bf9\u8c61\u4e2d\uff0c\u4ee5\u5141\u8bb8\u5b83\u4eec\u66f4\u50cf\u534f\u7a0b\u3002</p> <p>\u8fd9\u4e9b\u662f\u5728 Python 2.5 \u4e2d\u6dfb\u52a0\u7684\uff0c\u5e76\u5728 PEP 342 \u4e2d\u8fdb\u884c\u4e86\u63cf\u8ff0.</p> <p>\u6b64 PEP \u5bf9\u751f\u6210\u5668\u7684 API \u548c\u8bed\u6cd5\u63d0\u51fa\u4e86\u4e00\u4e9b\u589e\u5f3a\uff0c\u4f7f\u5b83\u4eec\u53ef\u4ee5\u7528\u4f5c\u7b80\u5355\u7684\u534f\u7a0b\u3002</p> <p>\u2014 PEP 342 \u2013 COROUTINES VIA ENHANCED GENERATORS</p> <p>\u968f\u540e\uff0c\u5141\u8bb8\u751f\u6210\u5668\u53d1\u51faPEP 334\u4e2d\u63cf\u8ff0\u7684\u6682\u505c\u5f02\u5e38\u548c\u505c\u6b62\u5f02\u5e38.</p> <p>\u8be5 PEP \u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u8fed\u4ee3\u5668\u534f\u8bae\u6269\u5c55\u7684\u6709\u9650\u534f\u7a0b\u65b9\u6cd5\u3002 \u76ee\u524d\uff0c\u8fed\u4ee3\u5668\u53ef\u80fd\u4f1a\u5f15\u53d1 StopIteration \u5f02\u5e38\u6765\u6307\u793a\u5b83\u5df2\u5b8c\u6210\u751f\u6210\u503c\u3002 \u8be5\u63d0\u6848\u4e3a\u6b64\u534f\u8bae\u6dfb\u52a0\u4e86\u53e6\u4e00\u4e2a\u4f8b\u5916\uff0cSuspendIteration\uff0c\u5b83\u8868\u660e\u7ed9\u5b9a\u7684\u8fed\u4ee3\u5668\u53ef\u80fd\u6709\u66f4\u591a\u7684\u503c\u8981\u751f\u6210\uff0c\u4f46\u76ee\u524d\u65e0\u6cd5\u8fd9\u6837\u505a\u3002</p> <p>\u2014 PEP 334 \u2013 SIMPLE COROUTINES VIA SUSPENDITERATION</p> <p>\u901a\u8fc7 asyncio \u6a21\u5757\u5728 Python \u4e2d\u4f7f\u7528\u73b0\u4ee3\u534f\u7a0b\u7684\u7edd\u5927\u591a\u6570\u529f\u80fd\u5728 PEP 3156 \u4e2d\u8fdb\u884c\u4e86\u63cf\u8ff0\uff0c\u5e76\u5728 Python 3.3 \u4e2d\u6dfb\u52a0\u3002</p> <p>\u8fd9\u662f\u4ece Python 3.3 \u5f00\u59cb\u7684 Python 3 \u4e2d\u5f02\u6b65 I/O \u7684\u63d0\u6848\u3002 \u8003\u8651\u4e00\u4e0b PEP 3153 \u4e2d\u7f3a\u5c11\u7684\u5177\u4f53\u63d0\u6848\u3002\u8be5\u63d0\u6848\u5305\u62ec\u53ef\u63d2\u5165\u4e8b\u4ef6\u5faa\u73af\u3001\u7c7b\u4f3c\u4e8e Twisted \u4e2d\u7684\u4f20\u8f93\u548c\u534f\u8bae\u62bd\u8c61\uff0c\u4ee5\u53ca\u57fa\u4e8e (PEP 380) \u4ea7\u91cf\u7684\u66f4\u9ad8\u7ea7\u522b\u8c03\u5ea6\u7a0b\u5e8f\u3002 \u5efa\u8bae\u7684\u5305\u540d\u79f0\u662f asyncio\u3002</p> <p>\u2014 PEP 3156 \u2013 ASYNCHRONOUS IO SUPPORT REBOOTED: THE \u201cASYNCIO\u201d MODULE</p> <p>\u57fa\u4e8e\u751f\u6210\u5668\u7684\u7b2c\u4e8c\u79cd\u534f\u7a0b\u65b9\u6cd5\u5df2\u6dfb\u52a0\u5230 Python 3.4 \u4f5c\u4e3a Python \u751f\u6210\u5668\u7684\u6269\u5c55\u3002</p> <p>\u534f\u7a0b\u88ab\u5b9a\u4e49\u4e3a\u4f7f\u7528 @asyncio.coroutine \u88c5\u9970\u5668\u7684\u51fd\u6570\u3002</p> <p>\u534f\u7a0b\u662f\u901a\u8fc7 asyncio \u6a21\u5757\u4f7f\u7528 asyncio \u4e8b\u4ef6\u5faa\u73af\u6267\u884c\u7684\u3002</p> <p>\u534f\u7a0b\u53ef\u4ee5\u901a\u8fc7 \u201cyield from\u201d \u8868\u8fbe\u5f0f\u6302\u8d77\u5e76\u6267\u884c\u53e6\u4e00\u4e2a\u534f\u7a0b</p> <p>\u4f8b\u5982\uff1a</p> <pre><code># \u5728 Python 3.4 \u4e2d\u5b9a\u4e49\u81ea\u5b9a\u4e49\u534f\u7a0b\n@asyncio.coroutine\ndef custom_coro():\n    # \u6302\u8d77\u5e76\u6267\u884c\u53e6\u4e00\u4e2a\u534f\u7a0b\n    yield from asyncio.sleep(1)\n</code></pre> <p>\u201cyield from\u201d \u8868\u8fbe\u5f0f\u5728 PEP 380 \u4e2d\u5b9a\u4e49\u3002</p> <p>\u4e3a\u751f\u6210\u5668\u63d0\u51fa\u4e86\u4e00\u79cd\u8bed\u6cd5\uff0c\u5c06\u5176\u90e8\u5206\u64cd\u4f5c\u59d4\u6258\u7ed9\u53e6\u4e00\u4e2a\u751f\u6210\u5668\u3002 \u8fd9\u5141\u8bb8\u5c06\u5305\u542b\u201cyield\u201d\u7684\u4ee3\u7801\u90e8\u5206\u5206\u89e3\u51fa\u6765\u5e76\u653e\u7f6e\u5728\u53e6\u4e00\u4e2a\u751f\u6210\u5668\u4e2d\u3002</p> <p>\u2014 PEP 380 \u2013 SYNTAX FOR DELEGATING TO A SUBGENERATOR</p> <p>\u201cyield from\u201d \u8868\u8fbe\u5f0f\u4ecd\u7136\u53ef\u5728\u751f\u6210\u5668\u4e2d\u4f7f\u7528\uff0c\u5c3d\u7ba1\u5b83\u662f\u4e00\u79cd\u5df2\u5f03\u7528\u7684\u5728\u534f\u7a0b\u4e2d\u6682\u505c\u6267\u884c\u7684\u65b9\u6cd5\uff0c\u6709\u5229\u4e8e \u201cawait\u201d \u8868\u8fbe\u5f0f\u3002</p> <p>\u6ce8\u610f\uff1a\u5bf9\u57fa\u4e8e\u751f\u6210\u5668\u7684\u534f\u7a0b\u7684\u652f\u6301\u5df2\u88ab\u5f03\u7528\u5e76\u5728 Python 3.11 \u4e2d\u5220\u9664\u3002 \u57fa\u4e8e\u751f\u6210\u5668\u7684\u534f\u7a0b\u65e9\u4e8e async/await \u8bed\u6cd5\u3002 \u5b83\u4eec\u662fPython\u751f\u6210\u5668\uff0c\u4f7f\u7528yield from\u8868\u8fbe\u5f0f\u6765\u7b49\u5f85Futures\u548c\u5176\u4ed6\u534f\u7a0b\u3002</p> <p>\u2014 ASYNCIO COROUTINES AND TASKS</p> <p>\u6211\u4eec\u53ef\u4ee5\u8bf4\u534f\u7a0b\u662f\u5728 3.5 \u7248\u672c\u4e2d\u4f5c\u4e3a\u4e00\u6d41\u5bf9\u8c61\u6dfb\u52a0\u5230 Python \u4e2d\u7684\u3002</p> <p>\u8fd9\u5305\u62ec\u5bf9 Python \u8bed\u8a00\u7684\u66f4\u6539\uff0c\u4f8b\u5982 \u201casync def\u201d\u3001\u201cawait\u201d\u3001\u201casync with\u201d \u548c \u201casync for\u201d \u8868\u8fbe\u5f0f \u4f5c\u4e3a\u534f\u7a0b\u7c7b\u578b\u3002</p> <p>\u8fd9\u4e9b\u66f4\u6539\u5728 PEP 492 \u4e2d\u8fdb\u884c\u4e86\u63cf\u8ff0\u3002</p> <p>\u5efa\u8bae\u4f7f\u534f\u7a0b\u6210\u4e3aPython\u4e2d\u4e00\u4e2a\u9002\u5f53\u7684\u72ec\u7acb\u6982\u5ff5\uff0c\u5e76\u5f15\u5165\u65b0\u7684\u652f\u6301\u8bed\u6cd5\u3002 \u6700\u7ec8\u76ee\u6807\u662f\u5e2e\u52a9\u5728 Python \u4e2d\u5efa\u7acb\u4e00\u4e2a\u901a\u7528\u7684\u3001\u6613\u4e8e\u7406\u89e3\u7684\u5f02\u6b65\u7f16\u7a0b\u601d\u7ef4\u6a21\u578b\uff0c\u5e76\u4f7f\u5176\u5c3d\u53ef\u80fd\u63a5\u8fd1\u540c\u6b65\u7f16\u7a0b\u3002</p> <p>\u2014 PEP 492 \u2013 COROUTINES WITH ASYNC AND AWAIT SYNTAX</p> <p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86\u4ec0\u4e48\u662f\u534f\u7a0b\uff0c\u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b\u5982\u4f55\u5728 Python \u4e2d\u4f7f\u7528\u5b83\u4eec\u3002</p> <p>\u88ab python \u5e76\u53d1 API \u6df9\u6ca1\u4e86\u5417\uff1f</p> <p>\u5bfb\u6c42\u89e3\u8131\uff0c\u4e0b\u8f7d\u6211\u7684\u514d\u8d39 Python \u5e76\u53d1\u601d\u7ef4\u5bfc\u56fe</p> <p>Coroutines extend generators in Python.</p> <p>Generators have slowly been migrating towards becoming first-class coroutines for a long time.</p> <p>We can explore some of the major changes to Python to add coroutines, which we might consider a subset of the probability addition of asyncio.</p> <p>New methods like send() and close() were added to generator objects to allow them to act more like coroutines.</p> <p>These were added in Python 2.5 and described in PEP 342.</p> <p>This PEP proposes some enhancements to the API and syntax of generators, to make them usable as simple coroutines.</p> <p>\u2014 PEP 342 \u2013 COROUTINES VIA ENHANCED GENERATORS</p> <p>Later, allowing generators to emit a suspension exception as well as a stop exception described in PEP 334.</p> <p>This PEP proposes a limited approach to coroutines based on an extension to the iterator protocol. Currently, an iterator may raise a StopIteration exception to indicate that it is done producing values. This proposal adds another exception to this protocol, SuspendIteration, which indicates that the given iterator may have more values to produce, but is unable to do so at this time.</p> <p>\u2014 PEP 334 \u2013 SIMPLE COROUTINES VIA SUSPENDITERATION</p> <p>The vast majority of the capabilities for working with modern coroutines in Python via the asyncio module were described in PEP 3156, added in Python 3.3.</p> <p>This is a proposal for asynchronous I/O in Python 3, starting at Python 3.3. Consider this the concrete proposal that is missing from PEP 3153. The proposal includes a pluggable event loop, transport and protocol abstractions similar to those in Twisted, and a higher-level scheduler based on yield from (PEP 380). The proposed package name is asyncio.</p> <p>\u2014 PEP 3156 \u2013 ASYNCHRONOUS IO SUPPORT REBOOTED: THE \u201cASYNCIO\u201d MODULE</p> <p>A second approach to coroutines, based on generators, was added to Python 3.4 as an extension to Python generators.</p> <p>A coroutine was defined as a function that used the @asyncio.coroutine decorator.</p> <p>Coroutines were executed using an asyncio event loop, via the asyncio module.</p> <p>A coroutine could suspend and execute another coroutine via the \u201cyield from\u201d expression</p> <p>For example:</p> <pre><code># define a custom coroutine in Python 3.4\n@asyncio.coroutine\ndef custom_coro():\n    # suspend and execute another coroutine\n    yield from asyncio.sleep(1)\n</code></pre> <p>The \u201cyield from\u201d expression was defined in PEP 380.</p> <p>A syntax is proposed for a generator to delegate part of its operations to another generator. This allows a section of code containing \u2018yield\u2019 to be factored out and placed in another generator.</p> <p>\u2014 PEP 380 \u2013 SYNTAX FOR DELEGATING TO A SUBGENERATOR</p> <p>The \u201cyield from\u201d expression is still available for use in generators, although is a deprecated approach to suspending execution in coroutines, in favor of the \u201cawait\u201d expression.</p> <p>Note: Support for generator-based coroutines is deprecated and is removed in Python 3.11. Generator-based coroutines predate async/await syntax. They are Python generators that use yield from expressions to await on Futures and other coroutines.</p> <p>\u2014 ASYNCIO COROUTINES AND TASKS</p> <p>We might say that coroutines were added as first-class objects to Python in version 3.5.</p> <p>This included changes to the Python language, such as the \u201casync def\u201c, \u201cawait\u201c, \u201casync with\u201c, and \u201casync for\u201d expressions, as well as a coroutine type.</p> <p>These changes were described in PEP 492.</p> <p>It is proposed to make coroutines a proper standalone concept in Python, and introduce new supporting syntax. The ultimate goal is to help establish a common, easily approachable, mental model of asynchronous programming in Python and make it as close to synchronous programming as possible.</p> <p>\u2014 PEP 492 \u2013 COROUTINES WITH ASYNC AND AWAIT SYNTAX</p> <p>Now that we know what a coroutine is, let\u2019s take a closer look at how to use them in Python.</p> <p>Overwheled by the python concurrency APIs?</p> <p>Find relief, download my FREE Python Concurrency Mind Maps</p>"},{"location":"asyncio/en/c5/","title":"5. \u5b9a\u4e49\u3001\u521b\u5efa\u548c\u8fd0\u884c\u534f\u7a0b","text":"<p>5. Define, Create and Run Coroutines</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u5728 Python \u7a0b\u5e8f\u4e2d\u5b9a\u4e49\u534f\u7a0b\uff0c\u5c31\u50cf\u5b9a\u4e49\u65b0\u7684\u5b50\u4f8b\u7a0b\uff08\u51fd\u6570\uff09\u4e00\u6837\u3002</p> <p>\u4e00\u65e6\u5b9a\u4e49\uff0c\u534f\u7a0b\u51fd\u6570\u5c31\u53ef\u4ee5\u7528\u6765\u521b\u5efa\u534f\u7a0b\u5bf9\u8c61\u3002</p> <p>\u201casyncio\u201d\u6a21\u5757\u63d0\u4f9b\u4e86\u5728\u4e8b\u4ef6\u5faa\u73af\u4e2d\u8fd0\u884c\u534f\u7a0b\u5bf9\u8c61\u7684\u5de5\u5177\uff0c\u4e8b\u4ef6\u5faa\u73af\u662f\u534f\u7a0b\u7684\u8fd0\u884c\u65f6\u3002</p> <p>We can define coroutines in our Python programs, just like defining new subroutines (functions).</p> <p>Once defined, a coroutine function can be used to create a coroutine object.</p> <p>The \u201casyncio\u201d module provides tools to run our coroutine objects in an event loop, which is a runtime for coroutines.</p>"},{"location":"asyncio/en/c5/#51-\u5982\u4f55\u5b9a\u4e49\u534f\u7a0b","title":"5.1 \u5982\u4f55\u5b9a\u4e49\u534f\u7a0b","text":"<p>5.1 How to Define a Coroutine</p> \u4e2d\u6587\u82f1\u6587 <p>\u534f\u7a0b\u53ef\u4ee5\u901a\u8fc7 \u201casync def\u201d \u8868\u8fbe\u5f0f\u6765\u5b9a\u4e49\u3002</p> <p>\u8fd9\u662f\u7528\u4e8e\u5b9a\u4e49\u5b50\u4f8b\u7a0b\u7684 \u201cdef\u201d \u8868\u8fbe\u5f0f\u7684\u6269\u5c55\u3002</p> <p>\u5b83\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53ef\u4ee5\u521b\u5efa\u7684\u534f\u7a0b\u5e76\u8fd4\u56de\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code># \u5b9a\u4e49\u4e00\u4e2a\u534f\u7a0b\nasync def custom_coro():\n    # ...\n</code></pre> <p>\u4f7f\u7528 \u201casync def\u201d \u8868\u8fbe\u5f0f\u5b9a\u4e49\u7684\u534f\u7a0b\u88ab\u79f0\u4e3a\u201c\u534f\u7a0b\u51fd\u6570\u201d\u3002</p> <p>\u534f\u7a0b\u51fd\u6570\uff1a\u8fd4\u56de\u534f\u7a0b\u5bf9\u8c61\u7684\u51fd\u6570\u3002 \u534f\u7a0b\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528 async def \u8bed\u53e5\u6765\u5b9a\u4e49\uff0c\u5e76\u4e14\u53ef\u4ee5\u5305\u542bawait\u3001async for \u548casync with \u5173\u952e\u5b57\u3002</p> <p>\u2014 PYTHON GLOSSARY</p> <p>\u7136\u540e\uff0c\u534f\u7a0b\u53ef\u4ee5\u5728\u5176\u4e2d\u4f7f\u7528\u534f\u7a0b\u7279\u5b9a\u7684\u8868\u8fbe\u5f0f\uff0c\u4f8b\u5982 await\u3001async for \u548c async with\u3002</p> <p>Python \u534f\u7a0b\u7684\u6267\u884c\u53ef\u4ee5\u5728\u8bb8\u591a\u70b9\u6682\u505c\u548c\u6062\u590d\uff08\u8bf7\u53c2\u9605\u534f\u7a0b\uff09\u3002 wait \u8868\u8fbe\u5f0f\u3001async for \u548c async with \u53ea\u80fd\u5728\u534f\u7a0b\u51fd\u6570\u4f53\u4e2d\u4f7f\u7528\u3002</p> <p>\u2014 COROUTINE FUNCTION DEFINITION</p> <p>\u4f8b\u5982\uff1a</p> <pre><code># \u5b9a\u4e49\u4e00\u4e2a\u534f\u7a0b\nasync def custom_coro():\n    # \u7b49\u5f85\u53e6\u4e00\u4e2a\u534f\u7a0b\n    await asyncio.sleep(1)\n</code></pre> <p>A coroutine can be defined via the \u201casync def\u201d expression.</p> <p>This is an extension of the \u201cdef\u201d expression for defining subroutines.</p> <p>It defines a coroutine that can be created and returns a coroutine object.</p> <p>For example:</p> <pre><code># define a coroutine\nasync def custom_coro():\n    # ...\n</code></pre> <p>A coroutine defined with the \u201casync def\u201d expression is referred to as a \u201ccoroutine function\u201c.</p> <p>coroutine function: A function which returns a coroutine object. A coroutine function may be defined with the async def statement, and may contain await, async for, and async with keywords.</p> <p>\u2014 PYTHON GLOSSARY</p> <p>A coroutine can then use coroutine-specific expressions within it, such as await, async for, and async with.</p> <p>Execution of Python coroutines can be suspended and resumed at many points (see coroutine). await expressions, async for and async with can only be used in the body of a coroutine function.</p> <p>\u2014 COROUTINE FUNCTION DEFINITION</p> <p>For example:</p> <pre><code># define a coroutine\nasync def custom_coro():\n    # await another coroutine\n    await asyncio.sleep(1)\n</code></pre>"},{"location":"asyncio/en/c5/#52-\u5982\u4f55\u521b\u5efa\u534f\u7a0b","title":"5.2 \u5982\u4f55\u521b\u5efa\u534f\u7a0b","text":"<p>5.2 How to Create a Coroutine</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e00\u65e6\u5b9a\u4e49\u4e86\u534f\u7a0b\uff0c\u5c31\u53ef\u4ee5\u521b\u5efa\u5b83\u3002</p> <p>\u8fd9\u770b\u8d77\u6765\u5c31\u50cf\u8c03\u7528\u4e00\u4e2a\u5b50\u4f8b\u7a0b\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u4e00\u4e2a\u534f\u7a0b\ncoro = custom_coro()\n</code></pre> <p>\u8fd9\u4e0d\u4f1a\u6267\u884c\u534f\u7a0b\u3002</p> <p>\u5b83\u8fd4\u56de\u4e00\u4e2a\u201ccoroutine\u201d\u5bf9\u8c61\u3002</p> <p>\u60a8\u53ef\u4ee5\u5c06\u534f\u7a0b\u51fd\u6570\u89c6\u4e3a\u534f\u7a0b\u5bf9\u8c61\u7684\u5de5\u5382\uff1b \u66f4\u76f4\u63a5\u5730\uff0c\u8bf7\u8bb0\u4f4f\u8c03\u7528\u534f\u7a0b\u51fd\u6570\u4e0d\u4f1a\u5bfc\u81f4\u4efb\u4f55\u7528\u6237\u7f16\u5199\u7684\u4ee3\u7801\u6267\u884c\uff0c\u800c\u53ea\u662f\u6784\u5efa\u5e76\u8fd4\u56de\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61\u3002</p> <p>\u2014 PAGE 516, PYTHON IN A NUTSHELL, 2017.</p> <p>\u201c\u534f\u7a0b\u201d Python \u5bf9\u8c61\u5177\u6709\u65b9\u6cd5\uff0c\u4f8b\u5982 send() \u548c close()\u3002 \u5b83\u662f\u4e00\u79cd\u7c7b\u578b\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u534f\u7a0b\u5b9e\u4f8b\u5e76\u8c03\u7528 type() \u5185\u7f6e\u51fd\u6570\u6765\u62a5\u544a\u5176\u7c7b\u578b\u6765\u6f14\u793a\u8fd9\u4e00\u70b9\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code># SuperFastPython.com\n# \u68c0\u67e5\u534f\u7a0b\u7684\u7c7b\u578b\n\n# \u5b9a\u4e49\u534f\u7a0b\nasync def custom_coro():\n    # \u7b49\u5f85\u53e6\u4e00\u4e2a\u534f\u7a0b\n    await asyncio.sleep(1)\n\n# \u521b\u5efa\u534f\u7a0b\ncoro = custom_coro()\n# \u68c0\u67e5\u534f\u7a0b\u7684\u7c7b\u578b\nprint(type(coro))\n</code></pre> <p>\u8fd0\u884c\u793a\u4f8b\u62a5\u544a\u521b\u5efa\u7684\u534f\u7a0b\u662f\u4e00\u4e2a\u201c\u534f\u7a0b\u201d\u7c7b\u3002</p> <p>\u6211\u4eec\u8fd8\u4f1a\u5f97\u5230\u4e00\u4e2a\u8fd0\u884c\u65f6\u9519\u8bef\uff0c\u56e0\u4e3a\u534f\u7a0b\u5df2\u521b\u5efa\u4f46\u4ece\u672a\u6267\u884c\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u4e00\u8282\u4e2d\u63a2\u8ba8\u8fd9\u4e00\u70b9\u3002</p> <pre><code>&lt;class 'coroutine'&gt;\nsys:1: RuntimeWarning: coroutine 'custom_coro' was never awaited\n</code></pre> <p>\u534f\u7a0b\u5bf9\u8c61\u662f\u4e00\u4e2a\u7b49\u5f85\u5bf9\u8c61\u3002</p> <p>\u8fd9\u610f\u5473\u7740\u5b83\u662f\u5b9e\u73b0 __await__() \u65b9\u6cd5\u7684 Python \u7c7b\u578b\u3002</p> <p>\u53ef\u7b49\u5f85\u5bf9\u8c61\u901a\u5e38\u5b9e\u73b0 __await__() \u65b9\u6cd5\u3002 \u4ece async def \u51fd\u6570\u8fd4\u56de\u7684\u534f\u7a0b\u5bf9\u8c61\u662f\u53ef\u7b49\u5f85\u7684\u3002</p> <p>\u2014 AWAITABLE OBJECTS</p> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173\u53ef\u7b49\u5f85\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>Python \u4e2d\u7684 Asyncio Awaitable \u662f\u4ec0\u4e48</li> </ul> <p>Once a coroutine is defined, it can be created.</p> <p>This looks like calling a subroutine.</p> <p>For example:</p> <pre><code>...\n# create a coroutine\ncoro = custom_coro()\n</code></pre> <p>This does not execute the coroutine.</p> <p>It returns a \u201ccoroutine\u201d object.</p> <p>You can think of a coroutine function as a factory for coroutine objects; more directly, remember that calling a coroutine function does not cause any user-written code to execute, but rather just builds and returns a coroutine object.</p> <p>\u2014 PAGE 516, PYTHON IN A NUTSHELL, 2017.</p> <p>A \u201ccoroutine\u201d Python object has methods, such as send() and close(). It is a type.</p> <p>We can demonstrate this by creating an instance of a coroutine and calling the type() built-in function in order to report its type.</p> <p>For example:</p> <pre><code># SuperFastPython.com\n# check the type of a coroutine\n\n# define a coroutine\nasync def custom_coro():\n    # await another coroutine\n    await asyncio.sleep(1)\n\n# create the coroutine\ncoro = custom_coro()\n# check the type of the coroutine\nprint(type(coro))\n</code></pre> <p>Running the example reports that the created coroutine is a \u201ccoroutine\u201d class.</p> <p>We also get a RuntimeError because the coroutine was created but never executed, we will explore that in the next section.</p> <pre><code>&lt;class 'coroutine'&gt;\nsys:1: RuntimeWarning: coroutine 'custom_coro' was never awaited\n</code></pre> <p>A coroutine object is an awaitable.</p> <p>This means it is a Python type that implements the __await__() method.</p> <p>An awaitable object generally implements an __await__() method. Coroutine objects returned from async def functions are awaitable.</p> <p>\u2014 AWAITABLE OBJECTS</p> <p>You can learn more about awaitables in the tutorial:</p> <ul> <li>What is an Asyncio Awaitable in Python</li> </ul>"},{"location":"asyncio/en/c5/#53-python\u4e2d\u5982\u4f55\u8fd0\u884c\u534f\u7a0b","title":"5.3 Python\u4e2d\u5982\u4f55\u8fd0\u884c\u534f\u7a0b","text":"<p>5.3 How to Run a Coroutine From Python</p> \u4e2d\u6587\u82f1\u6587 <p>\u53ef\u4ee5\u5b9a\u4e49\u548c\u521b\u5efa\u534f\u7a0b\uff0c\u4f46\u5b83\u4eec\u53ea\u80fd\u5728\u4e8b\u4ef6\u5faa\u73af\u5185\u6267\u884c\u3002</p> <p>\u4e8b\u4ef6\u5faa\u73af\u662f\u6bcf\u4e2a\u5f02\u6b65\u5e94\u7528\u7a0b\u5e8f\u7684\u6838\u5fc3\u3002 \u4e8b\u4ef6\u5faa\u73af\u8fd0\u884c\u5f02\u6b65\u4efb\u52a1\u548c\u56de\u8c03\u3001\u6267\u884c\u7f51\u7edc IO \u64cd\u4f5c\u5e76\u8fd0\u884c\u5b50\u8fdb\u7a0b\u3002</p> <p>\u2014 ASYNCIO EVENT LOOP</p> <p>\u6267\u884c\u534f\u7a0b\u7684\u4e8b\u4ef6\u5faa\u73af\u7ba1\u7406\u534f\u7a0b\u4e4b\u95f4\u7684\u534f\u4f5c\u591a\u4efb\u52a1\u5904\u7406\u3002</p> <p>\u534f\u7a0b\u5bf9\u8c61\u53ea\u80fd\u5728\u4e8b\u4ef6\u5faa\u73af\u8fd0\u884c\u65f6\u8fd0\u884c\u3002</p> <p>\u2014 PAGE 517, PYTHON IN A NUTSHELL, 2017.</p> <p>\u542f\u52a8\u534f\u7a0b\u4e8b\u4ef6\u5faa\u73af\u7684\u5178\u578b\u65b9\u6cd5\u662f\u901a\u8fc7 asyncio.run() \u51fd\u6570\u3002</p> <p>\u8be5\u51fd\u6570\u91c7\u7528\u4e00\u4e2a\u534f\u7a0b\u5e76\u8fd4\u56de\u8be5\u534f\u7a0b\u7684\u503c\u3002 \u63d0\u4f9b\u7684\u534f\u7a0b\u53ef\u4ee5\u7528\u4f5c\u57fa\u4e8e\u534f\u7a0b\u7684\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code># SuperFastPython.com\n# \u8fd0\u884c\u534f\u7a0b\u7684\u793a\u4f8b\nimport asyncio\n# \u5b9a\u4e49\u4e00\u4e2a\u534f\u7a0b\nasync def custom_coro():\n    # \u7b49\u5f85\u53e6\u4e00\u4e2a\u534f\u7a0b\n    await asyncio.sleep(1)\n\n# \u4e3b\u534f\u7a0b\nasync def main():\n    # \u6267\u884c\u6211\u7684\u81ea\u5b9a\u4e49\u534f\u7a0b\n    await custom_coro()\n\n# \u542f\u52a8\u534f\u7a0b\u7a0b\u5e8f\nasyncio.run(main())\n</code></pre> <p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u5982\u4f55\u5b9a\u4e49\u3001\u521b\u5efa\u548c\u8fd0\u884c\u534f\u7a0b\uff0c\u8ba9\u6211\u4eec\u82b1\u70b9\u65f6\u95f4\u6765\u4e86\u89e3\u4e8b\u4ef6\u5faa\u73af\u3002</p> <p>Coroutines can be defined and created, but they can only be executed within an event loop.</p> <p>The event loop is the core of every asyncio application. Event loops run asynchronous tasks and callbacks, perform network IO operations, and run subprocesses.</p> <p>\u2014 ASYNCIO EVENT LOOP</p> <p>The event loop that executes coroutines, manages the cooperative multitasking between coroutines.</p> <p>Coroutine objects can only run when the event loop is running.</p> <p>\u2014 PAGE 517, PYTHON IN A NUTSHELL, 2017.</p> <p>The typical way to start a coroutine event loop is via the asyncio.run() function.</p> <p>This function takes one coroutine and returns the value of the coroutine. The provided coroutine can be used as the entry point into the coroutine-based program.</p> <p>For example:</p> <pre><code># SuperFastPython.com\n# example of running a coroutine\nimport asyncio\n# define a coroutine\nasync def custom_coro():\n    # await another coroutine\n    await asyncio.sleep(1)\n\n# main coroutine\nasync def main():\n    # execute my custom coroutine\n    await custom_coro()\n\n# start the coroutine program\nasyncio.run(main())\n</code></pre> <p>```</p> <p>Now that we know how to define, create, and run a coroutine, let\u2019s take a moment to understand the event loop.</p>"},{"location":"asyncio/en/c6/","title":"6. \u4e8b\u4ef6\u5faa\u73af\u662f\u4ec0\u4e48","text":"<p>6. What is the Event Loop</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f02\u6b65\u7a0b\u5e8f\u7684\u6838\u5fc3\u662f\u4e8b\u4ef6\u5faa\u73af\u3002</p> <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u82b1\u4e00\u4e9b\u65f6\u95f4\u6765\u4e86\u89e3\u5f02\u6b65\u4e8b\u4ef6\u5faa\u73af\u3002</p> <p>The heart of asyncio programs is the event loop.</p> <p>In this section, we will take a moment to look at the asyncio event loop.</p>"},{"location":"asyncio/en/c6/#61-asyncio-\u7684\u4e8b\u4ef6\u5faa\u73af\u662f\u4ec0\u4e48","title":"6.1 Asyncio \u7684\u4e8b\u4ef6\u5faa\u73af\u662f\u4ec0\u4e48","text":"<p>6.1 What is the Asyncio Event Loop</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e8b\u4ef6\u5faa\u73af\u662f\u5728\u5355\u7ebf\u7a0b\u4e2d\u6267\u884c\u534f\u7a0b\u7684\u73af\u5883\u3002</p> <p>asyncio \u662f\u4e00\u4e2a\u4f7f\u7528\u79f0\u4e3a\u5355\u7ebf\u7a0b\u4e8b\u4ef6\u5faa\u73af\u7684\u5e76\u53d1\u6a21\u578b\u4ee5\u5f02\u6b65\u65b9\u5f0f\u6267\u884c\u8fd9\u4e9b\u534f\u7a0b\u7684\u5e93\u3002</p> <p>\u2014 PAGE 3, PYTHON CONCURRENCY WITH ASYNCIO, 2022.</p> <p>\u4e8b\u4ef6\u5faa\u73af\u662f asyncio \u7a0b\u5e8f\u7684\u6838\u5fc3\u3002</p> <p>\u5b83\u53ef\u4ee5\u505a\u5f88\u591a\u4e8b\u60c5\uff0c\u4f8b\u5982\uff1a</p> <ol> <li>\u6267\u884c\u534f\u7a0b\u3002</li> <li>\u6267\u884c\u56de\u8c03\u3002</li> <li>\u6267\u884c\u7f51\u7edc\u8f93\u5165/\u8f93\u51fa\u3002</li> <li>\u8fd0\u884c\u5b50\u8fdb\u7a0b\u3002</li> </ol> <p>\u4e8b\u4ef6\u5faa\u73af\u662f\u6bcf\u4e2a\u5f02\u6b65\u5e94\u7528\u7a0b\u5e8f\u7684\u6838\u5fc3\u3002 \u4e8b\u4ef6\u5faa\u73af\u8fd0\u884c\u5f02\u6b65\u4efb\u52a1\u548c\u56de\u8c03\u3001\u6267\u884c\u7f51\u7edc IO \u64cd\u4f5c\u5e76\u8fd0\u884c\u5b50\u8fdb\u7a0b\u3002</p> <p>\u2014 ASYNCIO EVENT LOOP</p> <p>\u4e8b\u4ef6\u5faa\u73af\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u5e76\u4e14\u7531\u4e8e\u5b83\u4eec\u5728 JavaScript \u4e2d\u7684\u4f7f\u7528\uff0c\u8fd1\u5e74\u6765\u53d8\u5f97\u975e\u5e38\u6d41\u884c\u3002</p> <p>JavaScript \u6709\u4e00\u4e2a\u57fa\u4e8e\u4e8b\u4ef6\u5faa\u73af\u7684\u8fd0\u884c\u65f6\u6a21\u578b\uff0c\u5b83\u8d1f\u8d23\u6267\u884c\u4ee3\u7801\u3001\u6536\u96c6\u548c\u5904\u7406\u4e8b\u4ef6\u4ee5\u53ca\u6267\u884c\u6392\u961f\u7684\u5b50\u4efb\u52a1\u3002 \u8be5\u6a21\u578b\u4e0e C \u548c Java \u7b49\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684\u6a21\u578b\u6709\u5f88\u5927\u4e0d\u540c\u3002</p> <p>\u2014 THE EVENT LOOP, MOZILLA.</p> <p>\u4e8b\u4ef6\u5faa\u73af\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u4e00\u4e2a\u5faa\u73af\u3002 \u5b83\u7ba1\u7406\u4efb\u52a1\uff08\u534f\u7a0b\uff09\u5217\u8868\uff0c\u5e76\u5c1d\u8bd5\u5728\u5faa\u73af\u7684\u6bcf\u6b21\u8fed\u4ee3\u4e2d\u6309\u987a\u5e8f\u6267\u884c\u6bcf\u4e2a\u4efb\u52a1\uff0c\u4ee5\u53ca\u6267\u884c\u5176\u4ed6\u4efb\u52a1\uff0c\u4f8b\u5982\u6267\u884c\u56de\u8c03\u548c\u5904\u7406 I/O\u3002</p> <p>\u201casyncio\u201d\u6a21\u5757\u63d0\u4f9b\u4e86\u8bbf\u95ee\u4e8b\u4ef6\u5faa\u73af\u5e76\u4e0e\u4e4b\u4ea4\u4e92\u7684\u529f\u80fd\u3002</p> <p>\u8fd9\u5bf9\u4e8e\u5178\u578b\u7684\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u6765\u8bf4\u4e0d\u662f\u5fc5\u9700\u7684\u3002</p> <p>\u76f8\u53cd\uff0c\u4e3a\u6846\u67b6\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u5bf9\u4e8b\u4ef6\u5faa\u73af\u7684\u8bbf\u95ee\uff0c\u8fd9\u4e9b\u5f00\u53d1\u4eba\u5458\u5e0c\u671b\u5728 asyncio \u6a21\u5757\u4e4b\u4e0a\u6784\u5efa\u6216\u4e3a\u5176\u5e93\u542f\u7528 asyncio\u3002</p> <p>\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\u901a\u5e38\u5e94\u4f7f\u7528\u9ad8\u7ea7 asyncio \u51fd\u6570\uff0c\u4f8b\u5982 asyncio.run()\uff0c\u5e76\u4e14\u5f88\u5c11\u9700\u8981\u5f15\u7528\u5faa\u73af\u5bf9\u8c61\u6216\u8c03\u7528\u5176\u65b9\u6cd5\u3002</p> <p>\u2014 ASYNCIO EVENT LOOP</p> <p>asyncio \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4f4e\u7ea7 API\uff0c\u7528\u4e8e\u8bbf\u95ee\u5f53\u524d\u4e8b\u4ef6\u5faa\u73af\u5bf9\u8c61\uff0c\u4ee5\u53ca\u4e00\u5957\u53ef\u7528\u4e8e\u4e0e\u4e8b\u4ef6\u5faa\u73af\u4ea4\u4e92\u7684\u65b9\u6cd5\u3002</p> <p>\u4f4e\u7ea7 API \u65e8\u5728\u4f9b\u6846\u67b6\u5f00\u53d1\u4eba\u5458\u6269\u5c55\u3001\u8865\u5145 asyncio \u5e76\u5c06\u5176\u96c6\u6210\u5230\u7b2c\u4e09\u65b9\u5e93\u4e2d\u3002</p> <p>\u6211\u4eec\u5f88\u5c11\u9700\u8981\u4e0e asyncio \u7a0b\u5e8f\u4e2d\u7684\u4e8b\u4ef6\u5faa\u73af\u8fdb\u884c\u4ea4\u4e92\uff0c\u800c\u662f\u4f7f\u7528\u9ad8\u7ea7 API\u3002</p> <p>\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u7b80\u5355\u63a2\u8ba8\u4e00\u4e0b\u5982\u4f55\u83b7\u53d6\u4e8b\u4ef6\u5faa\u73af\u3002</p> <p>The event loop is an environment for executing coroutines in a single thread.</p> <p>asyncio is a library to execute these coroutines in an asynchronous fashion using a concurrency model known as a single-threaded event loop.</p> <p>\u2014 PAGE 3, PYTHON CONCURRENCY WITH ASYNCIO, 2022.</p> <p>The event loop is the core of an asyncio program.</p> <p>It does many things, such as:</p> <ol> <li>Execute coroutines.</li> <li>Execute callbacks.</li> <li>Perform network input/output.</li> <li>Run subprocesses.</li> </ol> <p>The event loop is the core of every asyncio application. Event loops run asynchronous tasks and callbacks, perform network IO operations, and run subprocesses.</p> <p>\u2014 ASYNCIO EVENT LOOP</p> <p>Event loops are a common design pattern and became very popular in recent times given their use in JavaScript.</p> <p>JavaScript has a runtime model based on an event loop, which is responsible for executing the code, collecting and processing events, and executing queued sub-tasks. This model is quite different from models in other languages like C and Java.</p> <p>\u2014 THE EVENT LOOP, MOZILLA.</p> <p>The event loop, as its name suggests, is a loop. It manages a list of tasks (coroutines) and attempts to progress each in sequence in each iteration of the loop, as well as perform other tasks like executing callbacks and handling I/O.</p> <p>The \u201casyncio\u201d module provides functions for accessing and interacting with the event loop.</p> <p>This is not required for typical application development.</p> <p>Instead, access to the event loop is provided for framework developers, those that want to build on top of the asyncio module or enable asyncio for their library.</p> <p>Application developers should typically use the high-level asyncio functions, such as asyncio.run(), and should rarely need to reference the loop object or call its methods.</p> <p>\u2014 ASYNCIO EVENT LOOP</p> <p>The asyncio module provides a low-level API for getting access to the current event loop object, as well as a suite of methods that can be used to interact with the event loop.</p> <p>The low-level API is intended for framework developers that will extend, complement and integrate asyncio into third-party libraries.</p> <p>We rarely need to interact with the event loop in asyncio programs, in favor of using the high-level API instead.</p> <p>Nevertheless, we can briefly explore how to get the event loop.</p>"},{"location":"asyncio/en/c6/#62-\u4e8b\u4ef6\u5faa\u73af\u5982\u4f55\u83b7\u53d6\u548c\u542f\u52a8","title":"6.2 \u4e8b\u4ef6\u5faa\u73af\u5982\u4f55\u83b7\u53d6\u548c\u542f\u52a8","text":"<p>6.2 How To Start and Get An Event Loop</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u5728\u5f02\u6b65\u5e94\u7528\u7a0b\u5e8f\u4e2d\u521b\u5efa\u4e8b\u4ef6\u5faa\u73af\u7684\u5178\u578b\u65b9\u6cd5\u662f\u901a\u8fc7 asyncio.run() \u51fd\u6570\u3002</p> <p>\u8be5\u51fd\u6570\u603b\u662f\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4e8b\u4ef6\u5faa\u73af\u5e76\u5728\u6700\u540e\u5173\u95ed\u5b83\u3002 \u5b83\u5e94\u8be5\u7528\u4f5c asyncio \u7a0b\u5e8f\u7684\u4e3b\u8981\u5165\u53e3\u70b9\uff0c\u5e76\u4e14\u6700\u597d\u53ea\u8c03\u7528\u4e00\u6b21\u3002</p> <p>\u2014 ASYNCIO COROUTINES AND TASKS</p> <p>\u8be5\u51fd\u6570\u91c7\u7528\u4e00\u4e2a\u534f\u7a0b\u5e76\u5c06\u5176\u6267\u884c\u76f4\u81f3\u5b8c\u6210\u3002</p> <p>\u6211\u4eec\u901a\u5e38\u5c06\u5176\u4f20\u9012\u7ed9\u6211\u4eec\u7684\u4e3b\u534f\u7a0b\u5e76\u4ece\u90a3\u91cc\u8fd0\u884c\u6211\u4eec\u7684\u7a0b\u5e8f\u3002</p> <p>\u6709\u4e00\u4e9b\u4f4e\u7ea7\u51fd\u6570\u7528\u4e8e\u521b\u5efa\u548c\u8bbf\u95ee\u4e8b\u4ef6\u5faa\u73af\u3002</p> <p>asyncio.new_event_loop() \u51fd\u6570\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4e8b\u4ef6\u5faa\u73af\u5e76\u8fd4\u56de\u5bf9\u5176\u7684\u8bbf\u95ee\u6743\u9650\u3002</p> <p>\u521b\u5efa\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u4e8b\u4ef6\u5faa\u73af\u5bf9\u8c61\u3002</p> <p>\u2014 ASYNCIO EVENT LOOP</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u5e76\u8bbf\u95ee\u65b0\u7684\u5f02\u6b65\u4e8b\u4ef6\u5faa\u73af\nloop = asyncio.new_event_loop()\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u6709\u6548\u7684\u4f8b\u5b50\u6765\u8bc1\u660e\u8fd9\u4e00\u70b9\u3002</p> <p>\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4e8b\u4ef6\u5faa\u73af\uff0c\u7136\u540e\u62a5\u544a\u5176\u8be6\u7ec6\u4fe1\u606f\u3002</p> <pre><code># SuperFastPython.com\n# \u521b\u5efa\u4e8b\u4ef6\u5faa\u73af\u7684\u793a\u4f8b\nimport asyncio\n\n# \u521b\u5efa\u5e76\u8bbf\u95ee\u65b0\u7684\u5f02\u6b65\u4e8b\u4ef6\u5faa\u73af\nloop = asyncio.new_event_loop()\n# \u62a5\u544a\u5faa\u73af\u7684\u9ed8\u8ba4\u503c\nprint(loop)\n</code></pre> <p>\u8fd0\u884c\u8be5\u793a\u4f8b\u5c06\u521b\u5efa\u4e8b\u4ef6\u5faa\u73af\uff0c\u7136\u540e\u62a5\u544a\u5bf9\u8c61\u7684\u8be6\u7ec6\u4fe1\u606f\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e8b\u4ef6\u5faa\u73af\u7684\u7c7b\u578b\u4e3a _UnixSelectorEventLoop \u5e76\u4e14\u6ca1\u6709\u8fd0\u884c\uff0c\u4f46\u4e5f\u6ca1\u6709\u5173\u95ed\u3002</p> <pre><code>&lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;\n</code></pre> <p>\u5982\u679c asyncio \u4e8b\u4ef6\u5faa\u73af\u5df2\u7ecf\u5728\u8fd0\u884c\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 asyncio.get_running_loop() \u51fd\u6570\u8bbf\u95ee\u5b83\u3002</p> <p>\u8fd4\u56de\u5f53\u524d\u64cd\u4f5c\u7cfb\u7edf\u7ebf\u7a0b\u4e2d\u6b63\u5728\u8fd0\u884c\u7684\u4e8b\u4ef6\u5faa\u73af\u3002 \u5982\u679c\u6ca1\u6709\u6b63\u5728\u8fd0\u884c\u7684\u4e8b\u4ef6\u5faa\u73af\uff0c\u5219\u4f1a\u5f15\u53d1 RuntimeError\u3002 \u8be5\u51fd\u6570\u53ea\u80fd\u4ece\u534f\u7a0b\u6216\u56de\u8c03\u4e2d\u8c03\u7528\u3002</p> <p>\u2014 ASYNCIO EVENT LOOP</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u8bbf\u95ee\u6b63\u5728\u8fd0\u884c\u7684\u4e8b\u4ef6\u5faa\u73af\nloop = asyncio.get_running_loop()\n</code></pre> <p>\u8fd8\u6709\u4e00\u4e2a\u7528\u4e8e\u83b7\u53d6\u6216\u542f\u52a8\u4e8b\u4ef6\u5faa\u73af\u7684\u51fd\u6570\uff0c\u79f0\u4e3a asyncio.get_event_loop()\uff0c\u4f46\u5df2\u5f03\u7528 \u5728 Python 3.10 \u4e2d\uff0c\u4e0d\u5e94\u4f7f\u7528\u3002</p> <p>The typical way we create an event loop in asyncio applications is via the asyncio.run() function.</p> <p>This function always creates a new event loop and closes it at the end. It should be used as a main entry point for asyncio programs, and should ideally only be called once.</p> <p>\u2014 ASYNCIO COROUTINES AND TASKS</p> <p>The function takes a coroutine and will execute it to completion.</p> <p>We typically pass it to our main coroutine and run our program from there.</p> <p>There are low-level functions for creating and accessing the event loop.</p> <p>The asyncio.new_event_loop() function will create a new event loop and return access to it.</p> <p>Create and return a new event loop object.</p> <p>\u2014 ASYNCIO EVENT LOOP</p> <p>For example:</p> <pre><code>...\n# create and access a new asyncio event loop\nloop = asyncio.new_event_loop()\n</code></pre> <p>We can demonstrate this with a worked example.</p> <p>In the example below we will create a new event loop and then report its details.</p> <pre><code># SuperFastPython.com\n# example of creating an event loop\nimport asyncio\n\n# create and access a new asyncio event loop\nloop = asyncio.new_event_loop()\n# report defaults of the loop\nprint(loop)\n</code></pre> <p>Running the example creates the event loop, then reports the details of the object.</p> <p>We can see that in this case the event loop has the type _UnixSelectorEventLoop and is not running, but is also not closed.</p> <pre><code>&lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;\n</code></pre> <p>If an asyncio event loop is already running, we can get access to it via the asyncio.get_running_loop() function.</p> <p>Return the running event loop in the current OS thread. If there is no running event loop a RuntimeError is raised. This function can only be called from a coroutine or a callback.</p> <p>\u2014 ASYNCIO EVENT LOOP</p> <p>For example:</p> <pre><code>...\n# access he running event loop\nloop = asyncio.get_running_loop()\n</code></pre> <p>There is also a function for getting or starting the event loop called asyncio.get_event_loop(), but it was deprecated in Python 3.10 and should not be used.</p>"},{"location":"asyncio/en/c6/#63-\u4e8b\u4ef6\u5faa\u73af\u5bf9\u8c61\u662f\u4ec0\u4e48","title":"6.3 \u4e8b\u4ef6\u5faa\u73af\u5bf9\u8c61\u662f\u4ec0\u4e48","text":"<p>6.3 What is an Event Loop Object</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e8b\u4ef6\u5faa\u73af\u4f5c\u4e3a Python \u5bf9\u8c61\u5b9e\u73b0\u3002</p> <p>\u4e8b\u4ef6\u5faa\u73af\u5bf9\u8c61\u5b9a\u4e49\u4e86\u4e8b\u4ef6\u5faa\u73af\u7684\u5b9e\u73b0\u65b9\u5f0f\uff0c\u5e76\u63d0\u4f9b\u4e86\u4e0e\u5faa\u73af\u4ea4\u4e92\u7684\u901a\u7528 API\uff0c\u5b9a\u4e49\u5728 AbstractEventLoop \u7c7b\u3002</p> <p>\u4e0d\u540c\u5e73\u53f0\u7684\u4e8b\u4ef6\u5faa\u73af\u6709\u4e0d\u540c\u7684\u5b9e\u73b0\u3002</p> <p>\u4f8b\u5982\uff0c\u57fa\u4e8e Windows \u548c Unix \u7684\u64cd\u4f5c\u7cfb\u7edf\u5c06\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u5b9e\u73b0\u4e8b\u4ef6\u5faa\u73af\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u5e73\u53f0\u4e0a\u5b9e\u73b0\u975e\u963b\u585e I/O \u7684\u5e95\u5c42\u65b9\u5f0f\u4e0d\u540c\u3002</p> <p>SelectorEventLoop \u7c7b\u578b\u4e8b\u4ef6\u5faa\u73af\u662f\u57fa\u4e8e Unix \u7684\u64cd\u4f5c\u7cfb\u7edf\uff08\u5982 Linux \u548c macOS\uff09\u4e0a\u7684\u9ed8\u8ba4\u8bbe\u7f6e\u3002</p> <p>ProactorEventLoop \u7c7b\u578b\u4e8b\u4ef6\u5faa\u73af\u662f Windows \u4e0a\u7684\u9ed8\u8ba4\u8bbe\u7f6e\u3002</p> <p>\u7b2c\u4e09\u65b9\u5e93\u53ef\u4ee5\u5b9e\u73b0\u81ea\u5df1\u7684\u4e8b\u4ef6\u5faa\u73af\u6765\u4f18\u5316\u7279\u5b9a\u529f\u80fd\u3002</p> <p>An event loop is implemented as a Python object.</p> <p>The event loop object defines how the event loop is implemented and provides a common API for interacting with the loop, defined on the AbstractEventLoop class.</p> <p>There are different implementations of the event loop for different platforms.</p> <p>For example, Windows and Unix-based operations systems will implement the event loop in different ways, given the different underlying ways that non-blocking I/O is implemented on these platforms.</p> <p>The SelectorEventLoop type event loop is the default on Unix-based operating systems like Linux and macOS.</p> <p>The ProactorEventLoop type event loop is the default on Windows.</p> <p>Third-party libraries may implement their own event loops to optimize for specific features.</p>"},{"location":"asyncio/en/c6/#64-\u4e3a\u4ec0\u4e48\u8981\u8bbf\u95ee\u4e8b\u4ef6\u5faa\u73af","title":"6.4 \u4e3a\u4ec0\u4e48\u8981\u8bbf\u95ee\u4e8b\u4ef6\u5faa\u73af","text":"<p>6.4 Why Get Access to The Event Loop</p> \u4e2d\u6587\u82f1\u6587 <p>\u4e3a\u4ec0\u4e48\u6211\u4eec\u60f3\u8981\u8bbf\u95ee asyncio \u7a0b\u5e8f\u4e4b\u5916\u7684\u4e8b\u4ef6\u5faa\u73af\uff1f</p> <p>\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u4ece\u6b63\u5728\u8fd0\u884c\u7684 asyncio \u7a0b\u5e8f\u5916\u90e8\u8bbf\u95ee\u4e8b\u4ef6\u5faa\u73af\u7684\u539f\u56e0\u6709\u5f88\u591a\u3002</p> <p>\u4f8b\u5982\uff1a</p> <ol> <li>\u76d1\u63a7\u4efb\u52a1\u7684\u8fdb\u5c55\u60c5\u51b5\u3002</li> <li>\u53d1\u51fa\u4efb\u52a1\u5e76\u83b7\u53d6\u7ed3\u679c\u3002</li> <li>\u89e3\u96c7\u5e76\u5fd8\u8bb0\u4e00\u6b21\u6027\u4efb\u52a1\u3002</li> </ol> <p>\u5f02\u6b65\u4e8b\u4ef6\u5faa\u73af\u53ef\u4ee5\u5728\u7a0b\u5e8f\u4e2d\u7528\u4f5c\u57fa\u4e8e\u534f\u7a0b\u7684\u4efb\u52a1\u7684\u7ebf\u7a0b\u6c60\u7684\u66ff\u4ee3\u65b9\u6848\u3002</p> <p>\u4e8b\u4ef6\u5faa\u73af\u4e5f\u53ef\u4ee5\u5d4c\u5165\u5230\u666e\u901a\u7684\u5f02\u6b65\u7a0b\u5e8f\u4e2d\u5e76\u6839\u636e\u9700\u8981\u8fdb\u884c\u8bbf\u95ee\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u5bf9\u4e8b\u4ef6\u5faa\u73af\u6709\u4e86\u4e00\u4e9b\u4e86\u89e3\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5f02\u6b65\u4efb\u52a1\u3002</p> <p>Why would we want access to an event loop outside of an asyncio program?</p> <p>There are many reasons why we may want access to the event loop from outside of a running asyncio program.</p> <p>For example:</p> <ol> <li>To monitor the progress of tasks.</li> <li>To issue and get results from tasks.</li> <li>To fire and forget one-off tasks.</li> </ol> <p>An asyncio event loop can be used in a program as an alternative to a thread pool for coroutine-based tasks.</p> <p>An event loop may also be embedded within a normal asyncio program and accessed as needed.</p> <p>Now that we know a little about the event loop, let\u2019s look at asyncio tasks.</p>"},{"location":"asyncio/en/c7/","title":"7. Asyncio \u4efb\u52a1\u7684\u521b\u5efa\u548c\u8fd0\u884c","text":"<p>7. Create and Run Asyncio Tasks</p> \u4e2d\u6587\u82f1\u6587 <p>\u60a8\u53ef\u4ee5\u4ece asyncio \u7a0b\u5e8f\u4e2d\u7684\u534f\u7a0b\u521b\u5efa\u4efb\u52a1\u5bf9\u8c61\u3002</p> <p>\u4efb\u52a1\u63d0\u4f9b\u72ec\u7acb\u8c03\u5ea6\u548c\u8fd0\u884c\u7684\u534f\u7a0b\u7684\u53e5\u67c4\uff0c\u5e76\u5141\u8bb8\u67e5\u8be2\u3001\u53d6\u6d88\u4efb\u52a1\u4ee5\u53ca\u7a0d\u540e\u68c0\u7d22\u7ed3\u679c\u548c\u5f02\u5e38\u3002</p> <p>asyncio \u4e8b\u4ef6\u5faa\u73af\u7ba1\u7406\u4efb\u52a1\u3002 \u56e0\u6b64\uff0c\u6240\u6709\u534f\u7a0b\u90fd\u6210\u4e3a\u4e8b\u4ef6\u5faa\u73af\u4e2d\u7684\u4efb\u52a1\u5e76\u4f5c\u4e3a\u4efb\u52a1\u8fdb\u884c\u7ba1\u7406\u3002</p> <p>\u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b\u5f02\u6b65\u4efb\u52a1\u3002</p> <p>You can create Task objects from coroutines in asyncio programs.</p> <p>Tasks provide a handle on independently scheduled and running coroutines and allow the task to be queried, canceled, and results and exceptions to be retrieved later.</p> <p>The asyncio event loop manages tasks. As such, all coroutines become and are managed as tasks within the event loop.</p> <p>Let\u2019s take a closer look at asyncio tasks.</p>"},{"location":"asyncio/en/c7/#71-asyncio-\u4efb\u52a1\u662f\u4ec0\u4e48","title":"7.1 Asyncio \u4efb\u52a1\u662f\u4ec0\u4e48","text":"<p>7.1 What is an Asyncio Task</p> \u4e2d\u6587\u82f1\u6587 <p>\u4efb\u52a1\u662f\u4e00\u4e2a\u8c03\u5ea6\u5e76\u72ec\u7acb\u8fd0\u884c\u5f02\u6b65\u534f\u7a0b\u7684\u5bf9\u8c61\u3002</p> <p>\u5b83\u63d0\u4f9b\u4e86\u9884\u5b9a\u534f\u7a0b\u7684\u53e5\u67c4\uff0casyncio \u7a0b\u5e8f\u53ef\u4ee5\u67e5\u8be2\u8be5\u53e5\u67c4\u5e76\u4f7f\u7528\u8be5\u53e5\u67c4\u4e0e\u534f\u7a0b\u8fdb\u884c\u4ea4\u4e92\u3002</p> <p>\u4efb\u52a1\u662f\u7ba1\u7406\u72ec\u7acb\u8fd0\u884c\u7684\u534f\u7a0b\u7684\u5bf9\u8c61\u3002</p> <p>\u2014 PEP 3156 \u2013 ASYNCHRONOUS IO SUPPORT REBOOTED: THE \u201cASYNCIO\u201d MODULE</p> <p>\u4efb\u52a1\u662f\u4ece\u534f\u7a0b\u521b\u5efa\u7684\u3002 \u5b83\u9700\u8981\u4e00\u4e2a\u534f\u7a0b\u5bf9\u8c61\uff0c\u5305\u88c5\u534f\u7a0b\uff0c\u5b89\u6392\u5176\u6267\u884c\uff0c\u5e76\u63d0\u4f9b\u4e0e\u5176\u4ea4\u4e92\u7684\u65b9\u6cd5\u3002</p> <p>\u4efb\u52a1\u662f\u72ec\u7acb\u6267\u884c\u7684\u3002 \u8fd9\u610f\u5473\u7740\u5b83\u88ab\u8c03\u5ea6\u5728 asyncio \u4e8b\u4ef6\u5faa\u73af\u4e2d\uff0c\u5e76\u4e14\u65e0\u8bba\u521b\u5efa\u5b83\u7684\u534f\u7a0b\u4e2d\u53d1\u751f\u4e86\u4ec0\u4e48\uff0c\u5b83\u90fd\u4f1a\u6267\u884c\u3002 \u8fd9\u4e0e\u76f4\u63a5\u6267\u884c\u534f\u7a0b\u4e0d\u540c\uff0c\u8c03\u7528\u8005\u5fc5\u987b\u7b49\u5f85\u5b83\u5b8c\u6210\u3002</p> <p>\u4efb\u52a1\u7528\u4e8e\u540c\u65f6\u8c03\u5ea6\u534f\u7a0b\u3002 \u5f53\u534f\u7a0b\u88ab\u5305\u88c5\u5230\u5177\u6709 asyncio.create_task() \u7b49\u51fd\u6570\u7684\u4efb\u52a1\u4e2d\u65f6\uff0c\u534f\u7a0b\u4f1a\u81ea\u52a8\u5b89\u6392\u5f88\u5feb\u8fd0\u884c</p> <p>\u2014 COROUTINES AND TASKS</p> <p>asyncio.Task \u7c7b\u6269\u5c55\u4e86 asyncio.Future \u7c7b\u548c\u5b9e\u4f8b\u662f\u53ef\u7b49\u5f85\u7684\u3002</p> <p>Future \u662f\u4e00\u4e2a\u8f83\u4f4e\u7ea7\u522b\u7684\u7c7b\uff0c\u4ee3\u8868\u6700\u7ec8\u5c06\u5230\u8fbe\u7684\u7ed3\u679c\u3002</p> <p>Future \u662f\u4e00\u79cd\u7279\u6b8a\u7684\u4f4e\u7ea7\u53ef\u7b49\u5f85\u5bf9\u8c61\uff0c\u5b83\u8868\u793a\u5f02\u6b65\u64cd\u4f5c\u7684\u6700\u7ec8\u7ed3\u679c\u3002</p> <p>\u2014 COROUTINES AND TASKS</p> <p>\u6269\u5c55 Future \u7c7b\u7684\u7c7b\u901a\u5e38\u88ab\u79f0\u4e3a\u7c7b Future \u7c7b\u3002</p> <p>\u8fd0\u884c Python \u534f\u7a0b\u7684\u7c7b\u4f3c Future \u7684\u5bf9\u8c61\u3002</p> <p>\u2014 COROUTINES AND TASKS</p> <p>\u56e0\u4e3a\u4efb\u52a1\u662f\u53ef\u7b49\u5f85\u7684\uff0c\u8fd9\u610f\u5473\u7740\u534f\u7a0b\u53ef\u4ee5\u4f7f\u7528\u7b49\u5f85\u8868\u8fbe\u5f0f\u7b49\u5f85\u4efb\u52a1\u5b8c\u6210\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u7b49\u5f85\u4efb\u52a1\u5b8c\u6210\nawait task\n</code></pre> <p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4ec0\u4e48\u662f\u5f02\u6b65\u4efb\u52a1\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u521b\u5efa\u4e00\u4e2a\u5f02\u6b65\u4efb\u52a1\u3002</p> <p>A Task is an object that schedules and independently runs an asyncio coroutine.</p> <p>It provides a handle on a scheduled coroutine that an asyncio program can query and use to interact with the coroutine.</p> <p>A Task is an object that manages an independently running coroutine.</p> <p>\u2014 PEP 3156 \u2013 ASYNCHRONOUS IO SUPPORT REBOOTED: THE \u201cASYNCIO\u201d MODULE</p> <p>A task is created from a coroutine. It requires a coroutine object, wraps the coroutine, schedules it for execution, and provides ways to interact with it.</p> <p>A task is executed independently. This means it is scheduled in the asyncio event loop and will execute regardless of what else happens in the coroutine that created it. This is different from executing a coroutine directly, where the caller must wait for it to complete.</p> <p>Tasks are used to schedule coroutines concurrently. When a coroutine is wrapped into a Task with functions like asyncio.create_task() the coroutine is automatically scheduled to run soon</p> <p>\u2014 COROUTINES AND TASKS</p> <p>The asyncio.Task class extends the asyncio.Future class and an instance are awaitable.</p> <p>A Future is a lower-level class that represents a result that will eventually arrive.</p> <p>A Future is a special low-level awaitable object that represents an eventual result of an asynchronous operation.</p> <p>\u2014 COROUTINES AND TASKS</p> <p>Classes that extend the Future class are often referred to as Future-like.</p> <p>A Future-like object that runs a Python coroutine.</p> <p>\u2014 COROUTINES AND TASKS</p> <p>Because a Task is awaitable it means that a coroutine can wait for a task to be done using the await expression.</p> <p>For example:</p> <pre><code>...\n# wait for a task to be done\nawait task\n</code></pre> <p>Now that we know what an asyncio task is, let\u2019s look at how we might create one.</p>"},{"location":"asyncio/en/c7/#72-\u600e\u4e48\u521b\u5efa\u4efb\u52a1","title":"7.2 \u600e\u4e48\u521b\u5efa\u4efb\u52a1","text":"<p>7.2 How to Create a Task</p> \u4e2d\u6587\u82f1\u6587 <p>\u4f7f\u7528\u63d0\u4f9b\u7684\u534f\u7a0b\u5b9e\u4f8b\u521b\u5efa\u4efb\u52a1\u3002</p> <p>\u56de\u60f3\u4e00\u4e0b\uff0c\u534f\u7a0b\u662f\u4f7f\u7528 async def \u8868\u8fbe\u5f0f\u5b9a\u4e49\u7684\uff0c\u770b\u8d77\u6765\u50cf\u4e00\u4e2a\u51fd\u6570\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code># \u5b9a\u4e49\u534f\u7a0b\nasync def task_coroutine():\n    # ...\n</code></pre> <p>\u4efb\u52a1\u53ea\u80fd\u5728\u534f\u7a0b\u5185\u521b\u5efa\u548c\u8c03\u5ea6\u3002</p> <p>\u521b\u5efa\u548c\u8ba1\u5212\u4efb\u52a1\u6709\u4e24\u79cd\u4e3b\u8981\u65b9\u6cd5\uff0c\u5b83\u4eec\u662f\uff1a</p> <ol> <li>\u4f7f\u7528\u9ad8\u7ea7 API \u521b\u5efa\u4efb\u52a1\uff08\u9996\u9009\uff09</li> <li>\u4f7f\u7528\u4f4e\u7ea7 API \u521b\u5efa\u4efb\u52a1</li> </ol> <p>\u8ba9\u6211\u4eec\u4f9d\u6b21\u4ed4\u7ec6\u770b\u770b\u6bcf\u4e00\u4e2a\u3002</p> <p>A task is created using a provided coroutine instance.</p> <p>Recall that a coroutine is defined using the async def expression and looks like a function.</p> <p>For example:</p> <pre><code># define a coroutine\nasync def task_coroutine():\n    # ...\n</code></pre> <p>A task can only be created and scheduled within a coroutine.</p> <p>There are two main ways to create and schedule a task, they are:</p> <ol> <li>Create Task With High-Level API (preferred)</li> <li>Create Task With Low-Level API</li> </ol> <p>Let\u2019s take a closer look at each in turn.</p>"},{"location":"asyncio/en/c7/#721-\u4f7f\u7528\u9ad8\u7ea7-api-\u521b\u5efa\u4efb\u52a1","title":"7.2.1 \u4f7f\u7528\u9ad8\u7ea7 API \u521b\u5efa\u4efb\u52a1","text":"<p>7.2.1 Create Task With High-Level API</p> \u4e2d\u6587\u82f1\u6587 <p>\u53ef\u4ee5\u4f7f\u7528 asyncio.create_task() \u51fd\u6570\u521b\u5efa\u4efb\u52a1\u3002</p> <p>asyncio.create_task() \u51fd\u6570\u91c7\u7528\u534f\u7a0b\u5b9e\u4f8b\u548c\u4efb\u52a1\u7684\u53ef\u9009\u540d\u79f0\uff0c\u5e76\u8fd4\u56de asyncio.Task \u5b9e\u4f8b\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u4e00\u4e2a\u534f\u7a0b\ncoro = task_coroutine()\n# \u4ece\u534f\u7a0b\u521b\u5efa\u4efb\u52a1\ntask = asyncio.create_task(coro)\n</code></pre> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5355\u884c\u4e0a\u7684\u590d\u5408\u8bed\u53e5\u6765\u5b9e\u73b0\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u4ece\u534f\u7a0b\u521b\u5efa\u4efb\u52a1\ntask = asyncio.create_task(task_coroutine())\n</code></pre> <p>\u8fd9\u5c06\u505a\u4e00\u4e9b\u4e8b\u60c5\uff1a</p> <ol> <li>\u5c06\u534f\u7a0b\u5305\u88c5\u5728 Task \u5b9e\u4f8b\u4e2d\u3002</li> <li>\u5b89\u6392\u4efb\u52a1\u5728\u5f53\u524d\u4e8b\u4ef6\u5faa\u73af\u4e2d\u6267\u884c\u3002</li> <li>\u8fd4\u56de\u4e00\u4e2a\u4efb\u52a1\u5b9e\u4f8b</li> </ol> <p>\u4efb\u52a1\u5b9e\u4f8b\u53ef\u4ee5\u88ab\u4e22\u5f03\uff0c\u901a\u8fc7\u65b9\u6cd5\u8fdb\u884c\u4ea4\u4e92\uff0c\u5e76\u7531\u534f\u7a0b\u7b49\u5f85\u3002</p> <p>\u8fd9\u662f\u4ece asyncio \u7a0b\u5e8f\u4e2d\u7684\u534f\u7a0b\u521b\u5efa\u4efb\u52a1\u7684\u9996\u9009\u65b9\u6cd5\u3002</p> <p>A task can be created using the asyncio.create_task() function.</p> <p>The asyncio.create_task() function takes a coroutine instance and an optional name for the task and returns an asyncio.Task instance.</p> <p>For example:</p> <pre><code>...\n# create a coroutine\ncoro = task_coroutine()\n# create a task from a coroutine\ntask = asyncio.create_task(coro)\n</code></pre> <p>This can be achieved with a compound statement on a single line.</p> <p>For example:</p> <pre><code>...\n# create a task from a coroutine\ntask = asyncio.create_task(task_coroutine())\n</code></pre> <p>This will do a few things:</p> <ol> <li>Wrap the coroutine in a Task instance.</li> <li>Schedule the task for execution in the current event loop.</li> <li>Return a Task instance</li> </ol> <p>The task instance can be discarded, interacted with via methods, and awaited by a coroutine.</p> <p>This is the preferred way to create a Task from a coroutine in an asyncio program.</p>"},{"location":"asyncio/en/c7/#722-\u4f7f\u7528\u4f4e\u7ea7-api-\u521b\u5efa\u4efb\u52a1","title":"7.2.2 \u4f7f\u7528\u4f4e\u7ea7 API \u521b\u5efa\u4efb\u52a1","text":"<p>7.2.2 Create Task With Low-Level API</p> \u4e2d\u6587\u82f1\u6587 <p>\u8fd8\u53ef\u4ee5\u4f7f\u7528\u8f83\u4f4e\u7ea7\u522b\u7684 asyncio API \u4ece\u534f\u7a0b\u521b\u5efa\u4efb\u52a1\u3002</p> <p>\u7b2c\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 asyncio.ensure_future() \u51fd\u6570\u3002</p> <p>\u6b64\u51fd\u6570\u91c7\u7528 Task\u3001Future \u6216 Future-like \u5bf9\u8c61\uff0c\u4f8b\u5982\u534f\u7a0b\uff0c\u4ee5\u53ca\uff08\u53ef\u9009\uff09\u7528\u4e8e\u8c03\u5ea6\u5b83\u7684\u5faa\u73af\u3002</p> <p>\u5982\u679c\u6ca1\u6709\u63d0\u4f9b\u5faa\u73af\uff0c\u5b83\u5c06\u88ab\u5b89\u6392\u5728\u5f53\u524d\u7684\u4e8b\u4ef6\u5faa\u73af\u4e2d\u3002</p> <p>\u5982\u679c\u4e3a\u8be5\u51fd\u6570\u63d0\u4f9b\u4e86\u4e00\u4e2a\u534f\u7a0b\uff0c\u5b83\u5c06\u88ab\u5305\u88c5\u5728\u4e00\u4e2a Task \u5b9e\u4f8b\u4e2d\u5e76\u8fd4\u56de\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u521b\u5efa\u5e76\u5b89\u6392\u4efb\u52a1\ntask = asyncio.ensure_future(task_coroutine())\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u7528\u6765\u521b\u5efa\u548c\u8c03\u5ea6\u4efb\u52a1\u7684\u53e6\u4e00\u4e2a\u4f4e\u7ea7\u51fd\u6570\u662f [loop.create_task()](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_task\u65b9\u6cd5\u3002</p> <p>\u6b64\u51fd\u6570\u9700\u8981\u8bbf\u95ee\u7279\u5b9a\u7684\u4e8b\u4ef6\u5faa\u73af\uff0c\u5728\u5176\u4e2d\u5c06\u534f\u7a0b\u4f5c\u4e3a\u4efb\u52a1\u6267\u884c\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 asyncio.get_event_loop() \u51fd\u6570\u83b7\u53d6 asyncio \u7a0b\u5e8f\u4e2d\u5f53\u524d\u4e8b\u4ef6\u5faa\u73af\u7684\u5b9e\u4f8b\u3002</p> <p>\u7136\u540e\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u8c03\u7528 create_task() \u65b9\u6cd5\u6765\u521b\u5efa Task \u5b9e\u4f8b\u5e76\u5b89\u6392\u5176\u6267\u884c\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u83b7\u53d6\u5f53\u524d\u4e8b\u4ef6\u5faa\u73af\nloop = asyncio.get_event_loop()\n# \u521b\u5efa\u5e76\u5b89\u6392\u4efb\u52a1\ntask = loop.create_task(task_coroutine())\n</code></pre> <p>A task can also be created from a coroutine using the lower-level asyncio API.</p> <p>The first way is to use the asyncio.ensure_future() function.</p> <p>This function takes a Task, Future, or Future-like object, such as a coroutine, and optionally the loop in which to schedule it.</p> <p>If a loop is not provided, it will be scheduled in the current event loop.</p> <p>If a coroutine is provided to this function, it is wrapped in a Task instance for us, which is returned.</p> <p>For example:</p> <pre><code>...\n# create and schedule the task\ntask = asyncio.ensure_future(task_coroutine())\n</code></pre> <p>Another low-level function that we can use to create and schedule a Task is the loop.create_task() method.</p> <p>This function requires access to a specific event loop in which to execute the coroutine as a task.</p> <p>We can acquire an instance to the current event loop within an asyncio program via the asyncio.get_event_loop() function.</p> <p>This can then be used to call the create_task() method to create a Task instance and schedule it for execution.</p> <p>For example:</p> <pre><code>...\n# get the current event loop\nloop = asyncio.get_event_loop()\n# create and schedule the task\ntask = loop.create_task(task_coroutine())\n</code></pre>"},{"location":"asyncio/en/c7/#73-\u4f55\u65f6\u8fd0\u884c\u4efb\u52a1","title":"7.3 \u4f55\u65f6\u8fd0\u884c\u4efb\u52a1\uff1f","text":"<p>7.3 When Does a Task Run?</p> \u4e2d\u6587\u82f1\u6587 <p>\u521b\u5efa\u4efb\u52a1\u540e\u7684\u4e00\u4e2a\u5e38\u89c1\u95ee\u9898\u662f\u5b83\u4f55\u65f6\u8fd0\u884c\uff1f</p> <p>\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u95ee\u9898\u3002</p> <p>\u867d\u7136\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 create_task() \u51fd\u6570\u5b89\u6392\u534f\u7a0b\u4f5c\u4e3a\u4efb\u52a1\u72ec\u7acb\u8fd0\u884c\uff0c\u4f46\u5b83\u53ef\u80fd\u4e0d\u4f1a\u7acb\u5373\u8fd0\u884c\u3002</p> <p>\u4e8b\u5b9e\u4e0a\uff0c\u76f4\u5230\u4e8b\u4ef6\u5faa\u73af\u6709\u673a\u4f1a\u8fd0\u884c\u65f6\uff0c\u4efb\u52a1\u624d\u4f1a\u6267\u884c\u3002</p> <p>\u76f4\u5230\u6240\u6709\u5176\u4ed6\u534f\u7a0b\u90fd\u6ca1\u6709\u8fd0\u884c\u5e76\u4e14\u8f6e\u5230\u4efb\u52a1\u8fd0\u884c\u65f6\uff0c\u624d\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u3002</p> <p>\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u6709\u4e00\u4e2a asyncio \u7a0b\u5e8f\uff0c\u5176\u4e2d\u4e00\u4e2a\u534f\u7a0b\u521b\u5efa\u5e76\u8ba1\u5212\u4e86\u4e00\u9879\u4efb\u52a1\uff0c\u5219\u8ba1\u5212\u7684\u4efb\u52a1\u5c06\u4e0d\u4f1a\u8fd0\u884c\uff0c\u76f4\u5230\u521b\u5efa\u8be5\u4efb\u52a1\u7684\u8c03\u7528\u534f\u7a0b\u88ab\u6302\u8d77\u3002</p> <p>\u5982\u679c\u8c03\u7528\u534f\u7a0b\u9009\u62e9\u4f11\u7720\u3001\u9009\u62e9\u7b49\u5f85\u53e6\u4e00\u4e2a\u534f\u7a0b\u6216\u4efb\u52a1\u3001\u6216\u8005\u9009\u62e9\u7b49\u5f85\u5df2\u5b89\u6392\u7684\u65b0\u4efb\u52a1\uff0c\u5219\u53ef\u80fd\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u4ece\u534f\u7a0b\u521b\u5efa\u4efb\u52a1\ntask = asyncio.create_task(task_coroutine())\n# \u7b49\u5f85\u4efb\u52a1\uff0c\u5141\u8bb8\u5176\u8fd0\u884c\nawait task\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173\u5982\u4f55\u521b\u5efa\u5f02\u6b65\u4efb\u52a1\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>\u5982\u4f55\u5728 Python \u4e2d\u521b\u5efa\u5f02\u6b65\u4efb\u52a1</li> </ul> <p>\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4ec0\u4e48\u662f\u4efb\u52a1\u4ee5\u53ca\u5982\u4f55\u5b89\u6392\u5b83\u4eec\uff0c\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u5728\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u5b83\u4eec\u3002</p> <p>A common question after creating a task is when does it run?</p> <p>This is a good question.</p> <p>Although we can schedule a coroutine to run independently as a task with the create_task() function, it may not run immediately.</p> <p>In fact, the task will not execute until the event loop has an opportunity to run.</p> <p>This will not happen until all other coroutines are not running and it is the task\u2019s turn to run.</p> <p>For example, if we had an asyncio program with one coroutine that created and scheduled a task, the scheduled task will not run until the calling coroutine that created the task is suspended.</p> <p>This may happen if the calling coroutine chooses to sleep, chooses to await another coroutine or task, or chooses to await the new task that was scheduled.</p> <p>For example:</p> <pre><code>...\n# create a task from a coroutine\ntask = asyncio.create_task(task_coroutine())\n# await the task, allowing it to run\nawait task\n</code></pre> <p>You can learn more about how to create asyncio tasks in the tutorial:</p> <ul> <li>How to Create Asyncio Tasks in Python</li> </ul> <p>Now that we know what a task is and how to schedule them, next, let\u2019s look at how we may use them in our programs.</p>"},{"location":"asyncio/en/c8/","title":"8. \u4f7f\u7528\u548c\u67e5\u8be2\u4efb\u52a1","text":"<p>8. Work With and Query Tasks</p> \u4e2d\u6587\u82f1\u6587 <p>\u4efb\u52a1\u662f asyncio \u7a0b\u5e8f\u7684\u8d27\u5e01\u3002</p> <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u4ed4\u7ec6\u7814\u7a76\u5982\u4f55\u5728\u7a0b\u5e8f\u4e2d\u4e0e\u5b83\u4eec\u4ea4\u4e92\u3002</p> <p>Tasks are the currency of asyncio programs.</p> <p>In this section, we will take a closer look at how to interact with them in our programs.</p>"},{"location":"asyncio/en/c8/#81-\u4efb\u52a1\u7684\u751f\u547d\u5468\u671f","title":"8.1 \u4efb\u52a1\u7684\u751f\u547d\u5468\u671f","text":"<p>8.1 Task Life-Cycle</p> \u4e2d\u6587\u82f1\u6587 <p>\u5f02\u6b65\u4efb\u52a1\u6709\u751f\u547d\u5468\u671f\u3002</p> <p>\u9996\u5148\uff0c\u4ece\u534f\u7a0b\u521b\u5efa\u4efb\u52a1\u3002</p> <p>\u7136\u540e\u5b83\u88ab\u5b89\u6392\u5728\u4e8b\u4ef6\u5faa\u73af\u5185\u72ec\u7acb\u6267\u884c\u3002</p> <p>\u5728\u67d0\u4e2a\u65f6\u523b\uff0c\u5b83\u4f1a\u8fd0\u884c\u3002</p> <p>\u8fd0\u884c\u65f6\u5b83\u53ef\u80fd\u4f1a\u88ab\u6302\u8d77\uff0c\u4f8b\u5982\u7b49\u5f85\u53e6\u4e00\u4e2a\u534f\u7a0b\u6216\u4efb\u52a1\u3002 \u5b83\u53ef\u80fd\u6b63\u5e38\u5b8c\u6210\u5e76\u8fd4\u56de\u7ed3\u679c\uff0c\u4e5f\u53ef\u80fd\u56e0\u5f02\u5e38\u800c\u5931\u8d25\u3002</p> <p>\u53e6\u4e00\u4e2a\u534f\u7a0b\u53ef\u80fd\u4f1a\u5e72\u9884\u5e76\u53d6\u6d88\u4efb\u52a1\u3002</p> <p>\u6700\u7ec8\uff0c\u5b83\u4f1a\u5b8c\u6210\uff0c\u5e76\u4e14\u65e0\u6cd5\u518d\u6b21\u6267\u884c\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u751f\u547d\u5468\u671f\u603b\u7ed3\u5982\u4e0b\uff1a</p> <ol> <li>\u88ab\u521b\u5efa</li> <li>\u88ab\u8c03\u5ea6<ol> <li>\u88ab\u53d6\u6d88</li> </ol> </li> <li>\u6267\u884c<ol> <li>\u6302\u8d77</li> <li>\u6267\u884c\u7ed3\u679c</li> <li>\u53d1\u751f\u5f02\u5e38</li> <li>\u88ab\u53d6\u6d88</li> </ol> </li> <li>\u6267\u884c\u5b8c\u6bd5</li> </ol> <p>\u8bf7\u6ce8\u610f\uff0c\u6682\u505c\u3001\u7ed3\u679c\u3001\u5f02\u5e38\u548c\u53d6\u6d88\u672c\u8eab\u5e76\u4e0d\u662f\u72b6\u6001\uff0c\u5b83\u4eec\u662f\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u7684\u91cd\u8981\u8f6c\u6362\u70b9\u3002</p> <p>\u4e0b\u56fe\u603b\u7ed3\u4e86\u8fd9\u4e2a\u751f\u547d\u5468\u671f\uff0c\u663e\u793a\u4e86\u6bcf\u4e2a\u9636\u6bb5\u4e4b\u95f4\u7684\u8f6c\u6362\u3002</p> <p></p> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173 asyncio \u4efb\u52a1\u751f\u547d\u5468\u671f\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>Asyncio \u4efb\u52a1\u751f\u547d\u5468\u671f</li> </ul> <p>\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u4ece\u9ad8\u5c42\u6b21\u4e0a\u719f\u6089\u4e86\u4efb\u52a1\u7684\u751f\u547d\u5468\u671f\uff0c\u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b\u6bcf\u4e2a\u9636\u6bb5\u3002</p> <p>An asyncio Task has a life cycle.</p> <p>Firstly, a task is created from a coroutine.</p> <p>It is then scheduled for independent execution within the event loop.</p> <p>At some point, it will run.</p> <p>While running it may be suspended, such as awaiting another coroutine or task. It may finish normally and return a result or fail with an exception.</p> <p>Another coroutine may intervene and cancel the task.</p> <p>Eventually, it will be done and cannot be executed again.</p> <p>We can summarize this life-cycle as follows:</p> <ol> <li>Created</li> <li>Scheduled<ol> <li>Canceled</li> </ol> </li> <li>Running<ol> <li>Suspended</li> <li>Result</li> <li>Exception</li> <li>Canceled</li> </ol> </li> <li>Done</li> </ol> <p>Note that Suspended, Result, Exception, and Canceled are not states per se, they are important points of transition for a running task.</p> <p>The diagram below summarizes this life cycle showing the transitions between each phase.</p> <p></p> <p>You can learn more about the asyncio task life-cycle in the tutorial:</p> <ul> <li>Asyncio Task Life-Cycle</li> </ul> <p>Now that we are familiar with the life cycle of a task from a high level, let\u2019s take a closer look at each phase.</p>"},{"location":"asyncio/en/c8/#82-\u5982\u4f55\u68c0\u67e5\u4efb\u52a1\u7684\u72b6\u6001","title":"8.2 \u5982\u4f55\u68c0\u67e5\u4efb\u52a1\u7684\u72b6\u6001","text":"<p>8.2 How to Check Task Status</p> \u4e2d\u6587\u82f1\u6587 <p>\u521b\u5efa\u4efb\u52a1\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u770b\u4efb\u52a1\u7684\u72b6\u6001\u3002</p> <p>\u6211\u4eec\u53ef\u80fd\u60f3\u8981\u68c0\u67e5\u4e24\u79cd\u72b6\u6001\uff0c\u5b83\u4eec\u662f\uff1a</p> <ul> <li>\u4efb\u52a1\u662f\u5426\u5b8c\u6210\u3002</li> <li>\u4efb\u52a1\u662f\u5426\u88ab\u53d6\u6d88\u3002</li> </ul> <p>\u8ba9\u6211\u4eec\u4f9d\u6b21\u4ed4\u7ec6\u770b\u770b\u6bcf\u4e00\u4e2a\u3002</p> <p>After a Task is created, we can check the status of the task.</p> <p>There are two statuses we might want to check, they are:</p> <ul> <li>Whether the task is done.</li> <li>Whether the task was canceled.</li> </ul> <p>Let\u2019s take a closer look at each in turn.</p>"},{"location":"asyncio/en/c8/#821-\u68c0\u67e5\u4efb\u52a1\u662f\u5426\u5b8c\u6210","title":"8.2.1 \u68c0\u67e5\u4efb\u52a1\u662f\u5426\u5b8c\u6210","text":"<p>8.2.1 Check if a Task is Done</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 done() \u65b9\u6cd5\u68c0\u67e5\u4efb\u52a1\u662f\u5426\u5b8c\u6210\u3002</p> <p>\u5982\u679c\u4efb\u52a1\u5b8c\u6210\uff0c\u8be5\u65b9\u6cd5\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u68c0\u67e5\u4efb\u52a1\u662f\u5426\u5b8c\u6210\nif task.done():\n    # ...\n</code></pre> <p>\u5982\u679c\u4efb\u52a1\u66fe\u7ecf\u6709\u673a\u4f1a\u8fd0\u884c\u4f46\u73b0\u5728\u4e0d\u518d\u8fd0\u884c\uff0c\u5219\u8be5\u4efb\u52a1\u5df2\u5b8c\u6210\u3002</p> <p>\u5df2\u5b89\u6392\u7684\u4efb\u52a1\u672a\u5b8c\u6210\u3002</p> <p>\u540c\u6837\uff0c\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u4e5f\u6ca1\u6709\u5b8c\u6210\u3002</p> <p>\u5982\u679c\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff0c\u5219\u4efb\u52a1\u5df2\u5b8c\u6210\uff1a</p> <ul> <li>\u534f\u7a0b\u6b63\u5e38\u7ed3\u675f\u3002</li> <li>\u534f\u7a0b\u663e\u5f0f\u8fd4\u56de\u3002</li> <li>\u534f\u7a0b\u4e2d\u51fa\u73b0\u610f\u5916\u9519\u8bef\u6216\u5f02\u5e38</li> <li>\u4efb\u52a1\u88ab\u53d6\u6d88\u3002</li> </ul> <p>We can check if a task is done via the done() method.</p> <p>The method returns True if the task is done, or False otherwise.</p> <p>For example:</p> <pre><code>...\n# check if a task is done\nif task.done():\n    # ...\n</code></pre> <p>A task is done if it has had the opportunity to run and is now no longer running.</p> <p>A task that has been scheduled is not done.</p> <p>Similarly, a task that is running is not done.</p> <p>A task is done if:</p> <ul> <li>The coroutine finishes normally.</li> <li>The coroutine returns explicitly.</li> <li>An unexpected error or exception is raised in the coroutine</li> <li>The task is canceled.</li> </ul>"},{"location":"asyncio/en/c8/#822-\u68c0\u67e5\u4efb\u52a1\u662f\u5426\u88ab\u53d6\u6d88","title":"8.2.2 \u68c0\u67e5\u4efb\u52a1\u662f\u5426\u88ab\u53d6\u6d88","text":"<p>8.2.2 Check if a Task is Canceled</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 cancelled() \u65b9\u6cd5\u68c0\u67e5\u4efb\u52a1\u662f\u5426\u88ab\u53d6\u6d88\u3002</p> <p>\u5982\u679c\u4efb\u52a1\u88ab\u53d6\u6d88\uff0c\u8be5\u65b9\u6cd5\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u68c0\u67e5\u4efb\u52a1\u662f\u5426\u88ab\u53d6\u6d88\nif task.cancelled():\n    # ...\n</code></pre> <p>\u5982\u679c\u5bf9\u4efb\u52a1\u8c03\u7528 cancel() \u65b9\u6cd5\u5e76\u6210\u529f\u5b8c\u6210\uff0c\u5219\u4efb\u52a1\u5c06\u88ab\u53d6\u6d88\uff0c\u4f8b\u5982 cancel() \u8fd4\u56de True\u3002</p> <p>\u5982\u679c\u672a\u8c03\u7528 cancel() \u65b9\u6cd5\uff0c\u6216\u8005\u8c03\u7528 cancel() \u65b9\u6cd5\u4f46\u53d6\u6d88\u4efb\u52a1\u5931\u8d25\uff0c\u5219\u4e0d\u4f1a\u53d6\u6d88\u4efb\u52a1\u3002</p> <p>We can check if a task is canceled via the cancelled() method.</p> <p>The method returns True if the task was canceled, or False otherwise.</p> <p>For example:</p> <pre><code>...\n# check if a task was canceled\nif task.cancelled():\n    # ...\n</code></pre> <p>A task is canceled if the cancel() method was called on the task and completed successfully, e..g cancel() returned True.</p> <p>A task is not canceled if the cancel() method was not called, or if the cancel() method was called but failed to cancel the task.</p>"},{"location":"asyncio/en/c8/#83-\u5982\u4f55\u83b7\u53d6\u4efb\u52a1\u7ed3\u679c","title":"8.3 \u5982\u4f55\u83b7\u53d6\u4efb\u52a1\u7ed3\u679c","text":"<p>8.3 How to Get Task Result</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 result() \u65b9\u6cd5\u83b7\u53d6\u4efb\u52a1\u7684\u7ed3\u679c\u3002</p> <p>\u8fd9\u5c06\u8fd4\u56de\u7531 Task \u5305\u88c5\u7684\u534f\u7a0b\u7684\u8fd4\u56de\u503c\uff0c\u5982\u679c\u5305\u88c5\u7684\u534f\u7a0b\u672a\u663e\u5f0f\u8fd4\u56de\u503c\uff0c\u5219\u8fd4\u56de None\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u4ece\u5305\u88c5\u7684\u534f\u7a0b\u4e2d\u83b7\u53d6\u8fd4\u56de\u503c\nvalue = task.result()\n</code></pre> <p>\u5982\u679c\u534f\u7a0b\u5f15\u53d1\u672a\u5904\u7406\u7684\u9519\u8bef\u6216\u5f02\u5e38\uff0c\u5219\u5728\u8c03\u7528 result() \u65b9\u6cd5\u65f6\u4f1a\u91cd\u65b0\u5f15\u53d1\uff0c\u5e76\u4e14\u53ef\u80fd\u9700\u8981\u5904\u7406\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\ntry:\n    # \u4ece\u5305\u88c5\u7684\u534f\u7a0b\u4e2d\u83b7\u53d6\u8fd4\u56de\u503c\n    value = task.result()\nexcept Exception:\n    # \u4efb\u52a1\u5931\u8d25\uff0c\u6ca1\u6709\u7ed3\u679c\n</code></pre> <p>\u5982\u679c\u4efb\u52a1\u88ab\u53d6\u6d88\uff0c\u5219\u5728\u8c03\u7528 result() \u65b9\u6cd5\u65f6\u4f1a\u5f15\u53d1 CancelledError \u5f02\u5e38\uff0c\u5e76\u4e14\u53ef\u80fd\u9700\u8981\u5904\u7406\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\ntry:\n    # \u4ece\u5305\u88c5\u7684\u534f\u7a0b\u4e2d\u83b7\u53d6\u8fd4\u56de\u503c\n    value = task.result()\nexcept asyncio.CancelledError:\n    # \u4efb\u52a1\u88ab\u53d6\u6d88\n</code></pre> <p>\u56e0\u6b64\uff0c\u6700\u597d\u5148\u68c0\u67e5\u4efb\u52a1\u662f\u5426\u88ab\u53d6\u6d88\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u68c0\u67e5\u4efb\u52a1\u662f\u5426\u672a\u88ab\u53d6\u6d88\nif not task.cancelled():\n    # \u4ece\u5305\u88c5\u7684\u534f\u7a0b\u4e2d\u83b7\u53d6\u8fd4\u56de\u503c\n    value = task.result()\nelse:\n    # \u4efb\u52a1\u88ab\u53d6\u6d88\n</code></pre> <p>\u5982\u679c\u4efb\u52a1\u5c1a\u672a\u5b8c\u6210\uff0c\u5219\u5728\u8c03\u7528 result() \u65b9\u6cd5\u65f6\u4f1a\u5f15\u53d1 InvalidStateError \u5f02\u5e38\uff0c\u5e76\u4e14\u53ef\u80fd\u9700\u8981\u5904\u7406\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\ntry:\n    # \u4ece\u5305\u88c5\u7684\u534f\u7a0b\u4e2d\u83b7\u53d6\u8fd4\u56de\u503c\n    value = task.result()\nexcept asyncio.InvalidStateError:\n    # \u4efb\u52a1\u5c1a\u672a\u5b8c\u6210\n</code></pre> <p>\u56e0\u6b64\uff0c\u6700\u597d\u5148\u68c0\u67e5\u4efb\u52a1\u662f\u5426\u5df2\u5b8c\u6210\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u68c0\u67e5\u4efb\u52a1\u662f\u5426\u672a\u5b8c\u6210\nif not task.done():\n    await task\n# \u4ece\u5305\u88c5\u7684\u534f\u7a0b\u4e2d\u83b7\u53d6\u8fd4\u56de\u503c\nvalue = task.result()\n</code></pre> <p>We can get the result of a task via the result() method.</p> <p>This returns the return value of the coroutine wrapped by the Task or None if the wrapped coroutine does not explicitly return a value.</p> <p>For example:</p> <pre><code>...\n# get the return value from the wrapped coroutine\nvalue = task.result()\n</code></pre> <p>If the coroutine raises an unhandled error or exception, it is re-raised when calling the result() method and may need to be handled.</p> <p>For example:</p> <pre><code>...\ntry:\n    # get the return value from the wrapped coroutine\n    value = task.result()\nexcept Exception:\n    # task failed and there is no result\n</code></pre> <p>If the task was canceled, then a CancelledError exception is raised when calling the result() method and may need to be handled.</p> <p>For example:</p> <pre><code>...\ntry:\n    # get the return value from the wrapped coroutine\n    value = task.result()\nexcept asyncio.CancelledError:\n    # task was canceled\n</code></pre> <p>As such, it is a good idea to check if the task was canceled first.</p> <p>For example:</p> <pre><code>...\n# check if the task was not canceled\nif not task.cancelled():\n    # get the return value from the wrapped coroutine\n    value = task.result()\nelse:\n    # task was canceled\n</code></pre> <p>If the task is not yet done, then an InvalidStateError exception is raised when calling the result() method and may need to be handled.</p> <p>For example:</p> <pre><code>...\ntry:\n    # get the return value from the wrapped coroutine\n    value = task.result()\nexcept asyncio.InvalidStateError:\n    # task is not yet done\n</code></pre> <p>As such, it is a good idea to check if the task is done first.</p> <p>For example:</p> <pre><code>...\n# check if the task is not done\nif not task.done():\n    await task\n# get the return value from the wrapped coroutine\nvalue = task.result()\n</code></pre>"},{"location":"asyncio/en/c8/#84-\u5982\u4f55\u83b7\u53d6\u4efb\u52a1\u5f02\u5e38","title":"8.4 \u5982\u4f55\u83b7\u53d6\u4efb\u52a1\u5f02\u5e38","text":"<p>8.4 How to Get Task Exception</p> \u4e2d\u6587\u82f1\u6587 <p>\u7531\u4efb\u52a1\u5305\u88c5\u7684\u534f\u7a0b\u53ef\u80fd\u4f1a\u5f15\u53d1\u672a\u5904\u7406\u7684\u5f02\u5e38\u3002</p> <p>\u5b9e\u9645\u4e0a\uff0c\u8fd9\u5c06\u53d6\u6d88\u4efb\u52a1\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 Exception()\u65b9\u6cd5\u5728\u4efb\u52a1\u5305\u88c5\u7684\u534f\u7a0b\u4e2d\u68c0\u7d22\u672a\u5904\u7406\u7684\u5f02\u5e38\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u83b7\u53d6\u4efb\u52a1\u5f15\u53d1\u7684\u5f02\u5e38\nexception = task.exception()\n</code></pre> <p>\u5982\u679c\u5305\u88c5\u7684\u534f\u7a0b\u4e2d\u672a\u5f15\u53d1\u672a\u5904\u7406\u7684\u5f02\u5e38\uff0c\u5219\u8fd4\u56de None \u503c\u3002</p> <p>\u5982\u679c\u4efb\u52a1\u88ab\u53d6\u6d88\uff0c\u5219\u8c03\u7528 Exception() \u65b9\u6cd5\u65f6\u4f1a\u5f15\u53d1 CancelledError \u5f02\u5e38\uff0c\u5e76\u4e14\u53ef\u80fd\u9700\u8981\u5904\u7406\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\ntry:\n    # \u83b7\u53d6\u4efb\u52a1\u5f15\u53d1\u7684\u5f02\u5e38\n    exception = task.exception()\nexcept asyncio.CancelledError:\n    # \u4efb\u52a1\u88ab\u53d6\u6d88\n</code></pre> <p>\u56e0\u6b64\uff0c\u6700\u597d\u5148\u68c0\u67e5\u4efb\u52a1\u662f\u5426\u88ab\u53d6\u6d88\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u68c0\u67e5\u4efb\u52a1\u662f\u5426\u672a\u88ab\u53d6\u6d88\nif not task.cancelled():\n    # \u83b7\u53d6\u4efb\u52a1\u5f15\u53d1\u7684\u5f02\u5e38\n    exception = task.exception()\nelse:\n    # \u4efb\u52a1\u88ab\u53d6\u6d88\n</code></pre> <p>\u5982\u679c\u4efb\u52a1\u5c1a\u672a\u5b8c\u6210\uff0c\u5219\u5728\u8c03\u7528 exception() \u65b9\u6cd5\u65f6\u4f1a\u5f15\u53d1 InvalidStateError \u5f02\u5e38\uff0c\u5e76\u4e14\u53ef\u80fd\u9700\u8981\u8fdb\u884c\u5904\u7406\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\ntry:\n    # \u83b7\u53d6\u4efb\u52a1\u5f15\u53d1\u7684\u5f02\u5e38\n    exception = task.exception()\nexcept asyncio.InvalidStateError:\n    # \u4efb\u52a1\u5c1a\u672a\u5b8c\u6210\n</code></pre> <p>\u56e0\u6b64\uff0c\u6700\u597d\u5148\u68c0\u67e5\u4efb\u52a1\u662f\u5426\u5df2\u5b8c\u6210\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u68c0\u67e5\u4efb\u52a1\u662f\u5426\u672a\u5b8c\u6210\nif not task.done():\n    await task\n# \u83b7\u53d6\u4efb\u52a1\u5f15\u53d1\u7684\u5f02\u5e38\nexception = task.exception()\n</code></pre> <p>A coroutine wrapped by a task may raise an exception that is not handled.</p> <p>This will cancel the task, in effect.</p> <p>We can retrieve an unhandled exception in the coroutine wrapped by a task via the exception() method.</p> <p>For example:</p> <pre><code>...\n# get the exception raised by a task\nexception = task.exception()\n</code></pre> <p>If an unhandled exception was not raised in the wrapped coroutine, then a value of None is returned.</p> <p>If the task was canceled, then a CancelledError exception is raised when calling the exception() method and may need to be handled.</p> <p>For example:</p> <pre><code>...\ntry:\n    # get the exception raised by a task\n    exception = task.exception()\nexcept asyncio.CancelledError:\n    # task was canceled\n</code></pre> <p>As such, it is a good idea to check if the task was canceled first.</p> <p>For example:</p> <pre><code>...\n# check if the task was not canceled\nif not task.cancelled():\n    # get the exception raised by a task\n    exception = task.exception()\nelse:\n    # task was canceled\n</code></pre> <p>If the task is not yet done, then an InvalidStateError exception is raised when calling the exception() method and may need to be handled.</p> <p>For example:</p> <pre><code>...\ntry:\n    # get the exception raised by a task\n    exception = task.exception()\nexcept asyncio.InvalidStateError:\n    # task is not yet done\n</code></pre> <p>As such, it is a good idea to check if the task is done first.</p> <p>For example:</p> <pre><code>...\n# check if the task is not done\nif not task.done():\n    await task\n# get the exception raised by a task\nexception = task.exception()\n</code></pre>"},{"location":"asyncio/en/c8/#85-\u5982\u4f55\u53d6\u6d88\u4efb\u52a1","title":"8.5 \u5982\u4f55\u53d6\u6d88\u4efb\u52a1","text":"<p>8.5 How to Cancel a Task</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 cancel() \u65b9\u6cd5\u53d6\u6d88\u8ba1\u5212\u4efb\u52a1\u3002</p> <p>\u5982\u679c\u4efb\u52a1\u88ab\u53d6\u6d88\uff0c\u5219\u53d6\u6d88\u65b9\u6cd5\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u53d6\u6d88\u4efb\u52a1\nwas_cancelled = task.cancel()\n</code></pre> <p>\u5982\u679c\u4efb\u52a1\u5df2\u7ecf\u5b8c\u6210\uff0c\u5219\u65e0\u6cd5\u53d6\u6d88\uff0ccancel()\u65b9\u6cd5\u5c06\u8fd4\u56deFalse\uff0c\u5e76\u4e14\u4efb\u52a1\u4e0d\u4f1a\u5904\u4e8e\u5df2\u53d6\u6d88\u72b6\u6001\u3002</p> <p>\u4e0b\u6b21\u4efb\u52a1\u6709\u673a\u4f1a\u8fd0\u884c\u65f6\uff0c\u5b83\u5c06\u5f15\u53d1 CancelledError \u5f02\u5e38\u3002</p> <p>\u5982\u679c\u5728\u5305\u88c5\u7684\u534f\u7a0b\u4e2d\u672a\u5904\u7406 CancelledError \u5f02\u5e38\uff0c\u5219\u4efb\u52a1\u5c06\u88ab\u53d6\u6d88\u3002</p> <p>\u5426\u5219\uff0c\u5982\u679c\u5728\u5305\u88c5\u7684\u534f\u7a0b\u4e2d\u5904\u7406 CancelledError \u5f02\u5e38\uff0c\u5219\u4efb\u52a1\u5c06\u4e0d\u4f1a\u88ab\u53d6\u6d88\u3002</p> <p>cancel() \u65b9\u6cd5\u8fd8\u53ef\u4ee5\u91c7\u7528\u6d88\u606f\u53c2\u6570\uff0c\u8be5\u53c2\u6570\u5c06\u5728 CancelledError \u7684\u5185\u5bb9\u4e2d\u4f7f\u7528\u3002</p> <p>We can cancel a scheduled task via the cancel() method.</p> <p>The cancel method returns True if the task was canceled, or False otherwise.</p> <p>For example:</p> <pre><code>...\n# cancel the task\nwas_cancelled = task.cancel()\n</code></pre> <p>If the task is already done, it cannot be canceled and the cancel() method will return False and the task will not have the status of canceled.</p> <p>The next time the task is given an opportunity to run, it will raise a CancelledError exception.</p> <p>If the CancelledError exception is not handled within the wrapped coroutine, the task will be canceled.</p> <p>Otherwise, if the CancelledError exception is handled within the wrapped coroutine, the task will not be canceled.</p> <p>The cancel() method can also take a message argument which will be used in the content of the CancelledError.</p>"},{"location":"asyncio/en/c8/#86-\u5982\u4f55\u5728\u4efb\u52a1\u4e2d\u4f7f\u7528\u56de\u8c03","title":"8.6 \u5982\u4f55\u5728\u4efb\u52a1\u4e2d\u4f7f\u7528\u56de\u8c03","text":"<p>8.6 How to Use Callback With a Task</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 add_done_callback() \u65b9\u6cd5\u5411\u4efb\u52a1\u6dfb\u52a0\u5b8c\u6210\u56de\u8c03\u51fd\u6570\u3002</p> <p>\u6b64\u65b9\u6cd5\u91c7\u7528\u4efb\u52a1\u5b8c\u6210\u65f6\u8981\u8c03\u7528\u7684\u51fd\u6570\u7684\u540d\u79f0\u3002</p> <p>\u56de\u8c03\u51fd\u6570\u5fc5\u987b\u5c06 Task \u5b9e\u4f8b\u4f5c\u4e3a\u53c2\u6570\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code># \u5b8c\u6210\u56de\u8c03\u51fd\u6570\ndef handle(task):\n    print(task)\n\n...\n# \u6ce8\u518c\u5b8c\u6210\u56de\u8c03\u51fd\u6570\ntask.add_done_callback(handle)\n</code></pre> <p>\u56de\u60f3\u4e00\u4e0b\uff0c\u5f53\u5305\u88c5\u7684\u534f\u7a0b\u6b63\u5e38\u5b8c\u6210\u3001\u8fd4\u56de\u3001\u5f15\u53d1\u672a\u5904\u7406\u7684\u5f02\u5e38\u6216\u53d6\u6d88\u4efb\u52a1\u65f6\uff0c\u4efb\u52a1\u5c31\u53ef\u4ee5\u5b8c\u6210\u3002</p> <p>add_done_callback() \u65b9\u6cd5\u53ef\u7528\u4e8e\u6dfb\u52a0\u6216\u6ce8\u518c\u4efb\u610f\u6570\u91cf\u7684\u5b8c\u6210\u56de\u8c03\u51fd\u6570\u3002</p> <p>\u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7 remove_done_callback() \u51fd\u6570\u5220\u9664\u6216\u53d6\u6d88\u6ce8\u518c\u56de\u8c03\u51fd\u6570 \u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u5220\u9664\u5df2\u5b8c\u6210\u7684\u56de\u8c03\u51fd\u6570\ntask.remove_done_callback(handle)\n</code></pre> <p>We can add a done callback function to a task via the add_done_callback() method.</p> <p>This method takes the name of a function to call when the task is done.</p> <p>The callback function must take the Task instance as an argument.</p> <p>For example:</p> <pre><code># done callback function\ndef handle(task):\n    print(task)\n\n...\n# register a done callback function\ntask.add_done_callback(handle)\n</code></pre> <p>Recall that a task may be done when the wrapped coroutine finishes normally when it returns, when an unhandled exception is raised or when the task is canceled.</p> <p>The add_done_callback() method can be used to add or register as many done callback functions as we like.</p> <p>We can also remove or de-register a callback function via the remove_done_callback() function.</p> <p>For example:</p> <pre><code>...\n# remove a done callback function\ntask.remove_done_callback(handle)\n</code></pre>"},{"location":"asyncio/en/c8/#87-\u5982\u4f55\u8bbe\u7f6e\u4efb\u52a1\u540d\u79f0","title":"8.7 \u5982\u4f55\u8bbe\u7f6e\u4efb\u52a1\u540d\u79f0","text":"<p>8.7 How to Set the Task Name</p> \u4e2d\u6587\u82f1\u6587 <p>\u4efb\u52a1\u53ef\u80fd\u6709\u4e00\u4e2a\u540d\u79f0\u3002</p> <p>\u5982\u679c\u4ece\u540c\u4e00\u4e2a\u534f\u7a0b\u521b\u5efa\u591a\u4e2a\u4efb\u52a1\u5e76\u4e14\u6211\u4eec\u9700\u8981\u67d0\u79cd\u65b9\u6cd5\u4ee5\u7f16\u7a0b\u65b9\u5f0f\u533a\u5206\u5b83\u4eec\uff0c\u90a3\u4e48\u8fd9\u4e2a\u540d\u79f0\u4f1a\u5f88\u6709\u5e2e\u52a9\u3002</p> <p>\u5f53\u4ece\u534f\u7a0b\u521b\u5efa\u4efb\u52a1\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 \u201cname\u201d \u53c2\u6570\u8bbe\u7f6e\u540d\u79f0\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u4ece\u534f\u7a0b\u521b\u5efa\u4efb\u52a1\ntask = asyncio.create_task(task_coroutine(), name='MyTask')\n</code></pre> <p>\u4efb\u52a1\u7684\u540d\u79f0\u4e5f\u53ef\u4ee5\u901a\u8fc7 set_name() \u65b9\u6cd5\u8bbe\u7f6e\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u8bbe\u7f6e\u4efb\u52a1\u540d\u79f0\ntask.set_name('MyTask')\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 get_name() \u65b9\u6cd5\u68c0\u7d22\u4efb\u52a1\u7684\u540d\u79f0\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u83b7\u53d6\u4efb\u52a1\u7684\u540d\u79f0\nname = task.get_name()\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173\u68c0\u67e5\u4efb\u52a1\u72b6\u6001\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>\u5982\u4f55\u68c0\u67e5 Asyncio \u4efb\u52a1\u72b6\u6001</li> </ul> <p>A task may have a name.</p> <p>This name can be helpful if multiple tasks are created from the same coroutine and we need some way to tell them apart programmatically.</p> <p>The name can be set when the task is created from a coroutine via the \u201cname\u201d argument.</p> <p>For example:</p> <pre><code>...\n# create a task from a coroutine\ntask = asyncio.create_task(task_coroutine(), name='MyTask')\n</code></pre> <p>The name for the task can also be set via the set_name() method.</p> <p>For example:</p> <pre><code>...\n# set the name of the task\ntask.set_name('MyTask')\n</code></pre> <p>We can retrieve the name of a task via the get_name() method.</p> <p>For example:</p> <pre><code>...\n# get the name of a task\nname = task.get_name()\n</code></pre> <p>You can learn more about checking the status of tasks in the tutorial:</p> <ul> <li>How to Check Asyncio Task Status</li> </ul>"},{"location":"asyncio/en/c9/","title":"9. \u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1","text":"<p>9. Current and Running Tasks</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u5185\u7701\u5728 asyncio \u4e8b\u4ef6\u5faa\u73af\u4e2d\u8fd0\u884c\u7684\u4efb\u52a1\u3002</p> <p>\u8fd9\u53ef\u4ee5\u901a\u8fc7\u83b7\u53d6\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u548c\u6240\u6709\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u7684 asyncio.Task \u5bf9\u8c61\u6765\u5b9e\u73b0\u3002</p> <p>We can introspect tasks running in the asyncio event loop.</p> <p>This can be achieved by getting an asyncio.Task object for the currently running task and for all tasks that are running.</p>"},{"location":"asyncio/en/c9/#91-\u5982\u4f55\u83b7\u53d6\u5f53\u524d\u4efb\u52a1","title":"9.1 \u5982\u4f55\u83b7\u53d6\u5f53\u524d\u4efb\u52a1","text":"<p>9.1 How to Get the Current Task</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 asyncio.current_task() \u51fd\u6570\u83b7\u53d6\u5f53\u524d\u4efb\u52a1\u3002</p> <p>\u6b64\u51fd\u6570\u5c06\u4e3a\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u8fd4\u56de\u4e00\u4e2a Task \u5bf9\u8c61\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u83b7\u53d6\u5f53\u524d\u4efb\u52a1\ntask = asyncio.current_task()\n</code></pre> <p>\u8fd9\u5c06\u4e3a\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u8fd4\u56de\u4e00\u4e2a Task \u5bf9\u8c61\u3002</p> <p>\u8fd9\u53ef\u80fd\u662f\uff1a</p> <ul> <li>\u4e3b\u534f\u7a0b\u4f20\u9012\u7ed9 asyncio.run()\u3002</li> <li>\u901a\u8fc7 asyncio.create_task() \u5728 asyncio \u7a0b\u5e8f\u4e2d\u521b\u5efa\u548c\u8c03\u5ea6\u7684\u4efb\u52a1\u3002</li> </ul> <p>\u4efb\u52a1\u53ef\u4ee5\u521b\u5efa\u5e76\u8fd0\u884c\u53e6\u4e00\u4e2a\u534f\u7a0b\uff08\u4f8b\u5982\uff0c\u4e0d\u5305\u542b\u5728\u4efb\u52a1\u4e2d\uff09\u3002 \u4ece\u534f\u7a0b\u4e2d\u83b7\u53d6\u5f53\u524d\u4efb\u52a1\u5c06\u8fd4\u56de\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u7684 Task \u5bf9\u8c61\uff0c\u4f46\u4e0d\u662f\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u534f\u7a0b\u3002</p> <p>\u5982\u679c\u534f\u7a0b\u6216\u4efb\u52a1\u9700\u8981\u6709\u5173\u5176\u81ea\u8eab\u7684\u8be6\u7ec6\u4fe1\u606f\uff08\u4f8b\u5982\u7528\u4e8e\u8bb0\u5f55\u7684\u4efb\u52a1\u540d\u79f0\uff09\uff0c\u5219\u83b7\u53d6\u5f53\u524d\u4efb\u52a1\u4f1a\u5f88\u6709\u5e2e\u52a9\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u63a2\u7d22\u5982\u4f55\u4e3a\u7528\u4e8e\u542f\u52a8 asyncio \u7a0b\u5e8f\u7684\u4e3b\u534f\u7a0b\u83b7\u53d6 Task \u5b9e\u4f8b\u3002</p> <p>\u4e0b\u9762\u7684\u793a\u4f8b\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7528\u4f5c\u7a0b\u5e8f\u5165\u53e3\u70b9\u7684\u534f\u7a0b\u3002 \u5b83\u62a5\u544a\u4e00\u6761\u6d88\u606f\uff0c\u7136\u540e\u83b7\u53d6\u5f53\u524d\u4efb\u52a1\u5e76\u62a5\u544a\u5176\u8be6\u7ec6\u4fe1\u606f\u3002</p> <p>\u8fd9\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u7b2c\u4e00\u4e2a\u793a\u4f8b\uff0c\u56e0\u4e3a\u5b83\u5f3a\u8c03\u4e86\u6240\u6709\u534f\u7a0b\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u5f02\u6b65\u4e8b\u4ef6\u5faa\u73af\u4e2d\u7684\u4efb\u52a1\u8fdb\u884c\u8bbf\u95ee\u3002</p> <p>\u4e0b\u9762\u5217\u51fa\u4e86\u5b8c\u6574\u7684\u793a\u4f8b\u3002</p> <pre><code># SuperFastPython.com\n# \u4ece\u4e3b\u534f\u7a0b\u83b7\u53d6\u5f53\u524d\u4efb\u52a1\u7684\u793a\u4f8b\nimport asyncio\n\n# \u5b9a\u4e49\u4e00\u4e2a\u4e3b\u534f\u7a0b\nasync def main():\n    # \u62a5\u544a\u6d88\u606f\n    print('main coroutine started')\n    # \u83b7\u53d6\u5f53\u524d\u4efb\u52a1\n    task = asyncio.current_task()\n    # \u62a5\u544a\u5176\u8be6\u7ec6\u4fe1\u606f\n    print(task)\n\n# \u542f\u52a8\u5f02\u6b65\u7a0b\u5e8f\nasyncio.run(main())\n</code></pre> <p>\u8fd0\u884c\u8be5\u793a\u4f8b\u9996\u5148\u521b\u5efa\u4e3b\u534f\u7a0b\u5e76\u4f7f\u7528\u5b83\u6765\u542f\u52a8 asyncio \u7a0b\u5e8f\u3002</p> <p>main() \u534f\u7a0b\u8fd0\u884c\u5e76\u9996\u5148\u62a5\u544a\u4e00\u6761\u6d88\u606f\u3002</p> <p>\u7136\u540e\u5b83\u68c0\u7d22\u5f53\u524d\u4efb\u52a1\uff0c\u8fd9\u662f\u4e00\u4e2a\u4ee3\u8868\u5176\u81ea\u8eab\uff08\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u534f\u7a0b\uff09\u7684 Task \u5bf9\u8c61\u3002</p> <p>\u7136\u540e\u5b83\u62a5\u544a\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u7684\u8be6\u7ec6\u4fe1\u606f\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u8be5\u4efb\u52a1\u5177\u6709\u7b2c\u4e00\u4e2a\u4efb\u52a1\u7684\u9ed8\u8ba4\u540d\u79f0\u201cTask-1\u201d\uff0c\u5e76\u4e14\u6b63\u5728\u6267\u884c main() \u534f\u7a0b\uff0c\u5373\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u534f\u7a0b\u3002</p> <p>\u8fd9\u5f3a\u8c03\u4e86\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 asyncio.current_task() \u51fd\u6570\u6765\u8bbf\u95ee\u5f53\u524d\u8fd0\u884c\u7684\u534f\u7a0b\u7684 Task \u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u81ea\u52a8\u5305\u88c5\u5728 Task \u5bf9\u8c61\u4e2d\u3002</p> <pre><code>main coroutine started\n&lt;Task pending name='Task-1' coro=&lt;main() running at ...&gt; cb=[_run_until_complete_cb() at ...]&gt;\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5728\u6559\u7a0b\u4e2d\u4e86\u89e3\u6709\u5173\u83b7\u53d6\u5f53\u524d\u4efb\u52a1\u7684\u66f4\u591a\u4fe1\u606f\uff1a</p> <ul> <li>\u5982\u4f55\u5728 Python \u4e2d\u83b7\u53d6\u5f53\u524d\u7684 Asyncio \u4efb\u52a1</li> </ul> <p>We can get the current task via the asyncio.current_task() function.</p> <p>This function will return a Task object for the task that is currently running.</p> <p>For example:</p> <pre><code>...\n# get the current task\ntask = asyncio.current_task()\n</code></pre> <p>This will return a Task object for the currently running task.</p> <p>This may be:</p> <ul> <li>The main coroutine passed to asyncio.run().</li> <li>A task created and scheduled within the asyncio program via asyncio.create_task().</li> </ul> <p>A task may create and run another coroutine (e.g. not wrapped in a task). Getting the current task from within a coroutine will return a Task object for the running task, but not the coroutine that is currently running.</p> <p>Getting the current task can be helpful if a coroutine or task requires details about itself, such as the task name for logging.</p> <p>We can explore how to get a Task instance for the main coroutine used to start an asyncio program.</p> <p>The example below defines a coroutine used as the entry point into the program. It reports a message, then gets the current task and reports its details.</p> <p>This is an important first example, as it highlights that all coroutines can be accessed as tasks within the asyncio event loop.</p> <p>The complete example is listed below.</p> <pre><code># SuperFastPython.com\n# example of getting the current task from the main coroutine\nimport asyncio\n\n# define a main coroutine\nasync def main():\n    # report a message\n    print('main coroutine started')\n    # get the current task\n    task = asyncio.current_task()\n    # report its details\n    print(task)\n\n# start the asyncio program\nasyncio.run(main())\n</code></pre> <p>Running the example first creates the main coroutine and uses it to start the asyncio program.</p> <p>The main() coroutine runs and first reports a message.</p> <p>It then retrieves the current task, which is a Task object that represents itself, the currently running coroutine.</p> <p>It then reports the details of the currently running task.</p> <p>We can see that the task has the default name for the first task, \u2018Task-1\u2018 and is executing the main() coroutine, the currently running coroutine.</p> <p>This highlights that we can use the asyncio.current_task() function to access a Task object for the currently running coroutine, that is automatically wrapped in a Task object.</p> <pre><code>main coroutine started\n&lt;Task pending name='Task-1' coro=&lt;main() running at ...&gt; cb=[_run_until_complete_cb() at ...]&gt;\n</code></pre> <p>You can learn more about getting the current task in the tutorial:</p> <ul> <li>How to Get the Current Asyncio Task in Python</li> </ul>"},{"location":"asyncio/en/c9/#92-\u5982\u4f55\u83b7\u53d6\u6240\u6709\u4efb\u52a1","title":"9.2 \u5982\u4f55\u83b7\u53d6\u6240\u6709\u4efb\u52a1","text":"<p>9.2 How to Get All Tasks</p> \u4e2d\u6587\u82f1\u6587 <p>\u6211\u4eec\u53ef\u80fd\u9700\u8981\u8bbf\u95ee asyncio \u7a0b\u5e8f\u4e2d\u7684\u6240\u6709\u4efb\u52a1\u3002</p> <p>\u8fd9\u53ef\u80fd\u6709\u591a\u79cd\u539f\u56e0\uff0c\u4f8b\u5982\uff1a</p> <ul> <li>\u53cd\u601d\u7a0b\u5e8f\u7684\u5f53\u524d\u72b6\u6001\u6216\u590d\u6742\u6027\u3002</li> <li>\u8bb0\u5f55\u6240\u6709\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u7684\u8be6\u7ec6\u4fe1\u606f\u3002</li> <li>\u67e5\u627e\u53ef\u67e5\u8be2\u6216\u53d6\u6d88\u7684\u4efb\u52a1\u3002</li> </ul> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 asyncio.all_tasks() \u51fd\u6570\u83b7\u53d6 asyncio \u7a0b\u5e8f\u4e2d\u6240\u6709\u5df2\u8ba1\u5212\u548c\u6b63\u5728\u8fd0\u884c\uff08\u5c1a\u672a\u5b8c\u6210\uff09\u7684\u4efb\u52a1\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>...\n# \u83b7\u53d6\u6240\u6709\u4efb\u52a1\ntasks = asyncio.all_tasks()\n</code></pre> <p>\u8fd9\u5c06\u8fd4\u56de asyncio \u7a0b\u5e8f\u4e2d\u6240\u6709\u4efb\u52a1\u7684\u96c6\u5408\u3002</p> <p>\u5b83\u662f\u4e00\u4e2a\u96c6\u5408\uff0c\u56e0\u6b64\u6bcf\u4e2a\u4efb\u52a1\u4ec5\u4ee3\u8868\u4e00\u6b21\u3002</p> <p>\u5982\u679c\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff0c\u5219\u5c06\u5305\u542b\u4efb\u52a1\uff1a</p> <ul> <li>\u4efb\u52a1\u5df2\u5b89\u6392\u4f46\u5c1a\u672a\u8fd0\u884c\u3002</li> <li>\u4efb\u52a1\u5f53\u524d\u6b63\u5728\u8fd0\u884c\uff08\u4f8b\u5982\uff0c\u4f46\u5f53\u524d\u5df2\u6682\u505c\uff09</li> </ul> <p>\u8be5\u96c6\u5408\u8fd8\u5c06\u5305\u62ec\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\u7684\u4efb\u52a1\uff0c\u4f8b\u5982 \u6b63\u5728\u6267\u884c\u8c03\u7528 asyncio.all_tasks() \u51fd\u6570\u7684\u534f\u7a0b\u7684\u4efb\u52a1\u3002</p> <p>\u53e6\u5916\uff0c\u8bf7\u8bb0\u4f4f\uff0c\u7528\u4e8e\u542f\u52a8 asyncio \u7a0b\u5e8f\u7684 asyncio.run() \u65b9\u6cd5\u4f1a\u5c06\u63d0\u4f9b\u7684\u534f\u7a0b\u5305\u88c5\u5728\u4efb\u52a1\u4e2d\u3002 \u8fd9\u610f\u5473\u7740\u6240\u6709\u4efb\u52a1\u7684\u96c6\u5408\u5c06\u5305\u62ec\u7a0b\u5e8f\u5165\u53e3\u70b9\u7684\u4efb\u52a1\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u63a2\u7d22\u5f02\u6b65\u7a0b\u5e8f\u4e2d\u6709\u8bb8\u591a\u4efb\u52a1\u7684\u60c5\u51b5\uff0c\u7136\u540e\u83b7\u53d6\u6240\u6709\u4efb\u52a1\u7684\u96c6\u5408\u3002</p> <p>\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u521b\u5efa 10 \u4e2a\u4efb\u52a1\uff0c\u6bcf\u4e2a\u4efb\u52a1\u90fd\u5305\u88c5\u5e76\u8fd0\u884c\u76f8\u540c\u7684\u534f\u7a0b\u3002</p> <p>\u7136\u540e\uff0c\u4e3b\u534f\u7a0b\u83b7\u53d6\u7a0b\u5e8f\u4e2d\u8ba1\u5212\u6216\u8fd0\u884c\u7684\u6240\u6709\u4efb\u52a1\u7684\u96c6\u5408\u5e76\u62a5\u544a\u5176\u8be6\u7ec6\u4fe1\u606f\u3002</p> <p>\u4e0b\u9762\u5217\u51fa\u4e86\u5b8c\u6574\u7684\u793a\u4f8b\u3002</p> <pre><code># SuperFastPython.com\n# \u542f\u52a8\u591a\u4e2a\u4efb\u52a1\u5e76\u8bbf\u95ee\u6240\u6709\u4efb\u52a1\u7684\u793a\u4f8b\nimport asyncio\n\n# \u4efb\u52a1\u7684\u534f\u7a0b\nasync def task_coroutine(value):\n    # \u62a5\u544a\u6d88\u606f\n    print(f'task {value} is running')\n    # \u6682\u65f6\u963b\u585e\n    await asyncio.sleep(1)\n\n# \u5b9a\u4e49\u4e00\u4e2a\u4e3b\u534f\u7a0b\nasync def main():\n    # \u62a5\u544a\u6d88\u606f\n    print('main coroutine started')\n    # \u542f\u52a8\u8bb8\u591a\u4efb\u52a1\n    started_tasks = [asyncio.create_task(task_coroutine(i)) for i in range(10)]\n    # \u5141\u8bb8\u67d0\u4e9b\u4efb\u52a1\u6709\u65f6\u95f4\u5f00\u59cb\n    await asyncio.sleep(0.1)\n    # \u83b7\u53d6\u6240\u6709\u4efb\u52a1\n    tasks = asyncio.all_tasks()\n    # \u62a5\u544a\u6240\u6709\u4efb\u52a1\n    for task in tasks:\n        print(f'&gt; {task.get_name()}, {task.get_coro()}')\n    # \u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210\n    for task in started_tasks:\n        await task\n\n# \u542f\u52a8\u5f02\u6b65\u7a0b\u5e8f\nasyncio.run(main())\n</code></pre> <p>\u8fd0\u884c\u8be5\u793a\u4f8b\u9996\u5148\u521b\u5efa\u4e3b\u534f\u7a0b\u5e76\u4f7f\u7528\u5b83\u6765\u542f\u52a8 asyncio \u7a0b\u5e8f\u3002</p> <p>main() \u534f\u7a0b\u8fd0\u884c\u5e76\u9996\u5148\u62a5\u544a\u4e00\u6761\u6d88\u606f\u3002</p> <p>\u7136\u540e\u5b83\u521b\u5efa\u5e76\u5b89\u6392 10 \u4e2a\u5305\u88c5\u81ea\u5b9a\u4e49\u534f\u7a0b\u7684\u4efb\u52a1\uff0c</p> <p>\u7136\u540e\uff0cmain() \u534f\u7a0b\u4f1a\u963b\u585e\u4e00\u6bb5\u65f6\u95f4\uff0c\u4ee5\u5141\u8bb8\u4efb\u52a1\u5f00\u59cb\u8fd0\u884c\u3002</p> <p>\u4efb\u52a1\u5f00\u59cb\u8fd0\u884c\uff0c\u6bcf\u4e2a\u4efb\u52a1\u62a5\u544a\u4e00\u6761\u6d88\u606f\uff0c\u7136\u540e\u4f11\u7720\u3002</p> <p>main() \u534f\u7a0b\u6062\u590d\u5e76\u83b7\u53d6\u7a0b\u5e8f\u4e2d\u6240\u6709\u4efb\u52a1\u7684\u5217\u8868\u3002</p> <p>\u7136\u540e\u5b83\u62a5\u544a\u6bcf\u4e2a\u534f\u7a0b\u7684\u540d\u79f0\u548c\u534f\u7a0b\u3002</p> <p>\u6700\u540e\uff0c\u5b83\u679a\u4e3e\u5df2\u521b\u5efa\u7684\u4efb\u52a1\u5217\u8868\u5e76\u7b49\u5f85\u6bcf\u4e2a\u4efb\u52a1\uff0c\u4ee5\u5141\u8bb8\u5b83\u4eec\u5b8c\u6210\u3002</p> <p>\u8fd9\u5f3a\u8c03\u4e86\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6 asyncio \u7a0b\u5e8f\u4e2d\u6240\u6709\u4efb\u52a1\u7684\u96c6\u5408\uff0c\u5176\u4e2d\u5305\u62ec\u521b\u5efa\u7684\u4efb\u52a1\u4ee5\u53ca\u4ee3\u8868\u7a0b\u5e8f\u5165\u53e3\u70b9\u7684\u4efb\u52a1\u3002</p> <pre><code>main coroutine started\ntask 0 is running\ntask 1 is running\ntask 2 is running\ntask 3 is running\ntask 4 is running\ntask 5 is running\ntask 6 is running\ntask 7 is running\ntask 8 is running\ntask 9 is running\n&gt; Task-9, &lt;coroutine object task_coroutine at 0x10e186e30&gt;\n&gt; Task-2, &lt;coroutine object task_coroutine at 0x10e184e40&gt;\n&gt; Task-11, &lt;coroutine object task_coroutine at 0x10e186f10&gt;\n&gt; Task-7, &lt;coroutine object task_coroutine at 0x10e186d50&gt;\n&gt; Task-4, &lt;coroutine object task_coroutine at 0x10e185700&gt;\n&gt; Task-10, &lt;coroutine object task_coroutine at 0x10e186ea0&gt;\n&gt; Task-8, &lt;coroutine object task_coroutine at 0x10e186dc0&gt;\n&gt; Task-5, &lt;coroutine object task_coroutine at 0x10e186ab0&gt;\n&gt; Task-1, &lt;coroutine object main at 0x10e1847b0&gt;\n&gt; Task-3, &lt;coroutine object task_coroutine at 0x10e184f90&gt;\n&gt; Task-6, &lt;coroutine object task_coroutine at 0x10e186ce0&gt;\n</code></pre> <p>\u60a8\u53ef\u4ee5\u4e86\u89e3\u6709\u5173\u83b7\u53d6\u6240\u6709\u4efb\u52a1\u7684\u66f4\u591a\u4fe1\u606f\u3002 \u5728\u6559\u7a0b\u4e2d\uff1a</p> <ul> <li>\u5982\u4f55\u5728 Python \u4e2d\u83b7\u53d6\u6240\u6709 Asyncio \u4efb\u52a1</li> </ul> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u63a2\u8ba8\u5982\u4f55\u540c\u65f6\u8fd0\u884c\u591a\u4e2a\u534f\u7a0b\u3002</p> <p>We may need to get access to all tasks in an asyncio program.</p> <p>This may be for many reasons, such as:</p> <ul> <li>To introspect the current status or complexity of the program.</li> <li>To log the details of all running tasks.</li> <li>To find a task that can be queried or canceled.</li> </ul> <p>We can get a set of all scheduled and running (not yet done) tasks in an asyncio program via the asyncio.all_tasks() function.</p> <p>For example:</p> <pre><code>...\n# get all tasks\ntasks = asyncio.all_tasks()\n</code></pre> <p>This will return a set of all tasks in the asyncio program.</p> <p>It is a set so that each task is only represented once.</p> <p>A task will be included if:</p> <ul> <li>The task has been scheduled but is not yet running.</li> <li>The task is currently running (e.g. but is currently suspended)</li> </ul> <p>The set will also include a task for the currently running task, e.g. the task that is executing the coroutine that calls the asyncio.all_tasks() function.</p> <p>Also, recall that the asyncio.run() method that is used to start an asyncio program will wrap the provided coroutine in a task. This means that the set of all tasks will include the task for the entry point of the program.</p> <p>We can explore the case where we have many tasks within an asyncio program and then get a set of all tasks.</p> <p>In this example, we first create 10 tasks, each wrapping and running the same coroutine.</p> <p>The main coroutine then gets a set of all tasks scheduled or running in the program and reports their details.</p> <p>The complete example is listed below.</p> <pre><code># SuperFastPython.com\n# example of starting many tasks and getting access to all tasks\nimport asyncio\n\n# coroutine for a task\nasync def task_coroutine(value):\n    # report a message\n    print(f'task {value} is running')\n    # block for a moment\n    await asyncio.sleep(1)\n\n# define a main coroutine\nasync def main():\n    # report a message\n    print('main coroutine started')\n    # start many tasks\n    started_tasks = [asyncio.create_task(task_coroutine(i)) for i in range(10)]\n    # allow some of the tasks time to start\n    await asyncio.sleep(0.1)\n    # get all tasks\n    tasks = asyncio.all_tasks()\n    # report all tasks\n    for task in tasks:\n        print(f'&gt; {task.get_name()}, {task.get_coro()}')\n    # wait for all tasks to complete\n    for task in started_tasks:\n        await task\n\n# start the asyncio program\nasyncio.run(main())\n</code></pre> <p>Running the example first creates the main coroutine and uses it to start the asyncio program.</p> <p>The main() coroutine runs and first reports a message.</p> <p>It then creates and schedules 10 tasks that wrap the custom coroutine,</p> <p>The main() coroutine then blocks for a moment to allow the tasks to begin running.</p> <p>The tasks start running and each reports a message and then sleeps.</p> <p>The main() coroutine resumes and gets a list of all tasks in the program.</p> <p>It then reports the name and coroutine of each.</p> <p>Finally, it enumerates the list of tasks that were created and awaits each, allowing them to be completed.</p> <p>This highlights that we can get a set of all tasks in an asyncio program that includes both the tasks that were created as well as the task that represents the entry point into the program.</p> <pre><code>main coroutine started\ntask 0 is running\ntask 1 is running\ntask 2 is running\ntask 3 is running\ntask 4 is running\ntask 5 is running\ntask 6 is running\ntask 7 is running\ntask 8 is running\ntask 9 is running\n&gt; Task-9, &lt;coroutine object task_coroutine at 0x10e186e30&gt;\n&gt; Task-2, &lt;coroutine object task_coroutine at 0x10e184e40&gt;\n&gt; Task-11, &lt;coroutine object task_coroutine at 0x10e186f10&gt;\n&gt; Task-7, &lt;coroutine object task_coroutine at 0x10e186d50&gt;\n&gt; Task-4, &lt;coroutine object task_coroutine at 0x10e185700&gt;\n&gt; Task-10, &lt;coroutine object task_coroutine at 0x10e186ea0&gt;\n&gt; Task-8, &lt;coroutine object task_coroutine at 0x10e186dc0&gt;\n&gt; Task-5, &lt;coroutine object task_coroutine at 0x10e186ab0&gt;\n&gt; Task-1, &lt;coroutine object main at 0x10e1847b0&gt;\n&gt; Task-3, &lt;coroutine object task_coroutine at 0x10e184f90&gt;\n&gt; Task-6, &lt;coroutine object task_coroutine at 0x10e186ce0&gt;\n</code></pre> <p>You can learn more about getting all tasks. in the tutorial:</p> <ul> <li>How to Get All Asyncio Tasks in Python</li> </ul> <p>Next, we will explore how to run many coroutines concurrently.</p>"},{"location":"other/xsd-parse/","title":"\u89e3\u6790xsd\u6587\u4ef6","text":"<p>\u53c2\u8003\u5305: https://github.com/sissaschool/xmlschema</p> <p>\u6587\u6863: https://xmlschema.readthedocs.io/en/latest/components.html</p> <pre><code>from lxml import etree\nfrom lxml import objectify\n\nfrom typing import List\nimport xmlschema\nfrom xmlschema.validators.schemas import XMLSchema10\nfrom xmlschema.validators.elements import XsdElement\nfrom xmlschema.validators.simple_types import XsdSimpleType\nfrom xmlschema.validators.complex_types import XsdComplexType\nfrom xmlschema.namespaces import NamespaceView\nfrom xmlschema.validators.groups import XsdGroup\nfrom xmlschema.validators.attributes import XsdAttributeGroup\n\n\ndef main():\n    print(f\"hello world\")\n\n\ndef main2():\n    \"\"\"\u89e3\u6790xsd\u6587\u4ef6\n\n    \u53c2\u8003: https://xmlschema.readthedocs.io/en/latest/components.html\n    \"\"\"\n    xsd_file = \"xsd/xmlSchema/pml.xsd\"\n\n    my_schema: XMLSchema10 = xmlschema.XMLSchema(xsd_file)\n\n    print(f\"{type(my_schema)}\")\n\n    # print(f\"{my_schema.xsd_element_class.text = }\")\n    # print(f\"{my_schema.schema_location = }\")\n    # print(f\"{my_schema.tag = }\")\n    # print(f\"{my_schema.version = }\")\n    # print(f\"{my_schema.all_errors = }\")\n    # print(f\"{my_schema.allow = }\")\n    # print(f\"{my_schema.all_errors = }\")\n    # print(f\"{my_schema.annotations = }\")\n    # print(f\"{my_schema.attrib = }\")\n    # print(f\"{my_schema.target_prefix = }\")\n    # print(f\"{my_schema.root_elements = }\")\n\n    all_components = list(my_schema.iter_components())\n    all_children = list(my_schema.iterchildren())\n    all_globals = list(my_schema.iter_globals())\n\n    elements: List[XsdElement] = my_schema.elements\n\n    root_elements: List[XsdElement] = my_schema.root_elements\n\n    simple_elements: List[XsdSimpleType] = my_schema.simple_types\n\n    complex_types: List[XsdComplexType] = my_schema.complex_types\n\n    groups: NamespaceView[XsdGroup] = my_schema.groups\n\n    attribute_groups: NamespaceView[XsdAttributeGroup] = my_schema.attribute_groups\n\n    print(f\"schema \u547d\u540d\u7a7a\u95f4: {my_schema.namespaces = }\")\n    print(f\"\u6240\u6709\u7ec4\u4ef6\u6570\u91cf: {len(all_components) = }\")\n    print(f\"\u6240\u6709children\u6570\u91cf: {len(all_children) = }\")\n    print(f\"\u6240\u6709globals\u6570\u91cf: {len(all_globals) = }\")\n    print(f\"element\u8282\u70b9\u6570\u91cf: {len(elements) = }\")\n    print(f\"\u6839\u8282\u70b9\u6570\u91cf: {len(root_elements) = }\")\n    print(f\"\u7b80\u5355\u7c7b\u578b\u6570\u91cf: {len(simple_elements) = }\")\n    print(f\"\u590d\u6742\u7c7b\u578b\u6570\u91cf: {len(complex_types) = }\")\n    print(f\"group\u7c7b\u578b\u6570\u91cf: {len(groups) = }\")\n    print(f\"\u5c5e\u6027group\u7c7b\u578b\u6570\u91cf: {len(attribute_groups) = }\")\n\n    # for element in root_elements:\n    #     print(f\"*\" * 50)\n    #     print(f\"{element.tag = }\")\n    # print(f\"{element.name = }\")\n    # print(f\"{element.local_name = }\")\n    # print(f\"{element.default_namespace = }\")\n    # print(f\"{element.target_namespace = }\")\n    #     print(f\"{element.target_namespace = }\")\n    #     print(f\"{element.namespaces = }\")\n    #     print(f\"{element.type = }\")\n    #     print(f\"{element.type.elem = }\")\n    #     print(f\"{element.annotation = }\")\n    #     print(f\"{element.attrib = }\")\n    #     print(f\"{element.attributes = }\")\n    #     print(f\"{element.elem = }\")\n    # print(f\"{element.attrib['TargetMode'] = }\")\n\n    for complex_type in complex_types:\n        # print(f\"{complex_type.name = }\")\n        # print(f\"{complex_type.local_name = }\")\n        # if complex_type.local_name == \"CT_TransitionStartSoundAction\":\n        if isinstance(complex_type.content, XsdSimpleType):\n            print(f\"{complex_type.local_name = } -&gt; {complex_type.content = }\")\n        else:\n            continue\n        # for item in complex_type.content:\n\n    for index, global_componet in enumerate(all_globals, start=1):\n        print(f\"{index} - {global_componet } \")  # { global_componet.local_name = }\n\n    print(f\"{len(my_schema.maps.elements) = }\")\n    print(f\"{len(my_schema.types) = }\")\n    print(f\"{my_schema.types['ST_TLBehaviorOverrideType'] = }\")\n\n\nif __name__ == \"__main__\":\n    main2()\n</code></pre>"}]}